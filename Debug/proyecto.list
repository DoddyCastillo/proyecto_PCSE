
proyecto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099f8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  08009bc8  08009bc8  0000abc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0b4  0800a0b4  0000c1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a0b4  0800a0b4  0000b0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0bc  0800a0bc  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0bc  0800a0bc  0000b0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a0c0  0800a0c0  0000b0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a0c4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  200001d4  0800a298  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  0800a298  0000c4bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f3f0  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027ea  00000000  00000000  0001b5f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  0001dde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b11  00000000  00000000  0001ec40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023e10  00000000  00000000  0001f751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ad3  00000000  00000000  00043561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfc08  00000000  00000000  00057034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00126c3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004eb8  00000000  00000000  00126c80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  0012bb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009bb0 	.word	0x08009bb0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08009bb0 	.word	0x08009bb0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_frsub>:
 8000be8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bec:	e002      	b.n	8000bf4 <__addsf3>
 8000bee:	bf00      	nop

08000bf0 <__aeabi_fsub>:
 8000bf0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bf4 <__addsf3>:
 8000bf4:	0042      	lsls	r2, r0, #1
 8000bf6:	bf1f      	itttt	ne
 8000bf8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bfc:	ea92 0f03 	teqne	r2, r3
 8000c00:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c04:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c08:	d06a      	beq.n	8000ce0 <__addsf3+0xec>
 8000c0a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c0e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c12:	bfc1      	itttt	gt
 8000c14:	18d2      	addgt	r2, r2, r3
 8000c16:	4041      	eorgt	r1, r0
 8000c18:	4048      	eorgt	r0, r1
 8000c1a:	4041      	eorgt	r1, r0
 8000c1c:	bfb8      	it	lt
 8000c1e:	425b      	neglt	r3, r3
 8000c20:	2b19      	cmp	r3, #25
 8000c22:	bf88      	it	hi
 8000c24:	4770      	bxhi	lr
 8000c26:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c2a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c2e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c32:	bf18      	it	ne
 8000c34:	4240      	negne	r0, r0
 8000c36:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c3a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c3e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c42:	bf18      	it	ne
 8000c44:	4249      	negne	r1, r1
 8000c46:	ea92 0f03 	teq	r2, r3
 8000c4a:	d03f      	beq.n	8000ccc <__addsf3+0xd8>
 8000c4c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c50:	fa41 fc03 	asr.w	ip, r1, r3
 8000c54:	eb10 000c 	adds.w	r0, r0, ip
 8000c58:	f1c3 0320 	rsb	r3, r3, #32
 8000c5c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c60:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c64:	d502      	bpl.n	8000c6c <__addsf3+0x78>
 8000c66:	4249      	negs	r1, r1
 8000c68:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c6c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c70:	d313      	bcc.n	8000c9a <__addsf3+0xa6>
 8000c72:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c76:	d306      	bcc.n	8000c86 <__addsf3+0x92>
 8000c78:	0840      	lsrs	r0, r0, #1
 8000c7a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c7e:	f102 0201 	add.w	r2, r2, #1
 8000c82:	2afe      	cmp	r2, #254	@ 0xfe
 8000c84:	d251      	bcs.n	8000d2a <__addsf3+0x136>
 8000c86:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c8e:	bf08      	it	eq
 8000c90:	f020 0001 	biceq.w	r0, r0, #1
 8000c94:	ea40 0003 	orr.w	r0, r0, r3
 8000c98:	4770      	bx	lr
 8000c9a:	0049      	lsls	r1, r1, #1
 8000c9c:	eb40 0000 	adc.w	r0, r0, r0
 8000ca0:	3a01      	subs	r2, #1
 8000ca2:	bf28      	it	cs
 8000ca4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000ca8:	d2ed      	bcs.n	8000c86 <__addsf3+0x92>
 8000caa:	fab0 fc80 	clz	ip, r0
 8000cae:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cb2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cb6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cba:	bfaa      	itet	ge
 8000cbc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc0:	4252      	neglt	r2, r2
 8000cc2:	4318      	orrge	r0, r3
 8000cc4:	bfbc      	itt	lt
 8000cc6:	40d0      	lsrlt	r0, r2
 8000cc8:	4318      	orrlt	r0, r3
 8000cca:	4770      	bx	lr
 8000ccc:	f092 0f00 	teq	r2, #0
 8000cd0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cd4:	bf06      	itte	eq
 8000cd6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cda:	3201      	addeq	r2, #1
 8000cdc:	3b01      	subne	r3, #1
 8000cde:	e7b5      	b.n	8000c4c <__addsf3+0x58>
 8000ce0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ce4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ce8:	bf18      	it	ne
 8000cea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cee:	d021      	beq.n	8000d34 <__addsf3+0x140>
 8000cf0:	ea92 0f03 	teq	r2, r3
 8000cf4:	d004      	beq.n	8000d00 <__addsf3+0x10c>
 8000cf6:	f092 0f00 	teq	r2, #0
 8000cfa:	bf08      	it	eq
 8000cfc:	4608      	moveq	r0, r1
 8000cfe:	4770      	bx	lr
 8000d00:	ea90 0f01 	teq	r0, r1
 8000d04:	bf1c      	itt	ne
 8000d06:	2000      	movne	r0, #0
 8000d08:	4770      	bxne	lr
 8000d0a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d0e:	d104      	bne.n	8000d1a <__addsf3+0x126>
 8000d10:	0040      	lsls	r0, r0, #1
 8000d12:	bf28      	it	cs
 8000d14:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d18:	4770      	bx	lr
 8000d1a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d1e:	bf3c      	itt	cc
 8000d20:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d24:	4770      	bxcc	lr
 8000d26:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d2a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d2e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d32:	4770      	bx	lr
 8000d34:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d38:	bf16      	itet	ne
 8000d3a:	4608      	movne	r0, r1
 8000d3c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d40:	4601      	movne	r1, r0
 8000d42:	0242      	lsls	r2, r0, #9
 8000d44:	bf06      	itte	eq
 8000d46:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d4a:	ea90 0f01 	teqeq	r0, r1
 8000d4e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d52:	4770      	bx	lr

08000d54 <__aeabi_ui2f>:
 8000d54:	f04f 0300 	mov.w	r3, #0
 8000d58:	e004      	b.n	8000d64 <__aeabi_i2f+0x8>
 8000d5a:	bf00      	nop

08000d5c <__aeabi_i2f>:
 8000d5c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d60:	bf48      	it	mi
 8000d62:	4240      	negmi	r0, r0
 8000d64:	ea5f 0c00 	movs.w	ip, r0
 8000d68:	bf08      	it	eq
 8000d6a:	4770      	bxeq	lr
 8000d6c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d70:	4601      	mov	r1, r0
 8000d72:	f04f 0000 	mov.w	r0, #0
 8000d76:	e01c      	b.n	8000db2 <__aeabi_l2f+0x2a>

08000d78 <__aeabi_ul2f>:
 8000d78:	ea50 0201 	orrs.w	r2, r0, r1
 8000d7c:	bf08      	it	eq
 8000d7e:	4770      	bxeq	lr
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	e00a      	b.n	8000d9c <__aeabi_l2f+0x14>
 8000d86:	bf00      	nop

08000d88 <__aeabi_l2f>:
 8000d88:	ea50 0201 	orrs.w	r2, r0, r1
 8000d8c:	bf08      	it	eq
 8000d8e:	4770      	bxeq	lr
 8000d90:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d94:	d502      	bpl.n	8000d9c <__aeabi_l2f+0x14>
 8000d96:	4240      	negs	r0, r0
 8000d98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d9c:	ea5f 0c01 	movs.w	ip, r1
 8000da0:	bf02      	ittt	eq
 8000da2:	4684      	moveq	ip, r0
 8000da4:	4601      	moveq	r1, r0
 8000da6:	2000      	moveq	r0, #0
 8000da8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000dac:	bf08      	it	eq
 8000dae:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000db2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000db6:	fabc f28c 	clz	r2, ip
 8000dba:	3a08      	subs	r2, #8
 8000dbc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc0:	db10      	blt.n	8000de4 <__aeabi_l2f+0x5c>
 8000dc2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dcc:	f1c2 0220 	rsb	r2, r2, #32
 8000dd0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000dd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd8:	eb43 0002 	adc.w	r0, r3, r2
 8000ddc:	bf08      	it	eq
 8000dde:	f020 0001 	biceq.w	r0, r0, #1
 8000de2:	4770      	bx	lr
 8000de4:	f102 0220 	add.w	r2, r2, #32
 8000de8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dec:	f1c2 0220 	rsb	r2, r2, #32
 8000df0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000df4:	fa21 f202 	lsr.w	r2, r1, r2
 8000df8:	eb43 0002 	adc.w	r0, r3, r2
 8000dfc:	bf08      	it	eq
 8000dfe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_ldivmod>:
 8000e04:	b97b      	cbnz	r3, 8000e26 <__aeabi_ldivmod+0x22>
 8000e06:	b972      	cbnz	r2, 8000e26 <__aeabi_ldivmod+0x22>
 8000e08:	2900      	cmp	r1, #0
 8000e0a:	bfbe      	ittt	lt
 8000e0c:	2000      	movlt	r0, #0
 8000e0e:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000e12:	e006      	blt.n	8000e22 <__aeabi_ldivmod+0x1e>
 8000e14:	bf08      	it	eq
 8000e16:	2800      	cmpeq	r0, #0
 8000e18:	bf1c      	itt	ne
 8000e1a:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000e1e:	f04f 30ff 	movne.w	r0, #4294967295
 8000e22:	f000 b9d3 	b.w	80011cc <__aeabi_idiv0>
 8000e26:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e2a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e2e:	2900      	cmp	r1, #0
 8000e30:	db09      	blt.n	8000e46 <__aeabi_ldivmod+0x42>
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	db1a      	blt.n	8000e6c <__aeabi_ldivmod+0x68>
 8000e36:	f000 f84d 	bl	8000ed4 <__udivmoddi4>
 8000e3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e42:	b004      	add	sp, #16
 8000e44:	4770      	bx	lr
 8000e46:	4240      	negs	r0, r0
 8000e48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	db1b      	blt.n	8000e88 <__aeabi_ldivmod+0x84>
 8000e50:	f000 f840 	bl	8000ed4 <__udivmoddi4>
 8000e54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e5c:	b004      	add	sp, #16
 8000e5e:	4240      	negs	r0, r0
 8000e60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e64:	4252      	negs	r2, r2
 8000e66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e6a:	4770      	bx	lr
 8000e6c:	4252      	negs	r2, r2
 8000e6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e72:	f000 f82f 	bl	8000ed4 <__udivmoddi4>
 8000e76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e7e:	b004      	add	sp, #16
 8000e80:	4240      	negs	r0, r0
 8000e82:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e86:	4770      	bx	lr
 8000e88:	4252      	negs	r2, r2
 8000e8a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e8e:	f000 f821 	bl	8000ed4 <__udivmoddi4>
 8000e92:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e9a:	b004      	add	sp, #16
 8000e9c:	4252      	negs	r2, r2
 8000e9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_uldivmod>:
 8000ea4:	b953      	cbnz	r3, 8000ebc <__aeabi_uldivmod+0x18>
 8000ea6:	b94a      	cbnz	r2, 8000ebc <__aeabi_uldivmod+0x18>
 8000ea8:	2900      	cmp	r1, #0
 8000eaa:	bf08      	it	eq
 8000eac:	2800      	cmpeq	r0, #0
 8000eae:	bf1c      	itt	ne
 8000eb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000eb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000eb8:	f000 b988 	b.w	80011cc <__aeabi_idiv0>
 8000ebc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ec0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ec4:	f000 f806 	bl	8000ed4 <__udivmoddi4>
 8000ec8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ecc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ed0:	b004      	add	sp, #16
 8000ed2:	4770      	bx	lr

08000ed4 <__udivmoddi4>:
 8000ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ed8:	9d08      	ldr	r5, [sp, #32]
 8000eda:	468e      	mov	lr, r1
 8000edc:	4604      	mov	r4, r0
 8000ede:	4688      	mov	r8, r1
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d14a      	bne.n	8000f7a <__udivmoddi4+0xa6>
 8000ee4:	428a      	cmp	r2, r1
 8000ee6:	4617      	mov	r7, r2
 8000ee8:	d962      	bls.n	8000fb0 <__udivmoddi4+0xdc>
 8000eea:	fab2 f682 	clz	r6, r2
 8000eee:	b14e      	cbz	r6, 8000f04 <__udivmoddi4+0x30>
 8000ef0:	f1c6 0320 	rsb	r3, r6, #32
 8000ef4:	fa01 f806 	lsl.w	r8, r1, r6
 8000ef8:	fa20 f303 	lsr.w	r3, r0, r3
 8000efc:	40b7      	lsls	r7, r6
 8000efe:	ea43 0808 	orr.w	r8, r3, r8
 8000f02:	40b4      	lsls	r4, r6
 8000f04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f08:	fa1f fc87 	uxth.w	ip, r7
 8000f0c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000f10:	0c23      	lsrs	r3, r4, #16
 8000f12:	fb0e 8811 	mls	r8, lr, r1, r8
 8000f16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f1a:	fb01 f20c 	mul.w	r2, r1, ip
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d909      	bls.n	8000f36 <__udivmoddi4+0x62>
 8000f22:	18fb      	adds	r3, r7, r3
 8000f24:	f101 30ff 	add.w	r0, r1, #4294967295
 8000f28:	f080 80ea 	bcs.w	8001100 <__udivmoddi4+0x22c>
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	f240 80e7 	bls.w	8001100 <__udivmoddi4+0x22c>
 8000f32:	3902      	subs	r1, #2
 8000f34:	443b      	add	r3, r7
 8000f36:	1a9a      	subs	r2, r3, r2
 8000f38:	b2a3      	uxth	r3, r4
 8000f3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000f3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000f42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f46:	fb00 fc0c 	mul.w	ip, r0, ip
 8000f4a:	459c      	cmp	ip, r3
 8000f4c:	d909      	bls.n	8000f62 <__udivmoddi4+0x8e>
 8000f4e:	18fb      	adds	r3, r7, r3
 8000f50:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f54:	f080 80d6 	bcs.w	8001104 <__udivmoddi4+0x230>
 8000f58:	459c      	cmp	ip, r3
 8000f5a:	f240 80d3 	bls.w	8001104 <__udivmoddi4+0x230>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3802      	subs	r0, #2
 8000f62:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000f66:	eba3 030c 	sub.w	r3, r3, ip
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	b11d      	cbz	r5, 8000f76 <__udivmoddi4+0xa2>
 8000f6e:	40f3      	lsrs	r3, r6
 8000f70:	2200      	movs	r2, #0
 8000f72:	e9c5 3200 	strd	r3, r2, [r5]
 8000f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d905      	bls.n	8000f8a <__udivmoddi4+0xb6>
 8000f7e:	b10d      	cbz	r5, 8000f84 <__udivmoddi4+0xb0>
 8000f80:	e9c5 0100 	strd	r0, r1, [r5]
 8000f84:	2100      	movs	r1, #0
 8000f86:	4608      	mov	r0, r1
 8000f88:	e7f5      	b.n	8000f76 <__udivmoddi4+0xa2>
 8000f8a:	fab3 f183 	clz	r1, r3
 8000f8e:	2900      	cmp	r1, #0
 8000f90:	d146      	bne.n	8001020 <__udivmoddi4+0x14c>
 8000f92:	4573      	cmp	r3, lr
 8000f94:	d302      	bcc.n	8000f9c <__udivmoddi4+0xc8>
 8000f96:	4282      	cmp	r2, r0
 8000f98:	f200 8105 	bhi.w	80011a6 <__udivmoddi4+0x2d2>
 8000f9c:	1a84      	subs	r4, r0, r2
 8000f9e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	4690      	mov	r8, r2
 8000fa6:	2d00      	cmp	r5, #0
 8000fa8:	d0e5      	beq.n	8000f76 <__udivmoddi4+0xa2>
 8000faa:	e9c5 4800 	strd	r4, r8, [r5]
 8000fae:	e7e2      	b.n	8000f76 <__udivmoddi4+0xa2>
 8000fb0:	2a00      	cmp	r2, #0
 8000fb2:	f000 8090 	beq.w	80010d6 <__udivmoddi4+0x202>
 8000fb6:	fab2 f682 	clz	r6, r2
 8000fba:	2e00      	cmp	r6, #0
 8000fbc:	f040 80a4 	bne.w	8001108 <__udivmoddi4+0x234>
 8000fc0:	1a8a      	subs	r2, r1, r2
 8000fc2:	0c03      	lsrs	r3, r0, #16
 8000fc4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fc8:	b280      	uxth	r0, r0
 8000fca:	b2bc      	uxth	r4, r7
 8000fcc:	2101      	movs	r1, #1
 8000fce:	fbb2 fcfe 	udiv	ip, r2, lr
 8000fd2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000fd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000fda:	fb04 f20c 	mul.w	r2, r4, ip
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d907      	bls.n	8000ff2 <__udivmoddi4+0x11e>
 8000fe2:	18fb      	adds	r3, r7, r3
 8000fe4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000fe8:	d202      	bcs.n	8000ff0 <__udivmoddi4+0x11c>
 8000fea:	429a      	cmp	r2, r3
 8000fec:	f200 80e0 	bhi.w	80011b0 <__udivmoddi4+0x2dc>
 8000ff0:	46c4      	mov	ip, r8
 8000ff2:	1a9b      	subs	r3, r3, r2
 8000ff4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ff8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ffc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8001000:	fb02 f404 	mul.w	r4, r2, r4
 8001004:	429c      	cmp	r4, r3
 8001006:	d907      	bls.n	8001018 <__udivmoddi4+0x144>
 8001008:	18fb      	adds	r3, r7, r3
 800100a:	f102 30ff 	add.w	r0, r2, #4294967295
 800100e:	d202      	bcs.n	8001016 <__udivmoddi4+0x142>
 8001010:	429c      	cmp	r4, r3
 8001012:	f200 80ca 	bhi.w	80011aa <__udivmoddi4+0x2d6>
 8001016:	4602      	mov	r2, r0
 8001018:	1b1b      	subs	r3, r3, r4
 800101a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800101e:	e7a5      	b.n	8000f6c <__udivmoddi4+0x98>
 8001020:	f1c1 0620 	rsb	r6, r1, #32
 8001024:	408b      	lsls	r3, r1
 8001026:	fa22 f706 	lsr.w	r7, r2, r6
 800102a:	431f      	orrs	r7, r3
 800102c:	fa0e f401 	lsl.w	r4, lr, r1
 8001030:	fa20 f306 	lsr.w	r3, r0, r6
 8001034:	fa2e fe06 	lsr.w	lr, lr, r6
 8001038:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800103c:	4323      	orrs	r3, r4
 800103e:	fa00 f801 	lsl.w	r8, r0, r1
 8001042:	fa1f fc87 	uxth.w	ip, r7
 8001046:	fbbe f0f9 	udiv	r0, lr, r9
 800104a:	0c1c      	lsrs	r4, r3, #16
 800104c:	fb09 ee10 	mls	lr, r9, r0, lr
 8001050:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8001054:	fb00 fe0c 	mul.w	lr, r0, ip
 8001058:	45a6      	cmp	lr, r4
 800105a:	fa02 f201 	lsl.w	r2, r2, r1
 800105e:	d909      	bls.n	8001074 <__udivmoddi4+0x1a0>
 8001060:	193c      	adds	r4, r7, r4
 8001062:	f100 3aff 	add.w	sl, r0, #4294967295
 8001066:	f080 809c 	bcs.w	80011a2 <__udivmoddi4+0x2ce>
 800106a:	45a6      	cmp	lr, r4
 800106c:	f240 8099 	bls.w	80011a2 <__udivmoddi4+0x2ce>
 8001070:	3802      	subs	r0, #2
 8001072:	443c      	add	r4, r7
 8001074:	eba4 040e 	sub.w	r4, r4, lr
 8001078:	fa1f fe83 	uxth.w	lr, r3
 800107c:	fbb4 f3f9 	udiv	r3, r4, r9
 8001080:	fb09 4413 	mls	r4, r9, r3, r4
 8001084:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8001088:	fb03 fc0c 	mul.w	ip, r3, ip
 800108c:	45a4      	cmp	ip, r4
 800108e:	d908      	bls.n	80010a2 <__udivmoddi4+0x1ce>
 8001090:	193c      	adds	r4, r7, r4
 8001092:	f103 3eff 	add.w	lr, r3, #4294967295
 8001096:	f080 8082 	bcs.w	800119e <__udivmoddi4+0x2ca>
 800109a:	45a4      	cmp	ip, r4
 800109c:	d97f      	bls.n	800119e <__udivmoddi4+0x2ca>
 800109e:	3b02      	subs	r3, #2
 80010a0:	443c      	add	r4, r7
 80010a2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80010a6:	eba4 040c 	sub.w	r4, r4, ip
 80010aa:	fba0 ec02 	umull	lr, ip, r0, r2
 80010ae:	4564      	cmp	r4, ip
 80010b0:	4673      	mov	r3, lr
 80010b2:	46e1      	mov	r9, ip
 80010b4:	d362      	bcc.n	800117c <__udivmoddi4+0x2a8>
 80010b6:	d05f      	beq.n	8001178 <__udivmoddi4+0x2a4>
 80010b8:	b15d      	cbz	r5, 80010d2 <__udivmoddi4+0x1fe>
 80010ba:	ebb8 0203 	subs.w	r2, r8, r3
 80010be:	eb64 0409 	sbc.w	r4, r4, r9
 80010c2:	fa04 f606 	lsl.w	r6, r4, r6
 80010c6:	fa22 f301 	lsr.w	r3, r2, r1
 80010ca:	431e      	orrs	r6, r3
 80010cc:	40cc      	lsrs	r4, r1
 80010ce:	e9c5 6400 	strd	r6, r4, [r5]
 80010d2:	2100      	movs	r1, #0
 80010d4:	e74f      	b.n	8000f76 <__udivmoddi4+0xa2>
 80010d6:	fbb1 fcf2 	udiv	ip, r1, r2
 80010da:	0c01      	lsrs	r1, r0, #16
 80010dc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80010e0:	b280      	uxth	r0, r0
 80010e2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80010e6:	463b      	mov	r3, r7
 80010e8:	4638      	mov	r0, r7
 80010ea:	463c      	mov	r4, r7
 80010ec:	46b8      	mov	r8, r7
 80010ee:	46be      	mov	lr, r7
 80010f0:	2620      	movs	r6, #32
 80010f2:	fbb1 f1f7 	udiv	r1, r1, r7
 80010f6:	eba2 0208 	sub.w	r2, r2, r8
 80010fa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80010fe:	e766      	b.n	8000fce <__udivmoddi4+0xfa>
 8001100:	4601      	mov	r1, r0
 8001102:	e718      	b.n	8000f36 <__udivmoddi4+0x62>
 8001104:	4610      	mov	r0, r2
 8001106:	e72c      	b.n	8000f62 <__udivmoddi4+0x8e>
 8001108:	f1c6 0220 	rsb	r2, r6, #32
 800110c:	fa2e f302 	lsr.w	r3, lr, r2
 8001110:	40b7      	lsls	r7, r6
 8001112:	40b1      	lsls	r1, r6
 8001114:	fa20 f202 	lsr.w	r2, r0, r2
 8001118:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800111c:	430a      	orrs	r2, r1
 800111e:	fbb3 f8fe 	udiv	r8, r3, lr
 8001122:	b2bc      	uxth	r4, r7
 8001124:	fb0e 3318 	mls	r3, lr, r8, r3
 8001128:	0c11      	lsrs	r1, r2, #16
 800112a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800112e:	fb08 f904 	mul.w	r9, r8, r4
 8001132:	40b0      	lsls	r0, r6
 8001134:	4589      	cmp	r9, r1
 8001136:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800113a:	b280      	uxth	r0, r0
 800113c:	d93e      	bls.n	80011bc <__udivmoddi4+0x2e8>
 800113e:	1879      	adds	r1, r7, r1
 8001140:	f108 3cff 	add.w	ip, r8, #4294967295
 8001144:	d201      	bcs.n	800114a <__udivmoddi4+0x276>
 8001146:	4589      	cmp	r9, r1
 8001148:	d81f      	bhi.n	800118a <__udivmoddi4+0x2b6>
 800114a:	eba1 0109 	sub.w	r1, r1, r9
 800114e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001152:	fb09 f804 	mul.w	r8, r9, r4
 8001156:	fb0e 1119 	mls	r1, lr, r9, r1
 800115a:	b292      	uxth	r2, r2
 800115c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001160:	4542      	cmp	r2, r8
 8001162:	d229      	bcs.n	80011b8 <__udivmoddi4+0x2e4>
 8001164:	18ba      	adds	r2, r7, r2
 8001166:	f109 31ff 	add.w	r1, r9, #4294967295
 800116a:	d2c4      	bcs.n	80010f6 <__udivmoddi4+0x222>
 800116c:	4542      	cmp	r2, r8
 800116e:	d2c2      	bcs.n	80010f6 <__udivmoddi4+0x222>
 8001170:	f1a9 0102 	sub.w	r1, r9, #2
 8001174:	443a      	add	r2, r7
 8001176:	e7be      	b.n	80010f6 <__udivmoddi4+0x222>
 8001178:	45f0      	cmp	r8, lr
 800117a:	d29d      	bcs.n	80010b8 <__udivmoddi4+0x1e4>
 800117c:	ebbe 0302 	subs.w	r3, lr, r2
 8001180:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001184:	3801      	subs	r0, #1
 8001186:	46e1      	mov	r9, ip
 8001188:	e796      	b.n	80010b8 <__udivmoddi4+0x1e4>
 800118a:	eba7 0909 	sub.w	r9, r7, r9
 800118e:	4449      	add	r1, r9
 8001190:	f1a8 0c02 	sub.w	ip, r8, #2
 8001194:	fbb1 f9fe 	udiv	r9, r1, lr
 8001198:	fb09 f804 	mul.w	r8, r9, r4
 800119c:	e7db      	b.n	8001156 <__udivmoddi4+0x282>
 800119e:	4673      	mov	r3, lr
 80011a0:	e77f      	b.n	80010a2 <__udivmoddi4+0x1ce>
 80011a2:	4650      	mov	r0, sl
 80011a4:	e766      	b.n	8001074 <__udivmoddi4+0x1a0>
 80011a6:	4608      	mov	r0, r1
 80011a8:	e6fd      	b.n	8000fa6 <__udivmoddi4+0xd2>
 80011aa:	443b      	add	r3, r7
 80011ac:	3a02      	subs	r2, #2
 80011ae:	e733      	b.n	8001018 <__udivmoddi4+0x144>
 80011b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80011b4:	443b      	add	r3, r7
 80011b6:	e71c      	b.n	8000ff2 <__udivmoddi4+0x11e>
 80011b8:	4649      	mov	r1, r9
 80011ba:	e79c      	b.n	80010f6 <__udivmoddi4+0x222>
 80011bc:	eba1 0109 	sub.w	r1, r1, r9
 80011c0:	46c4      	mov	ip, r8
 80011c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80011c6:	fb09 f804 	mul.w	r8, r9, r4
 80011ca:	e7c4      	b.n	8001156 <__udivmoddi4+0x282>

080011cc <__aeabi_idiv0>:
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop

080011d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011d4:	b0a6      	sub	sp, #152	@ 0x98
 80011d6:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d8:	f001 fde0 	bl	8002d9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011dc:	f000 f874 	bl	80012c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e0:	f000 f8e0 	bl	80013a4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  LCD_PortI2C_Init(); // Tu inicialización de I2C
 80011e4:	f001 fbf2 	bl	80029cc <LCD_PortI2C_Init>
  LCD_Begin(20, 4);
 80011e8:	2104      	movs	r1, #4
 80011ea:	2014      	movs	r0, #20
 80011ec:	f001 fb5c 	bl	80028a8 <LCD_Begin>
  MPU6050_PortI2C_Init();
 80011f0:	f001 fd4e 	bl	8002c90 <MPU6050_PortI2C_Init>
  MPU6050_Check();
 80011f4:	f001 fd11 	bl	8002c1a <MPU6050_Check>
  if (!uartInit())
 80011f8:	f000 fc02 	bl	8001a00 <uartInit>
 80011fc:	4603      	mov	r3, r0
 80011fe:	f083 0301 	eor.w	r3, r3, #1
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b00      	cmp	r3, #0
 8001206:	d008      	beq.n	800121a <main+0x4a>
  {
    // Si falla la inicialización, quedamos en bucle infinito con LED parpadeando
    while (1)
    {
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Suponiendo LED en PA5
 8001208:	2120      	movs	r1, #32
 800120a:	482c      	ldr	r0, [pc, #176]	@ (80012bc <main+0xec>)
 800120c:	f002 f8ef 	bl	80033ee <HAL_GPIO_TogglePin>
      HAL_Delay(250);
 8001210:	20fa      	movs	r0, #250	@ 0xfa
 8001212:	f001 fe35 	bl	8002e80 <HAL_Delay>
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Suponiendo LED en PA5
 8001216:	bf00      	nop
 8001218:	e7f6      	b.n	8001208 <main+0x38>
    }
  }
  BMP280_SPI_Init();         // Inicializa SPI2
 800121a:	f001 f8f5 	bl	8002408 <BMP280_SPI_Init>
  BMP280_SPI_CS_Init();      // Inicializa el pin CS (PA4)
 800121e:	f001 f929 	bl	8002474 <BMP280_SPI_CS_Init>
  BMP280_Init();
 8001222:	f000 fd2d 	bl	8001c80 <BMP280_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  float temp_BMP280 = BMP280_ReadTemperature();
 8001226:	f000 fd75 	bl	8001d14 <BMP280_ReadTemperature>
 800122a:	ed87 0a1f 	vstr	s0, [r7, #124]	@ 0x7c
	  float pressure = BMP280_ReadPressure();
 800122e:	f000 fdd9 	bl	8001de4 <BMP280_ReadPressure>
 8001232:	ed87 0a1e 	vstr	s0, [r7, #120]	@ 0x78
	  float altitude = BMP280_ReadAltitude(1011.2f); // presión estándar nivel del mar
 8001236:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 80012c0 <main+0xf0>
 800123a:	f001 f8bd 	bl	80023b8 <BMP280_ReadAltitude>
 800123e:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74

	  char msg[100];
	  snprintf(msg, sizeof(msg), "T=%.2f°C  P=%.2f hPa  ALT=%.2f m\r\n", temp_BMP280, pressure, altitude);
 8001242:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8001244:	f7ff f9a0 	bl	8000588 <__aeabi_f2d>
 8001248:	4604      	mov	r4, r0
 800124a:	460d      	mov	r5, r1
 800124c:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800124e:	f7ff f99b 	bl	8000588 <__aeabi_f2d>
 8001252:	4680      	mov	r8, r0
 8001254:	4689      	mov	r9, r1
 8001256:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001258:	f7ff f996 	bl	8000588 <__aeabi_f2d>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4638      	mov	r0, r7
 8001262:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001266:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800126a:	e9cd 4500 	strd	r4, r5, [sp]
 800126e:	4a15      	ldr	r2, [pc, #84]	@ (80012c4 <main+0xf4>)
 8001270:	2164      	movs	r1, #100	@ 0x64
 8001272:	f005 ff59 	bl	8007128 <sniprintf>
	  uartSendString((uint8_t*)msg);
 8001276:	463b      	mov	r3, r7
 8001278:	4618      	mov	r0, r3
 800127a:	f000 fbfd 	bl	8001a78 <uartSendString>
    /* USER CODE END WHILE */
	   int16_t temp = MPU6050_GetTemperatureInt();
 800127e:	f001 fcd2 	bl	8002c26 <MPU6050_GetTemperatureInt>
 8001282:	4603      	mov	r3, r0
 8001284:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
	   Vector3i16 gyro = MPU6050_GetGyroscopeInt();
 8001288:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800128c:	4618      	mov	r0, r3
 800128e:	f001 fcd1 	bl	8002c34 <MPU6050_GetGyroscopeInt>
	   Vector3i16 accel = MPU6050_GetAccelerometerInt();
 8001292:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001296:	4618      	mov	r0, r3
 8001298:	f001 fcd8 	bl	8002c4c <MPU6050_GetAccelerometerInt>
	   LCD_PrintSensorData(temp,gyro.x , accel.x );
 800129c:	f9b7 106c 	ldrsh.w	r1, [r7, #108]	@ 0x6c
 80012a0:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	@ 0x64
 80012a4:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	@ 0x72
 80012a8:	4618      	mov	r0, r3
 80012aa:	f001 fb13 	bl	80028d4 <LCD_PrintSensorData>
	   HAL_Delay(1000);  // Actualiza cada 1 segundo
 80012ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012b2:	f001 fde5 	bl	8002e80 <HAL_Delay>
  {
 80012b6:	bf00      	nop
 80012b8:	e7b5      	b.n	8001226 <main+0x56>
 80012ba:	bf00      	nop
 80012bc:	40020000 	.word	0x40020000
 80012c0:	447ccccd 	.word	0x447ccccd
 80012c4:	08009bc8 	.word	0x08009bc8

080012c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b094      	sub	sp, #80	@ 0x50
 80012cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	2234      	movs	r2, #52	@ 0x34
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f005 ffc1 	bl	800725e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012dc:	f107 0308 	add.w	r3, r7, #8
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ec:	2300      	movs	r3, #0
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	4b2a      	ldr	r3, [pc, #168]	@ (800139c <SystemClock_Config+0xd4>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f4:	4a29      	ldr	r2, [pc, #164]	@ (800139c <SystemClock_Config+0xd4>)
 80012f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80012fc:	4b27      	ldr	r3, [pc, #156]	@ (800139c <SystemClock_Config+0xd4>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001300:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001308:	2300      	movs	r3, #0
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	4b24      	ldr	r3, [pc, #144]	@ (80013a0 <SystemClock_Config+0xd8>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001314:	4a22      	ldr	r2, [pc, #136]	@ (80013a0 <SystemClock_Config+0xd8>)
 8001316:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	4b20      	ldr	r3, [pc, #128]	@ (80013a0 <SystemClock_Config+0xd8>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001324:	603b      	str	r3, [r7, #0]
 8001326:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001328:	2302      	movs	r3, #2
 800132a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800132c:	2301      	movs	r3, #1
 800132e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001330:	2310      	movs	r3, #16
 8001332:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001334:	2302      	movs	r3, #2
 8001336:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001338:	2300      	movs	r3, #0
 800133a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800133c:	2310      	movs	r3, #16
 800133e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001340:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001344:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001346:	2304      	movs	r3, #4
 8001348:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800134a:	2302      	movs	r3, #2
 800134c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800134e:	2302      	movs	r3, #2
 8001350:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	4618      	mov	r0, r3
 8001358:	f003 fd52 	bl	8004e00 <HAL_RCC_OscConfig>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001362:	f000 f88d 	bl	8001480 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001366:	230f      	movs	r3, #15
 8001368:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800136a:	2302      	movs	r3, #2
 800136c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001372:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001376:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001378:	2300      	movs	r3, #0
 800137a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800137c:	f107 0308 	add.w	r3, r7, #8
 8001380:	2102      	movs	r1, #2
 8001382:	4618      	mov	r0, r3
 8001384:	f003 f9f2 	bl	800476c <HAL_RCC_ClockConfig>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800138e:	f000 f877 	bl	8001480 <Error_Handler>
  }
}
 8001392:	bf00      	nop
 8001394:	3750      	adds	r7, #80	@ 0x50
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800
 80013a0:	40007000 	.word	0x40007000

080013a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	@ 0x28
 80013a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	4b2d      	ldr	r3, [pc, #180]	@ (8001474 <MX_GPIO_Init+0xd0>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	4a2c      	ldr	r2, [pc, #176]	@ (8001474 <MX_GPIO_Init+0xd0>)
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001474 <MX_GPIO_Init+0xd0>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	4b26      	ldr	r3, [pc, #152]	@ (8001474 <MX_GPIO_Init+0xd0>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	4a25      	ldr	r2, [pc, #148]	@ (8001474 <MX_GPIO_Init+0xd0>)
 80013e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e6:	4b23      	ldr	r3, [pc, #140]	@ (8001474 <MX_GPIO_Init+0xd0>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001474 <MX_GPIO_Init+0xd0>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001474 <MX_GPIO_Init+0xd0>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6313      	str	r3, [r2, #48]	@ 0x30
 8001402:	4b1c      	ldr	r3, [pc, #112]	@ (8001474 <MX_GPIO_Init+0xd0>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	4b18      	ldr	r3, [pc, #96]	@ (8001474 <MX_GPIO_Init+0xd0>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	4a17      	ldr	r2, [pc, #92]	@ (8001474 <MX_GPIO_Init+0xd0>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	6313      	str	r3, [r2, #48]	@ 0x30
 800141e:	4b15      	ldr	r3, [pc, #84]	@ (8001474 <MX_GPIO_Init+0xd0>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	2120      	movs	r1, #32
 800142e:	4812      	ldr	r0, [pc, #72]	@ (8001478 <MX_GPIO_Init+0xd4>)
 8001430:	f001 ffc4 	bl	80033bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001434:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800143a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800143e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	480c      	ldr	r0, [pc, #48]	@ (800147c <MX_GPIO_Init+0xd8>)
 800144c:	f001 fe22 	bl	8003094 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001450:	2320      	movs	r3, #32
 8001452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	4619      	mov	r1, r3
 8001466:	4804      	ldr	r0, [pc, #16]	@ (8001478 <MX_GPIO_Init+0xd4>)
 8001468:	f001 fe14 	bl	8003094 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800146c:	bf00      	nop
 800146e:	3728      	adds	r7, #40	@ 0x28
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40023800 	.word	0x40023800
 8001478:	40020000 	.word	0x40020000
 800147c:	40020800 	.word	0x40020800

08001480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001484:	b672      	cpsid	i
}
 8001486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <Error_Handler+0x8>

0800148c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	4b10      	ldr	r3, [pc, #64]	@ (80014d8 <HAL_MspInit+0x4c>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149a:	4a0f      	ldr	r2, [pc, #60]	@ (80014d8 <HAL_MspInit+0x4c>)
 800149c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014a2:	4b0d      	ldr	r3, [pc, #52]	@ (80014d8 <HAL_MspInit+0x4c>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	603b      	str	r3, [r7, #0]
 80014b2:	4b09      	ldr	r3, [pc, #36]	@ (80014d8 <HAL_MspInit+0x4c>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b6:	4a08      	ldr	r2, [pc, #32]	@ (80014d8 <HAL_MspInit+0x4c>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014be:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <HAL_MspInit+0x4c>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014ca:	2007      	movs	r0, #7
 80014cc:	f001 fdae 	bl	800302c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40023800 	.word	0x40023800

080014dc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08c      	sub	sp, #48	@ 0x30
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a42      	ldr	r2, [pc, #264]	@ (8001604 <HAL_I2C_MspInit+0x128>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d12c      	bne.n	8001558 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	61bb      	str	r3, [r7, #24]
 8001502:	4b41      	ldr	r3, [pc, #260]	@ (8001608 <HAL_I2C_MspInit+0x12c>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	4a40      	ldr	r2, [pc, #256]	@ (8001608 <HAL_I2C_MspInit+0x12c>)
 8001508:	f043 0302 	orr.w	r3, r3, #2
 800150c:	6313      	str	r3, [r2, #48]	@ 0x30
 800150e:	4b3e      	ldr	r3, [pc, #248]	@ (8001608 <HAL_I2C_MspInit+0x12c>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	61bb      	str	r3, [r7, #24]
 8001518:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800151a:	23c0      	movs	r3, #192	@ 0xc0
 800151c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800151e:	2312      	movs	r3, #18
 8001520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001526:	2303      	movs	r3, #3
 8001528:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800152a:	2304      	movs	r3, #4
 800152c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152e:	f107 031c 	add.w	r3, r7, #28
 8001532:	4619      	mov	r1, r3
 8001534:	4835      	ldr	r0, [pc, #212]	@ (800160c <HAL_I2C_MspInit+0x130>)
 8001536:	f001 fdad 	bl	8003094 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
 800153e:	4b32      	ldr	r3, [pc, #200]	@ (8001608 <HAL_I2C_MspInit+0x12c>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001542:	4a31      	ldr	r2, [pc, #196]	@ (8001608 <HAL_I2C_MspInit+0x12c>)
 8001544:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001548:	6413      	str	r3, [r2, #64]	@ 0x40
 800154a:	4b2f      	ldr	r3, [pc, #188]	@ (8001608 <HAL_I2C_MspInit+0x12c>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001556:	e050      	b.n	80015fa <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a2c      	ldr	r2, [pc, #176]	@ (8001610 <HAL_I2C_MspInit+0x134>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d14b      	bne.n	80015fa <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	4b28      	ldr	r3, [pc, #160]	@ (8001608 <HAL_I2C_MspInit+0x12c>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	4a27      	ldr	r2, [pc, #156]	@ (8001608 <HAL_I2C_MspInit+0x12c>)
 800156c:	f043 0304 	orr.w	r3, r3, #4
 8001570:	6313      	str	r3, [r2, #48]	@ 0x30
 8001572:	4b25      	ldr	r3, [pc, #148]	@ (8001608 <HAL_I2C_MspInit+0x12c>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	f003 0304 	and.w	r3, r3, #4
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b21      	ldr	r3, [pc, #132]	@ (8001608 <HAL_I2C_MspInit+0x12c>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	4a20      	ldr	r2, [pc, #128]	@ (8001608 <HAL_I2C_MspInit+0x12c>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6313      	str	r3, [r2, #48]	@ 0x30
 800158e:	4b1e      	ldr	r3, [pc, #120]	@ (8001608 <HAL_I2C_MspInit+0x12c>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800159a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800159e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a0:	2312      	movs	r3, #18
 80015a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a8:	2303      	movs	r3, #3
 80015aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015ac:	2304      	movs	r3, #4
 80015ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b0:	f107 031c 	add.w	r3, r7, #28
 80015b4:	4619      	mov	r1, r3
 80015b6:	4817      	ldr	r0, [pc, #92]	@ (8001614 <HAL_I2C_MspInit+0x138>)
 80015b8:	f001 fd6c 	bl	8003094 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c2:	2312      	movs	r3, #18
 80015c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015ce:	2304      	movs	r3, #4
 80015d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 031c 	add.w	r3, r7, #28
 80015d6:	4619      	mov	r1, r3
 80015d8:	480f      	ldr	r0, [pc, #60]	@ (8001618 <HAL_I2C_MspInit+0x13c>)
 80015da:	f001 fd5b 	bl	8003094 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <HAL_I2C_MspInit+0x12c>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e6:	4a08      	ldr	r2, [pc, #32]	@ (8001608 <HAL_I2C_MspInit+0x12c>)
 80015e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80015ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ee:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <HAL_I2C_MspInit+0x12c>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	68bb      	ldr	r3, [r7, #8]
}
 80015fa:	bf00      	nop
 80015fc:	3730      	adds	r7, #48	@ 0x30
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40005400 	.word	0x40005400
 8001608:	40023800 	.word	0x40023800
 800160c:	40020400 	.word	0x40020400
 8001610:	40005c00 	.word	0x40005c00
 8001614:	40020800 	.word	0x40020800
 8001618:	40020000 	.word	0x40020000

0800161c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	@ 0x28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a30      	ldr	r2, [pc, #192]	@ (80016fc <HAL_SPI_MspInit+0xe0>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d15a      	bne.n	80016f4 <HAL_SPI_MspInit+0xd8>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	4b2f      	ldr	r3, [pc, #188]	@ (8001700 <HAL_SPI_MspInit+0xe4>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001646:	4a2e      	ldr	r2, [pc, #184]	@ (8001700 <HAL_SPI_MspInit+0xe4>)
 8001648:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800164c:	6413      	str	r3, [r2, #64]	@ 0x40
 800164e:	4b2c      	ldr	r3, [pc, #176]	@ (8001700 <HAL_SPI_MspInit+0xe4>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001652:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	4b28      	ldr	r3, [pc, #160]	@ (8001700 <HAL_SPI_MspInit+0xe4>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	4a27      	ldr	r2, [pc, #156]	@ (8001700 <HAL_SPI_MspInit+0xe4>)
 8001664:	f043 0304 	orr.w	r3, r3, #4
 8001668:	6313      	str	r3, [r2, #48]	@ 0x30
 800166a:	4b25      	ldr	r3, [pc, #148]	@ (8001700 <HAL_SPI_MspInit+0xe4>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	f003 0304 	and.w	r3, r3, #4
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	4b21      	ldr	r3, [pc, #132]	@ (8001700 <HAL_SPI_MspInit+0xe4>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	4a20      	ldr	r2, [pc, #128]	@ (8001700 <HAL_SPI_MspInit+0xe4>)
 8001680:	f043 0302 	orr.w	r3, r3, #2
 8001684:	6313      	str	r3, [r2, #48]	@ 0x30
 8001686:	4b1e      	ldr	r3, [pc, #120]	@ (8001700 <HAL_SPI_MspInit+0xe4>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001692:	2302      	movs	r3, #2
 8001694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169e:	2303      	movs	r3, #3
 80016a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80016a2:	2307      	movs	r3, #7
 80016a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4619      	mov	r1, r3
 80016ac:	4815      	ldr	r0, [pc, #84]	@ (8001704 <HAL_SPI_MspInit+0xe8>)
 80016ae:	f001 fcf1 	bl	8003094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016b2:	2304      	movs	r3, #4
 80016b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016be:	2303      	movs	r3, #3
 80016c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016c2:	2305      	movs	r3, #5
 80016c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	4619      	mov	r1, r3
 80016cc:	480d      	ldr	r0, [pc, #52]	@ (8001704 <HAL_SPI_MspInit+0xe8>)
 80016ce:	f001 fce1 	bl	8003094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e0:	2303      	movs	r3, #3
 80016e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016e4:	2305      	movs	r3, #5
 80016e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	4806      	ldr	r0, [pc, #24]	@ (8001708 <HAL_SPI_MspInit+0xec>)
 80016f0:	f001 fcd0 	bl	8003094 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80016f4:	bf00      	nop
 80016f6:	3728      	adds	r7, #40	@ 0x28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40003800 	.word	0x40003800
 8001700:	40023800 	.word	0x40023800
 8001704:	40020800 	.word	0x40020800
 8001708:	40020400 	.word	0x40020400

0800170c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	@ 0x28
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a19      	ldr	r2, [pc, #100]	@ (8001790 <HAL_UART_MspInit+0x84>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d12b      	bne.n	8001786 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	4b18      	ldr	r3, [pc, #96]	@ (8001794 <HAL_UART_MspInit+0x88>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001736:	4a17      	ldr	r2, [pc, #92]	@ (8001794 <HAL_UART_MspInit+0x88>)
 8001738:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800173c:	6413      	str	r3, [r2, #64]	@ 0x40
 800173e:	4b15      	ldr	r3, [pc, #84]	@ (8001794 <HAL_UART_MspInit+0x88>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <HAL_UART_MspInit+0x88>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	4a10      	ldr	r2, [pc, #64]	@ (8001794 <HAL_UART_MspInit+0x88>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6313      	str	r3, [r2, #48]	@ 0x30
 800175a:	4b0e      	ldr	r3, [pc, #56]	@ (8001794 <HAL_UART_MspInit+0x88>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001766:	230c      	movs	r3, #12
 8001768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001772:	2303      	movs	r3, #3
 8001774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001776:	2307      	movs	r3, #7
 8001778:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4619      	mov	r1, r3
 8001780:	4805      	ldr	r0, [pc, #20]	@ (8001798 <HAL_UART_MspInit+0x8c>)
 8001782:	f001 fc87 	bl	8003094 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001786:	bf00      	nop
 8001788:	3728      	adds	r7, #40	@ 0x28
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40004400 	.word	0x40004400
 8001794:	40023800 	.word	0x40023800
 8001798:	40020000 	.word	0x40020000

0800179c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <NMI_Handler+0x4>

080017a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <HardFault_Handler+0x4>

080017ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <MemManage_Handler+0x4>

080017b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <BusFault_Handler+0x4>

080017bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <UsageFault_Handler+0x4>

080017c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f2:	f001 fb25 	bl	8002e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}

080017fa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  return 1;
 80017fe:	2301      	movs	r3, #1
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <_kill>:

int _kill(int pid, int sig)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
 8001812:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001814:	f005 fd88 	bl	8007328 <__errno>
 8001818:	4603      	mov	r3, r0
 800181a:	2216      	movs	r2, #22
 800181c:	601a      	str	r2, [r3, #0]
  return -1;
 800181e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <_exit>:

void _exit (int status)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001832:	f04f 31ff 	mov.w	r1, #4294967295
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff ffe7 	bl	800180a <_kill>
  while (1) {}    /* Make sure we hang here */
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <_exit+0x12>

08001840 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	e00a      	b.n	8001868 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001852:	f3af 8000 	nop.w
 8001856:	4601      	mov	r1, r0
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	1c5a      	adds	r2, r3, #1
 800185c:	60ba      	str	r2, [r7, #8]
 800185e:	b2ca      	uxtb	r2, r1
 8001860:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	3301      	adds	r3, #1
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	429a      	cmp	r2, r3
 800186e:	dbf0      	blt.n	8001852 <_read+0x12>
  }

  return len;
 8001870:	687b      	ldr	r3, [r7, #4]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	e009      	b.n	80018a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	60ba      	str	r2, [r7, #8]
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3301      	adds	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	dbf1      	blt.n	800188c <_write+0x12>
  }
  return len;
 80018a8:	687b      	ldr	r3, [r7, #4]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <_close>:

int _close(int file)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018da:	605a      	str	r2, [r3, #4]
  return 0;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <_isatty>:

int _isatty(int file)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018f2:	2301      	movs	r3, #1
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
	...

0800191c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001924:	4a14      	ldr	r2, [pc, #80]	@ (8001978 <_sbrk+0x5c>)
 8001926:	4b15      	ldr	r3, [pc, #84]	@ (800197c <_sbrk+0x60>)
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001930:	4b13      	ldr	r3, [pc, #76]	@ (8001980 <_sbrk+0x64>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d102      	bne.n	800193e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001938:	4b11      	ldr	r3, [pc, #68]	@ (8001980 <_sbrk+0x64>)
 800193a:	4a12      	ldr	r2, [pc, #72]	@ (8001984 <_sbrk+0x68>)
 800193c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800193e:	4b10      	ldr	r3, [pc, #64]	@ (8001980 <_sbrk+0x64>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	429a      	cmp	r2, r3
 800194a:	d207      	bcs.n	800195c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800194c:	f005 fcec 	bl	8007328 <__errno>
 8001950:	4603      	mov	r3, r0
 8001952:	220c      	movs	r2, #12
 8001954:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
 800195a:	e009      	b.n	8001970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800195c:	4b08      	ldr	r3, [pc, #32]	@ (8001980 <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001962:	4b07      	ldr	r3, [pc, #28]	@ (8001980 <_sbrk+0x64>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	4a05      	ldr	r2, [pc, #20]	@ (8001980 <_sbrk+0x64>)
 800196c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800196e:	68fb      	ldr	r3, [r7, #12]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20020000 	.word	0x20020000
 800197c:	00000400 	.word	0x00000400
 8001980:	200001f0 	.word	0x200001f0
 8001984:	200004c0 	.word	0x200004c0

08001988 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800198c:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <SystemInit+0x20>)
 800198e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001992:	4a05      	ldr	r2, [pc, #20]	@ (80019a8 <SystemInit+0x20>)
 8001994:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001998:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019b0:	f7ff ffea 	bl	8001988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019b4:	480c      	ldr	r0, [pc, #48]	@ (80019e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019b6:	490d      	ldr	r1, [pc, #52]	@ (80019ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019b8:	4a0d      	ldr	r2, [pc, #52]	@ (80019f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019bc:	e002      	b.n	80019c4 <LoopCopyDataInit>

080019be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c2:	3304      	adds	r3, #4

080019c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c8:	d3f9      	bcc.n	80019be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ca:	4a0a      	ldr	r2, [pc, #40]	@ (80019f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019cc:	4c0a      	ldr	r4, [pc, #40]	@ (80019f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d0:	e001      	b.n	80019d6 <LoopFillZerobss>

080019d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d4:	3204      	adds	r2, #4

080019d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d8:	d3fb      	bcc.n	80019d2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80019da:	f005 fcab 	bl	8007334 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019de:	f7ff fbf7 	bl	80011d0 <main>
  bx  lr    
 80019e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019ec:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80019f0:	0800a0c4 	.word	0x0800a0c4
  ldr r2, =_sbss
 80019f4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80019f8:	200004bc 	.word	0x200004bc

080019fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019fc:	e7fe      	b.n	80019fc <ADC_IRQHandler>
	...

08001a00 <uartInit>:
static bool_t checkPointer(const uint8_t *ptr);
static bool_t checkSize(uint16_t size);


bool_t uartInit(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
	  huart2.Instance = USART2;
 8001a06:	4b19      	ldr	r3, [pc, #100]	@ (8001a6c <uartInit+0x6c>)
 8001a08:	4a19      	ldr	r2, [pc, #100]	@ (8001a70 <uartInit+0x70>)
 8001a0a:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 8001a0c:	4b17      	ldr	r3, [pc, #92]	@ (8001a6c <uartInit+0x6c>)
 8001a0e:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a12:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a14:	4b15      	ldr	r3, [pc, #84]	@ (8001a6c <uartInit+0x6c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a1a:	4b14      	ldr	r3, [pc, #80]	@ (8001a6c <uartInit+0x6c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8001a20:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <uartInit+0x6c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a26:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <uartInit+0x6c>)
 8001a28:	220c      	movs	r2, #12
 8001a2a:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a6c <uartInit+0x6c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a32:	4b0e      	ldr	r3, [pc, #56]	@ (8001a6c <uartInit+0x6c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	61da      	str	r2, [r3, #28]

	  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a38:	480c      	ldr	r0, [pc, #48]	@ (8001a6c <uartInit+0x6c>)
 8001a3a:	f004 fa51 	bl	8005ee0 <HAL_UART_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <uartInit+0x48>
	  {
		  return false;
 8001a44:	2300      	movs	r3, #0
 8001a46:	e00d      	b.n	8001a64 <uartInit+0x64>
	  }

	  else
	  {
		  const char *msg = "Uart inicializada a 115200, 8N1\r\n";
 8001a48:	4b0a      	ldr	r3, [pc, #40]	@ (8001a74 <uartInit+0x74>)
 8001a4a:	607b      	str	r3, [r7, #4]

		  HAL_UART_Transmit(&huart2, (uint8_t *) msg , strlen(msg), HAL_MAX_DELAY);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7fe fc2f 	bl	80002b0 <strlen>
 8001a52:	4603      	mov	r3, r0
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	4803      	ldr	r0, [pc, #12]	@ (8001a6c <uartInit+0x6c>)
 8001a5e:	f004 fa8f 	bl	8005f80 <HAL_UART_Transmit>

		  return true;
 8001a62:	2301      	movs	r3, #1
	  }

	  return false;

}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	200001f4 	.word	0x200001f4
 8001a70:	40004400 	.word	0x40004400
 8001a74:	08009bec 	.word	0x08009bec

08001a78 <uartSendString>:

void uartSendString(uint8_t * pstring)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
    if (!checkPointer(pstring)) return;
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 f825 	bl	8001ad0 <checkPointer>
 8001a86:	4603      	mov	r3, r0
 8001a88:	f083 0301 	eor.w	r3, r3, #1
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d115      	bne.n	8001abe <uartSendString+0x46>

    uint16_t length = strlen((char*)pstring);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7fe fc0c 	bl	80002b0 <strlen>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	81fb      	strh	r3, [r7, #14]

    if (!checkSize(length)) return;
 8001a9c:	89fb      	ldrh	r3, [r7, #14]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 f826 	bl	8001af0 <checkSize>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	f083 0301 	eor.w	r3, r3, #1
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d108      	bne.n	8001ac2 <uartSendString+0x4a>

    HAL_UART_Transmit(&huart2, pstring, length, UART_TIMEOUT);
 8001ab0:	89fa      	ldrh	r2, [r7, #14]
 8001ab2:	2364      	movs	r3, #100	@ 0x64
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	4805      	ldr	r0, [pc, #20]	@ (8001acc <uartSendString+0x54>)
 8001ab8:	f004 fa62 	bl	8005f80 <HAL_UART_Transmit>
 8001abc:	e002      	b.n	8001ac4 <uartSendString+0x4c>
    if (!checkPointer(pstring)) return;
 8001abe:	bf00      	nop
 8001ac0:	e000      	b.n	8001ac4 <uartSendString+0x4c>
    if (!checkSize(length)) return;
 8001ac2:	bf00      	nop
}
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200001f4 	.word	0x200001f4

08001ad0 <checkPointer>:
}



static bool_t checkPointer(const uint8_t *ptr)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	return (ptr != NULL);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	bf14      	ite	ne
 8001ade:	2301      	movne	r3, #1
 8001ae0:	2300      	moveq	r3, #0
 8001ae2:	b2db      	uxtb	r3, r3
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <checkSize>:

static bool_t checkSize(uint16_t size)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	80fb      	strh	r3, [r7, #6]
	return (size > 0 && size <= UART_MAX_SIZE);
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <checkSize+0x1c>
 8001b00:	88fb      	ldrh	r3, [r7, #6]
 8001b02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b06:	d801      	bhi.n	8001b0c <checkSize+0x1c>
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e000      	b.n	8001b0e <checkSize+0x1e>
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	b2db      	uxtb	r3, r3
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <BMP280_ReadCalibrationData>:

static uint8_t BMP280_ReadRegister(uint8_t reg);
static void BMP280_WriteRegister(uint8_t reg, uint8_t value);
static void BMP280_ReadCalibrationData(void);

static void BMP280_ReadCalibrationData(void) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af00      	add	r7, sp, #0
    uint8_t calib_data[24];
    uint8_t reg = BMP280_REG_CALIB_START;
 8001b26:	2388      	movs	r3, #136	@ 0x88
 8001b28:	71fb      	strb	r3, [r7, #7]
    BMP280_SPI_CS_Select();
 8001b2a:	f000 fd01 	bl	8002530 <BMP280_SPI_CS_Select>
    reg |= 0x80; // lectura
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	71fb      	strb	r3, [r7, #7]
    BMP280_PortSPI_WriteRegister(&reg, 1);
 8001b38:	1dfb      	adds	r3, r7, #7
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f000 fcbb 	bl	80024b8 <BMP280_PortSPI_WriteRegister>
    BMP280_PortSPI_ReadRegister(calib_data, 24);
 8001b42:	f107 0308 	add.w	r3, r7, #8
 8001b46:	2118      	movs	r1, #24
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 fcd3 	bl	80024f4 <BMP280_PortSPI_ReadRegister>
    BMP280_SPI_CS_Deselect();
 8001b4e:	f000 fcfb 	bl	8002548 <BMP280_SPI_CS_Deselect>

    dig_T1 = (uint16_t)(calib_data[1] << 8 | calib_data[0]);
 8001b52:	7a7b      	ldrb	r3, [r7, #9]
 8001b54:	b21b      	sxth	r3, r3
 8001b56:	021b      	lsls	r3, r3, #8
 8001b58:	b21a      	sxth	r2, r3
 8001b5a:	7a3b      	ldrb	r3, [r7, #8]
 8001b5c:	b21b      	sxth	r3, r3
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	b21b      	sxth	r3, r3
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	4b3a      	ldr	r3, [pc, #232]	@ (8001c50 <BMP280_ReadCalibrationData+0x130>)
 8001b66:	801a      	strh	r2, [r3, #0]
    dig_T2 = (int16_t)(calib_data[3] << 8 | calib_data[2]);
 8001b68:	7afb      	ldrb	r3, [r7, #11]
 8001b6a:	b21b      	sxth	r3, r3
 8001b6c:	021b      	lsls	r3, r3, #8
 8001b6e:	b21a      	sxth	r2, r3
 8001b70:	7abb      	ldrb	r3, [r7, #10]
 8001b72:	b21b      	sxth	r3, r3
 8001b74:	4313      	orrs	r3, r2
 8001b76:	b21a      	sxth	r2, r3
 8001b78:	4b36      	ldr	r3, [pc, #216]	@ (8001c54 <BMP280_ReadCalibrationData+0x134>)
 8001b7a:	801a      	strh	r2, [r3, #0]
    dig_T3 = (int16_t)(calib_data[5] << 8 | calib_data[4]);
 8001b7c:	7b7b      	ldrb	r3, [r7, #13]
 8001b7e:	b21b      	sxth	r3, r3
 8001b80:	021b      	lsls	r3, r3, #8
 8001b82:	b21a      	sxth	r2, r3
 8001b84:	7b3b      	ldrb	r3, [r7, #12]
 8001b86:	b21b      	sxth	r3, r3
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	b21a      	sxth	r2, r3
 8001b8c:	4b32      	ldr	r3, [pc, #200]	@ (8001c58 <BMP280_ReadCalibrationData+0x138>)
 8001b8e:	801a      	strh	r2, [r3, #0]

    dig_P1 = (uint16_t)(calib_data[7] << 8 | calib_data[6]);
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	b21b      	sxth	r3, r3
 8001b94:	021b      	lsls	r3, r3, #8
 8001b96:	b21a      	sxth	r2, r3
 8001b98:	7bbb      	ldrb	r3, [r7, #14]
 8001b9a:	b21b      	sxth	r3, r3
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	b21b      	sxth	r3, r3
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	4b2e      	ldr	r3, [pc, #184]	@ (8001c5c <BMP280_ReadCalibrationData+0x13c>)
 8001ba4:	801a      	strh	r2, [r3, #0]
    dig_P2 = (int16_t)(calib_data[9] << 8 | calib_data[8]);
 8001ba6:	7c7b      	ldrb	r3, [r7, #17]
 8001ba8:	b21b      	sxth	r3, r3
 8001baa:	021b      	lsls	r3, r3, #8
 8001bac:	b21a      	sxth	r2, r3
 8001bae:	7c3b      	ldrb	r3, [r7, #16]
 8001bb0:	b21b      	sxth	r3, r3
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	b21a      	sxth	r2, r3
 8001bb6:	4b2a      	ldr	r3, [pc, #168]	@ (8001c60 <BMP280_ReadCalibrationData+0x140>)
 8001bb8:	801a      	strh	r2, [r3, #0]
    dig_P3 = (int16_t)(calib_data[11] << 8 | calib_data[10]);
 8001bba:	7cfb      	ldrb	r3, [r7, #19]
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	021b      	lsls	r3, r3, #8
 8001bc0:	b21a      	sxth	r2, r3
 8001bc2:	7cbb      	ldrb	r3, [r7, #18]
 8001bc4:	b21b      	sxth	r3, r3
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	b21a      	sxth	r2, r3
 8001bca:	4b26      	ldr	r3, [pc, #152]	@ (8001c64 <BMP280_ReadCalibrationData+0x144>)
 8001bcc:	801a      	strh	r2, [r3, #0]
    dig_P4 = (int16_t)(calib_data[13] << 8 | calib_data[12]);
 8001bce:	7d7b      	ldrb	r3, [r7, #21]
 8001bd0:	b21b      	sxth	r3, r3
 8001bd2:	021b      	lsls	r3, r3, #8
 8001bd4:	b21a      	sxth	r2, r3
 8001bd6:	7d3b      	ldrb	r3, [r7, #20]
 8001bd8:	b21b      	sxth	r3, r3
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	b21a      	sxth	r2, r3
 8001bde:	4b22      	ldr	r3, [pc, #136]	@ (8001c68 <BMP280_ReadCalibrationData+0x148>)
 8001be0:	801a      	strh	r2, [r3, #0]
    dig_P5 = (int16_t)(calib_data[15] << 8 | calib_data[14]);
 8001be2:	7dfb      	ldrb	r3, [r7, #23]
 8001be4:	b21b      	sxth	r3, r3
 8001be6:	021b      	lsls	r3, r3, #8
 8001be8:	b21a      	sxth	r2, r3
 8001bea:	7dbb      	ldrb	r3, [r7, #22]
 8001bec:	b21b      	sxth	r3, r3
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	b21a      	sxth	r2, r3
 8001bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c6c <BMP280_ReadCalibrationData+0x14c>)
 8001bf4:	801a      	strh	r2, [r3, #0]
    dig_P6 = (int16_t)(calib_data[17] << 8 | calib_data[16]);
 8001bf6:	7e7b      	ldrb	r3, [r7, #25]
 8001bf8:	b21b      	sxth	r3, r3
 8001bfa:	021b      	lsls	r3, r3, #8
 8001bfc:	b21a      	sxth	r2, r3
 8001bfe:	7e3b      	ldrb	r3, [r7, #24]
 8001c00:	b21b      	sxth	r3, r3
 8001c02:	4313      	orrs	r3, r2
 8001c04:	b21a      	sxth	r2, r3
 8001c06:	4b1a      	ldr	r3, [pc, #104]	@ (8001c70 <BMP280_ReadCalibrationData+0x150>)
 8001c08:	801a      	strh	r2, [r3, #0]
    dig_P7 = (int16_t)(calib_data[19] << 8 | calib_data[18]);
 8001c0a:	7efb      	ldrb	r3, [r7, #27]
 8001c0c:	b21b      	sxth	r3, r3
 8001c0e:	021b      	lsls	r3, r3, #8
 8001c10:	b21a      	sxth	r2, r3
 8001c12:	7ebb      	ldrb	r3, [r7, #26]
 8001c14:	b21b      	sxth	r3, r3
 8001c16:	4313      	orrs	r3, r2
 8001c18:	b21a      	sxth	r2, r3
 8001c1a:	4b16      	ldr	r3, [pc, #88]	@ (8001c74 <BMP280_ReadCalibrationData+0x154>)
 8001c1c:	801a      	strh	r2, [r3, #0]
    dig_P8 = (int16_t)(calib_data[21] << 8 | calib_data[20]);
 8001c1e:	7f7b      	ldrb	r3, [r7, #29]
 8001c20:	b21b      	sxth	r3, r3
 8001c22:	021b      	lsls	r3, r3, #8
 8001c24:	b21a      	sxth	r2, r3
 8001c26:	7f3b      	ldrb	r3, [r7, #28]
 8001c28:	b21b      	sxth	r3, r3
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	b21a      	sxth	r2, r3
 8001c2e:	4b12      	ldr	r3, [pc, #72]	@ (8001c78 <BMP280_ReadCalibrationData+0x158>)
 8001c30:	801a      	strh	r2, [r3, #0]
    dig_P9 = (int16_t)(calib_data[23] << 8 | calib_data[22]);
 8001c32:	7ffb      	ldrb	r3, [r7, #31]
 8001c34:	b21b      	sxth	r3, r3
 8001c36:	021b      	lsls	r3, r3, #8
 8001c38:	b21a      	sxth	r2, r3
 8001c3a:	7fbb      	ldrb	r3, [r7, #30]
 8001c3c:	b21b      	sxth	r3, r3
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	b21a      	sxth	r2, r3
 8001c42:	4b0e      	ldr	r3, [pc, #56]	@ (8001c7c <BMP280_ReadCalibrationData+0x15c>)
 8001c44:	801a      	strh	r2, [r3, #0]
}
 8001c46:	bf00      	nop
 8001c48:	3720      	adds	r7, #32
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	2000023c 	.word	0x2000023c
 8001c54:	20000240 	.word	0x20000240
 8001c58:	20000242 	.word	0x20000242
 8001c5c:	2000023e 	.word	0x2000023e
 8001c60:	20000244 	.word	0x20000244
 8001c64:	20000246 	.word	0x20000246
 8001c68:	20000248 	.word	0x20000248
 8001c6c:	2000024a 	.word	0x2000024a
 8001c70:	2000024c 	.word	0x2000024c
 8001c74:	2000024e 	.word	0x2000024e
 8001c78:	20000250 	.word	0x20000250
 8001c7c:	20000252 	.word	0x20000252

08001c80 <BMP280_Init>:

void BMP280_Write8(uint8_t reg, uint8_t value) {
    BMP280_WriteRegister(reg, value);
}

void BMP280_Init(void) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
    HAL_Delay(100);
 8001c86:	2064      	movs	r0, #100	@ 0x64
 8001c88:	f001 f8fa 	bl	8002e80 <HAL_Delay>
    uint8_t id = 0xD0;
 8001c8c:	23d0      	movs	r3, #208	@ 0xd0
 8001c8e:	73fb      	strb	r3, [r7, #15]
    BMP280_SPI_CS_Select();
 8001c90:	f000 fc4e 	bl	8002530 <BMP280_SPI_CS_Select>
    id |= 0x80;
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	73fb      	strb	r3, [r7, #15]
    BMP280_PortSPI_WriteRegister(&id, 1);
 8001c9e:	f107 030f 	add.w	r3, r7, #15
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f000 fc07 	bl	80024b8 <BMP280_PortSPI_WriteRegister>
    BMP280_PortSPI_ReadRegister(&id, 1);
 8001caa:	f107 030f 	add.w	r3, r7, #15
 8001cae:	2101      	movs	r1, #1
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 fc1f 	bl	80024f4 <BMP280_PortSPI_ReadRegister>
    BMP280_SPI_CS_Deselect();
 8001cb6:	f000 fc47 	bl	8002548 <BMP280_SPI_CS_Deselect>

    if (id != BMP280_CHIP_ID) {
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
 8001cbc:	2b58      	cmp	r3, #88	@ 0x58
 8001cbe:	d004      	beq.n	8001cca <BMP280_Init+0x4a>
        uartSendString((uint8_t*)"BMP280 NOT FOUND\r\n");
 8001cc0:	4813      	ldr	r0, [pc, #76]	@ (8001d10 <BMP280_Init+0x90>)
 8001cc2:	f7ff fed9 	bl	8001a78 <uartSendString>
        Error_Handler();
 8001cc6:	f7ff fbdb 	bl	8001480 <Error_Handler>
    }

    uint8_t reset_cmd[2] = {BMP280_REG_RESET, BMP280_RESET_VALUE};
 8001cca:	f24b 63e0 	movw	r3, #46816	@ 0xb6e0
 8001cce:	81bb      	strh	r3, [r7, #12]
    BMP280_PortSPI_WriteRegister(reset_cmd, 2);
 8001cd0:	f107 030c 	add.w	r3, r7, #12
 8001cd4:	2102      	movs	r1, #2
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 fbee 	bl	80024b8 <BMP280_PortSPI_WriteRegister>
    HAL_Delay(100);
 8001cdc:	2064      	movs	r0, #100	@ 0x64
 8001cde:	f001 f8cf 	bl	8002e80 <HAL_Delay>

    BMP280_ReadCalibrationData();
 8001ce2:	f7ff ff1d 	bl	8001b20 <BMP280_ReadCalibrationData>

    uint8_t config[2] = {BMP280_REG_CONFIG, 0xA0};
 8001ce6:	f24a 03f5 	movw	r3, #41205	@ 0xa0f5
 8001cea:	813b      	strh	r3, [r7, #8]
    BMP280_PortSPI_WriteRegister(config, 2);
 8001cec:	f107 0308 	add.w	r3, r7, #8
 8001cf0:	2102      	movs	r1, #2
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 fbe0 	bl	80024b8 <BMP280_PortSPI_WriteRegister>
    uint8_t ctrl_meas[2] = {BMP280_REG_CTRL_MEAS, 0x27};
 8001cf8:	f242 73f4 	movw	r3, #10228	@ 0x27f4
 8001cfc:	80bb      	strh	r3, [r7, #4]
    BMP280_PortSPI_WriteRegister(ctrl_meas, 2);
 8001cfe:	1d3b      	adds	r3, r7, #4
 8001d00:	2102      	movs	r1, #2
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 fbd8 	bl	80024b8 <BMP280_PortSPI_WriteRegister>
}
 8001d08:	bf00      	nop
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	08009c10 	.word	0x08009c10

08001d14 <BMP280_ReadTemperature>:

float BMP280_ReadTemperature(void) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
    uint8_t raw_data[3];
    uint8_t reg = BMP280_REG_TEMP_MSB | 0x80;
 8001d1a:	23fa      	movs	r3, #250	@ 0xfa
 8001d1c:	70fb      	strb	r3, [r7, #3]
    BMP280_SPI_CS_Select();
 8001d1e:	f000 fc07 	bl	8002530 <BMP280_SPI_CS_Select>
    BMP280_PortSPI_WriteRegister(&reg, 1);
 8001d22:	1cfb      	adds	r3, r7, #3
 8001d24:	2101      	movs	r1, #1
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 fbc6 	bl	80024b8 <BMP280_PortSPI_WriteRegister>
    BMP280_PortSPI_ReadRegister(raw_data, 3);
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	2103      	movs	r1, #3
 8001d30:	4618      	mov	r0, r3
 8001d32:	f000 fbdf 	bl	80024f4 <BMP280_PortSPI_ReadRegister>
    BMP280_SPI_CS_Deselect();
 8001d36:	f000 fc07 	bl	8002548 <BMP280_SPI_CS_Deselect>

    int32_t adc_T = (int32_t)(((uint32_t)raw_data[0] << 12) | ((uint32_t)raw_data[1] << 4) | (raw_data[2] >> 4));
 8001d3a:	793b      	ldrb	r3, [r7, #4]
 8001d3c:	031a      	lsls	r2, r3, #12
 8001d3e:	797b      	ldrb	r3, [r7, #5]
 8001d40:	011b      	lsls	r3, r3, #4
 8001d42:	4313      	orrs	r3, r2
 8001d44:	79ba      	ldrb	r2, [r7, #6]
 8001d46:	0912      	lsrs	r2, r2, #4
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	617b      	str	r3, [r7, #20]

    int32_t var1 = ((((adc_T >> 3) - ((int32_t)dig_T1 << 1))) * ((int32_t)dig_T2)) >> 11;
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	10da      	asrs	r2, r3, #3
 8001d52:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd0 <BMP280_ReadTemperature+0xbc>)
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	4a1e      	ldr	r2, [pc, #120]	@ (8001dd4 <BMP280_ReadTemperature+0xc0>)
 8001d5c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001d60:	fb02 f303 	mul.w	r3, r2, r3
 8001d64:	12db      	asrs	r3, r3, #11
 8001d66:	613b      	str	r3, [r7, #16]
    int32_t var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) * ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) *
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	111b      	asrs	r3, r3, #4
 8001d6c:	4a18      	ldr	r2, [pc, #96]	@ (8001dd0 <BMP280_ReadTemperature+0xbc>)
 8001d6e:	8812      	ldrh	r2, [r2, #0]
 8001d70:	1a9b      	subs	r3, r3, r2
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	1112      	asrs	r2, r2, #4
 8001d76:	4916      	ldr	r1, [pc, #88]	@ (8001dd0 <BMP280_ReadTemperature+0xbc>)
 8001d78:	8809      	ldrh	r1, [r1, #0]
 8001d7a:	1a52      	subs	r2, r2, r1
 8001d7c:	fb02 f303 	mul.w	r3, r2, r3
 8001d80:	131b      	asrs	r3, r3, #12
                   ((int32_t)dig_T3)) >> 14;
 8001d82:	4a15      	ldr	r2, [pc, #84]	@ (8001dd8 <BMP280_ReadTemperature+0xc4>)
 8001d84:	f9b2 2000 	ldrsh.w	r2, [r2]
    int32_t var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) * ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) *
 8001d88:	fb02 f303 	mul.w	r3, r2, r3
 8001d8c:	139b      	asrs	r3, r3, #14
 8001d8e:	60fb      	str	r3, [r7, #12]

    t_fine = var1 + var2;
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	4413      	add	r3, r2
 8001d96:	4a11      	ldr	r2, [pc, #68]	@ (8001ddc <BMP280_ReadTemperature+0xc8>)
 8001d98:	6013      	str	r3, [r2, #0]
    float T = (t_fine * 5 + 128) >> 8;
 8001d9a:	4b10      	ldr	r3, [pc, #64]	@ (8001ddc <BMP280_ReadTemperature+0xc8>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	3380      	adds	r3, #128	@ 0x80
 8001da6:	121b      	asrs	r3, r3, #8
 8001da8:	ee07 3a90 	vmov	s15, r3
 8001dac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001db0:	edc7 7a02 	vstr	s15, [r7, #8]
    return T / 100.0f;
 8001db4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001db8:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001de0 <BMP280_ReadTemperature+0xcc>
 8001dbc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001dc0:	eef0 7a66 	vmov.f32	s15, s13
}
 8001dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	2000023c 	.word	0x2000023c
 8001dd4:	20000240 	.word	0x20000240
 8001dd8:	20000242 	.word	0x20000242
 8001ddc:	20000254 	.word	0x20000254
 8001de0:	42c80000 	.word	0x42c80000

08001de4 <BMP280_ReadPressure>:

float BMP280_ReadPressure(void) {
 8001de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001de8:	b0cc      	sub	sp, #304	@ 0x130
 8001dea:	af00      	add	r7, sp, #0
    uint8_t raw_data[3];
    uint8_t reg = BMP280_REG_PRESS_MSB | 0x80;
 8001dec:	23f7      	movs	r3, #247	@ 0xf7
 8001dee:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    BMP280_SPI_CS_Select();
 8001df2:	f000 fb9d 	bl	8002530 <BMP280_SPI_CS_Select>
    BMP280_PortSPI_WriteRegister(&reg, 1);
 8001df6:	f207 130b 	addw	r3, r7, #267	@ 0x10b
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f000 fb5b 	bl	80024b8 <BMP280_PortSPI_WriteRegister>
    BMP280_PortSPI_ReadRegister(raw_data, 3);
 8001e02:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001e06:	2103      	movs	r1, #3
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f000 fb73 	bl	80024f4 <BMP280_PortSPI_ReadRegister>
    BMP280_SPI_CS_Deselect();
 8001e0e:	f000 fb9b 	bl	8002548 <BMP280_SPI_CS_Deselect>

    int32_t adc_P = (int32_t)(((uint32_t)raw_data[0] << 12) | ((uint32_t)raw_data[1] << 4) | (raw_data[2] >> 4));
 8001e12:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8001e16:	031a      	lsls	r2, r3, #12
 8001e18:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8001e1c:	011b      	lsls	r3, r3, #4
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8001e24:	091b      	lsrs	r3, r3, #4
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

    int64_t var1 = ((int64_t)t_fine) - 128000;
 8001e2e:	4baa      	ldr	r3, [pc, #680]	@ (80020d8 <BMP280_ReadPressure+0x2f4>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	17da      	asrs	r2, r3, #31
 8001e34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001e38:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001e3c:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8001e40:	460b      	mov	r3, r1
 8001e42:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 8001e46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001e48:	4613      	mov	r3, r2
 8001e4a:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001e4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001e54:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
    int64_t var2 = var1 * var1 * (int64_t)dig_P6;
 8001e58:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001e5c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001e60:	fb03 f102 	mul.w	r1, r3, r2
 8001e64:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001e68:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001e6c:	fb02 f303 	mul.w	r3, r2, r3
 8001e70:	18ca      	adds	r2, r1, r3
 8001e72:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001e76:	fba3 4503 	umull	r4, r5, r3, r3
 8001e7a:	1953      	adds	r3, r2, r5
 8001e7c:	461d      	mov	r5, r3
 8001e7e:	4b97      	ldr	r3, [pc, #604]	@ (80020dc <BMP280_ReadPressure+0x2f8>)
 8001e80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e84:	b21b      	sxth	r3, r3
 8001e86:	17da      	asrs	r2, r3, #31
 8001e88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001e8c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001e90:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001e94:	4603      	mov	r3, r0
 8001e96:	fb03 f205 	mul.w	r2, r3, r5
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	fb04 f303 	mul.w	r3, r4, r3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	fba4 8902 	umull	r8, r9, r4, r2
 8001ea8:	444b      	add	r3, r9
 8001eaa:	4699      	mov	r9, r3
 8001eac:	e9c7 8946 	strd	r8, r9, [r7, #280]	@ 0x118
 8001eb0:	e9c7 8946 	strd	r8, r9, [r7, #280]	@ 0x118
    var2 = var2 + ((var1 * (int64_t)dig_P5) << 17);
 8001eb4:	4b8a      	ldr	r3, [pc, #552]	@ (80020e0 <BMP280_ReadPressure+0x2fc>)
 8001eb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eba:	b21b      	sxth	r3, r3
 8001ebc:	17da      	asrs	r2, r3, #31
 8001ebe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001ec2:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001ec6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001eca:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8001ece:	462a      	mov	r2, r5
 8001ed0:	fb02 f203 	mul.w	r2, r2, r3
 8001ed4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001ed8:	4621      	mov	r1, r4
 8001eda:	fb01 f303 	mul.w	r3, r1, r3
 8001ede:	441a      	add	r2, r3
 8001ee0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001ee4:	4621      	mov	r1, r4
 8001ee6:	fba3 ab01 	umull	sl, fp, r3, r1
 8001eea:	eb02 030b 	add.w	r3, r2, fp
 8001eee:	469b      	mov	fp, r3
 8001ef0:	f04f 0000 	mov.w	r0, #0
 8001ef4:	f04f 0100 	mov.w	r1, #0
 8001ef8:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8001efc:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8001f00:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8001f04:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001f08:	1814      	adds	r4, r2, r0
 8001f0a:	643c      	str	r4, [r7, #64]	@ 0x40
 8001f0c:	414b      	adcs	r3, r1
 8001f0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f10:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001f14:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    var2 = var2 + (((int64_t)dig_P4) << 35);
 8001f18:	4b72      	ldr	r3, [pc, #456]	@ (80020e4 <BMP280_ReadPressure+0x300>)
 8001f1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f1e:	b21b      	sxth	r3, r3
 8001f20:	17da      	asrs	r2, r3, #31
 8001f22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001f26:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001f2a:	f04f 0000 	mov.w	r0, #0
 8001f2e:	f04f 0100 	mov.w	r1, #0
 8001f32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001f36:	00d9      	lsls	r1, r3, #3
 8001f38:	2000      	movs	r0, #0
 8001f3a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001f3e:	1814      	adds	r4, r2, r0
 8001f40:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001f42:	414b      	adcs	r3, r1
 8001f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f46:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001f4a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    var1 = ((var1 * var1 * (int64_t)dig_P3) >> 8) + ((var1 * (int64_t)dig_P2) << 12);
 8001f4e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001f52:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001f56:	fb03 f102 	mul.w	r1, r3, r2
 8001f5a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001f5e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001f62:	fb02 f303 	mul.w	r3, r2, r3
 8001f66:	18ca      	adds	r2, r1, r3
 8001f68:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001f6c:	fba3 1303 	umull	r1, r3, r3, r3
 8001f70:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001f74:	460b      	mov	r3, r1
 8001f76:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001f7e:	18d3      	adds	r3, r2, r3
 8001f80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001f84:	4b58      	ldr	r3, [pc, #352]	@ (80020e8 <BMP280_ReadPressure+0x304>)
 8001f86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f8a:	b21b      	sxth	r3, r3
 8001f8c:	17da      	asrs	r2, r3, #31
 8001f8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001f92:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001f96:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001f9a:	462b      	mov	r3, r5
 8001f9c:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8001fa0:	4642      	mov	r2, r8
 8001fa2:	fb02 f203 	mul.w	r2, r2, r3
 8001fa6:	464b      	mov	r3, r9
 8001fa8:	4621      	mov	r1, r4
 8001faa:	fb01 f303 	mul.w	r3, r1, r3
 8001fae:	4413      	add	r3, r2
 8001fb0:	4622      	mov	r2, r4
 8001fb2:	4641      	mov	r1, r8
 8001fb4:	fba2 1201 	umull	r1, r2, r2, r1
 8001fb8:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8001fbc:	460a      	mov	r2, r1
 8001fbe:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8001fc2:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001fcc:	f04f 0000 	mov.w	r0, #0
 8001fd0:	f04f 0100 	mov.w	r1, #0
 8001fd4:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001fd8:	4623      	mov	r3, r4
 8001fda:	0a18      	lsrs	r0, r3, #8
 8001fdc:	462b      	mov	r3, r5
 8001fde:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001fe2:	462b      	mov	r3, r5
 8001fe4:	1219      	asrs	r1, r3, #8
 8001fe6:	4b41      	ldr	r3, [pc, #260]	@ (80020ec <BMP280_ReadPressure+0x308>)
 8001fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fec:	b21b      	sxth	r3, r3
 8001fee:	17da      	asrs	r2, r3, #31
 8001ff0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001ff4:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001ff8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001ffc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002000:	464a      	mov	r2, r9
 8002002:	fb02 f203 	mul.w	r2, r2, r3
 8002006:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800200a:	4644      	mov	r4, r8
 800200c:	fb04 f303 	mul.w	r3, r4, r3
 8002010:	441a      	add	r2, r3
 8002012:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002016:	4644      	mov	r4, r8
 8002018:	fba3 4304 	umull	r4, r3, r3, r4
 800201c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002020:	4623      	mov	r3, r4
 8002022:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800202a:	18d3      	adds	r3, r2, r3
 800202c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	f04f 0300 	mov.w	r3, #0
 8002038:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 800203c:	464c      	mov	r4, r9
 800203e:	0323      	lsls	r3, r4, #12
 8002040:	4644      	mov	r4, r8
 8002042:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8002046:	4644      	mov	r4, r8
 8002048:	0322      	lsls	r2, r4, #12
 800204a:	1884      	adds	r4, r0, r2
 800204c:	633c      	str	r4, [r7, #48]	@ 0x30
 800204e:	eb41 0303 	adc.w	r3, r1, r3
 8002052:	637b      	str	r3, [r7, #52]	@ 0x34
 8002054:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8002058:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
    var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)dig_P1) >> 33;
 800205c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8002060:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8002064:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8002068:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800206c:	4b20      	ldr	r3, [pc, #128]	@ (80020f0 <BMP280_ReadPressure+0x30c>)
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	b29b      	uxth	r3, r3
 8002072:	2200      	movs	r2, #0
 8002074:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002078:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800207c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8002080:	462b      	mov	r3, r5
 8002082:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8002086:	4642      	mov	r2, r8
 8002088:	fb02 f203 	mul.w	r2, r2, r3
 800208c:	464b      	mov	r3, r9
 800208e:	4621      	mov	r1, r4
 8002090:	fb01 f303 	mul.w	r3, r1, r3
 8002094:	4413      	add	r3, r2
 8002096:	4622      	mov	r2, r4
 8002098:	4641      	mov	r1, r8
 800209a:	fba2 1201 	umull	r1, r2, r2, r1
 800209e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80020a2:	460a      	mov	r2, r1
 80020a4:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 80020a8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80020ac:	4413      	add	r3, r2
 80020ae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	f04f 0300 	mov.w	r3, #0
 80020ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80020be:	4629      	mov	r1, r5
 80020c0:	104a      	asrs	r2, r1, #1
 80020c2:	4629      	mov	r1, r5
 80020c4:	17cb      	asrs	r3, r1, #31
 80020c6:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

    if (var1 == 0) return 0; // Evitar división por cero
 80020ca:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80020ce:	4313      	orrs	r3, r2
 80020d0:	d112      	bne.n	80020f8 <BMP280_ReadPressure+0x314>
 80020d2:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80020f4 <BMP280_ReadPressure+0x310>
 80020d6:	e15f      	b.n	8002398 <BMP280_ReadPressure+0x5b4>
 80020d8:	20000254 	.word	0x20000254
 80020dc:	2000024c 	.word	0x2000024c
 80020e0:	2000024a 	.word	0x2000024a
 80020e4:	20000248 	.word	0x20000248
 80020e8:	20000246 	.word	0x20000246
 80020ec:	20000244 	.word	0x20000244
 80020f0:	2000023e 	.word	0x2000023e
 80020f4:	00000000 	.word	0x00000000

    int64_t p = 1048576 - adc_P;
 80020f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80020fc:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8002100:	17da      	asrs	r2, r3, #31
 8002102:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002104:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002106:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800210a:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
    p = (((p << 31) - var2) * 3125) / var1;
 800210e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002112:	105b      	asrs	r3, r3, #1
 8002114:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002118:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800211c:	07db      	lsls	r3, r3, #31
 800211e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002122:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8002126:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800212a:	4621      	mov	r1, r4
 800212c:	1a89      	subs	r1, r1, r2
 800212e:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8002132:	4629      	mov	r1, r5
 8002134:	eb61 0303 	sbc.w	r3, r1, r3
 8002138:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800213c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8002140:	4622      	mov	r2, r4
 8002142:	462b      	mov	r3, r5
 8002144:	1891      	adds	r1, r2, r2
 8002146:	6239      	str	r1, [r7, #32]
 8002148:	415b      	adcs	r3, r3
 800214a:	627b      	str	r3, [r7, #36]	@ 0x24
 800214c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002150:	4621      	mov	r1, r4
 8002152:	1851      	adds	r1, r2, r1
 8002154:	61b9      	str	r1, [r7, #24]
 8002156:	4629      	mov	r1, r5
 8002158:	414b      	adcs	r3, r1
 800215a:	61fb      	str	r3, [r7, #28]
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	f04f 0300 	mov.w	r3, #0
 8002164:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002168:	4649      	mov	r1, r9
 800216a:	018b      	lsls	r3, r1, #6
 800216c:	4641      	mov	r1, r8
 800216e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002172:	4641      	mov	r1, r8
 8002174:	018a      	lsls	r2, r1, #6
 8002176:	4641      	mov	r1, r8
 8002178:	1889      	adds	r1, r1, r2
 800217a:	6139      	str	r1, [r7, #16]
 800217c:	4649      	mov	r1, r9
 800217e:	eb43 0101 	adc.w	r1, r3, r1
 8002182:	6179      	str	r1, [r7, #20]
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	f04f 0300 	mov.w	r3, #0
 800218c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002190:	4649      	mov	r1, r9
 8002192:	008b      	lsls	r3, r1, #2
 8002194:	4641      	mov	r1, r8
 8002196:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800219a:	4641      	mov	r1, r8
 800219c:	008a      	lsls	r2, r1, #2
 800219e:	4610      	mov	r0, r2
 80021a0:	4619      	mov	r1, r3
 80021a2:	4603      	mov	r3, r0
 80021a4:	4622      	mov	r2, r4
 80021a6:	189b      	adds	r3, r3, r2
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	460b      	mov	r3, r1
 80021ac:	462a      	mov	r2, r5
 80021ae:	eb42 0303 	adc.w	r3, r2, r3
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80021c0:	4649      	mov	r1, r9
 80021c2:	008b      	lsls	r3, r1, #2
 80021c4:	4641      	mov	r1, r8
 80021c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021ca:	4641      	mov	r1, r8
 80021cc:	008a      	lsls	r2, r1, #2
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	4603      	mov	r3, r0
 80021d4:	4622      	mov	r2, r4
 80021d6:	189b      	adds	r3, r3, r2
 80021d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80021da:	462b      	mov	r3, r5
 80021dc:	460a      	mov	r2, r1
 80021de:	eb42 0303 	adc.w	r3, r2, r3
 80021e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80021e4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80021e8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80021ec:	f7fe fe0a 	bl	8000e04 <__aeabi_ldivmod>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
    var1 = (((int64_t)dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 80021f8:	4b6b      	ldr	r3, [pc, #428]	@ (80023a8 <BMP280_ReadPressure+0x5c4>)
 80021fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021fe:	b21b      	sxth	r3, r3
 8002200:	17da      	asrs	r2, r3, #31
 8002202:	673b      	str	r3, [r7, #112]	@ 0x70
 8002204:	677a      	str	r2, [r7, #116]	@ 0x74
 8002206:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800220a:	f04f 0000 	mov.w	r0, #0
 800220e:	f04f 0100 	mov.w	r1, #0
 8002212:	0b50      	lsrs	r0, r2, #13
 8002214:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002218:	1359      	asrs	r1, r3, #13
 800221a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 800221e:	462b      	mov	r3, r5
 8002220:	fb00 f203 	mul.w	r2, r0, r3
 8002224:	4623      	mov	r3, r4
 8002226:	fb03 f301 	mul.w	r3, r3, r1
 800222a:	4413      	add	r3, r2
 800222c:	4622      	mov	r2, r4
 800222e:	fba2 1200 	umull	r1, r2, r2, r0
 8002232:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8002236:	460a      	mov	r2, r1
 8002238:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800223c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002240:	4413      	add	r3, r2
 8002242:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002246:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800224a:	f04f 0000 	mov.w	r0, #0
 800224e:	f04f 0100 	mov.w	r1, #0
 8002252:	0b50      	lsrs	r0, r2, #13
 8002254:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002258:	1359      	asrs	r1, r3, #13
 800225a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800225e:	462b      	mov	r3, r5
 8002260:	fb00 f203 	mul.w	r2, r0, r3
 8002264:	4623      	mov	r3, r4
 8002266:	fb03 f301 	mul.w	r3, r3, r1
 800226a:	4413      	add	r3, r2
 800226c:	4622      	mov	r2, r4
 800226e:	fba2 1200 	umull	r1, r2, r2, r0
 8002272:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002276:	460a      	mov	r2, r1
 8002278:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800227c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002280:	4413      	add	r3, r2
 8002282:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	f04f 0300 	mov.w	r3, #0
 800228e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8002292:	4621      	mov	r1, r4
 8002294:	0e4a      	lsrs	r2, r1, #25
 8002296:	4629      	mov	r1, r5
 8002298:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800229c:	4629      	mov	r1, r5
 800229e:	164b      	asrs	r3, r1, #25
 80022a0:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
    var2 = (((int64_t)dig_P8) * p) >> 19;
 80022a4:	4b41      	ldr	r3, [pc, #260]	@ (80023ac <BMP280_ReadPressure+0x5c8>)
 80022a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022aa:	b21b      	sxth	r3, r3
 80022ac:	17da      	asrs	r2, r3, #31
 80022ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80022b0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80022b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80022b6:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 80022ba:	462a      	mov	r2, r5
 80022bc:	fb02 f203 	mul.w	r2, r2, r3
 80022c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022c4:	4621      	mov	r1, r4
 80022c6:	fb01 f303 	mul.w	r3, r1, r3
 80022ca:	4413      	add	r3, r2
 80022cc:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80022d0:	4621      	mov	r1, r4
 80022d2:	fba2 1201 	umull	r1, r2, r2, r1
 80022d6:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80022da:	460a      	mov	r2, r1
 80022dc:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80022e0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80022e4:	4413      	add	r3, r2
 80022e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80022ea:	f04f 0200 	mov.w	r2, #0
 80022ee:	f04f 0300 	mov.w	r3, #0
 80022f2:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80022f6:	4621      	mov	r1, r4
 80022f8:	0cca      	lsrs	r2, r1, #19
 80022fa:	4629      	mov	r1, r5
 80022fc:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8002300:	4629      	mov	r1, r5
 8002302:	14cb      	asrs	r3, r1, #19
 8002304:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

    p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7) << 4);
 8002308:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800230c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8002310:	1884      	adds	r4, r0, r2
 8002312:	663c      	str	r4, [r7, #96]	@ 0x60
 8002314:	eb41 0303 	adc.w	r3, r1, r3
 8002318:	667b      	str	r3, [r7, #100]	@ 0x64
 800231a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800231e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002322:	4621      	mov	r1, r4
 8002324:	1889      	adds	r1, r1, r2
 8002326:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002328:	4629      	mov	r1, r5
 800232a:	eb43 0101 	adc.w	r1, r3, r1
 800232e:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8002330:	f04f 0000 	mov.w	r0, #0
 8002334:	f04f 0100 	mov.w	r1, #0
 8002338:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800233c:	4623      	mov	r3, r4
 800233e:	0a18      	lsrs	r0, r3, #8
 8002340:	462b      	mov	r3, r5
 8002342:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002346:	462b      	mov	r3, r5
 8002348:	1219      	asrs	r1, r3, #8
 800234a:	4b19      	ldr	r3, [pc, #100]	@ (80023b0 <BMP280_ReadPressure+0x5cc>)
 800234c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002350:	b21b      	sxth	r3, r3
 8002352:	17da      	asrs	r2, r3, #31
 8002354:	653b      	str	r3, [r7, #80]	@ 0x50
 8002356:	657a      	str	r2, [r7, #84]	@ 0x54
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002364:	464c      	mov	r4, r9
 8002366:	0123      	lsls	r3, r4, #4
 8002368:	4644      	mov	r4, r8
 800236a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800236e:	4644      	mov	r4, r8
 8002370:	0122      	lsls	r2, r4, #4
 8002372:	1884      	adds	r4, r0, r2
 8002374:	603c      	str	r4, [r7, #0]
 8002376:	eb41 0303 	adc.w	r3, r1, r3
 800237a:	607b      	str	r3, [r7, #4]
 800237c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002380:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
    return (float)p / 25600.0f;
 8002384:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8002388:	f7fe fcfe 	bl	8000d88 <__aeabi_l2f>
 800238c:	ee06 0a90 	vmov	s13, r0
 8002390:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80023b4 <BMP280_ReadPressure+0x5d0>
 8002394:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 8002398:	eeb0 0a67 	vmov.f32	s0, s15
 800239c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80023a0:	46bd      	mov	sp, r7
 80023a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023a6:	bf00      	nop
 80023a8:	20000252 	.word	0x20000252
 80023ac:	20000250 	.word	0x20000250
 80023b0:	2000024e 	.word	0x2000024e
 80023b4:	46c80000 	.word	0x46c80000

080023b8 <BMP280_ReadAltitude>:

float BMP280_ReadAltitude(float sea_level_hPa) {
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	ed87 0a01 	vstr	s0, [r7, #4]
    float pressure_hPa = BMP280_ReadPressure();
 80023c2:	f7ff fd0f 	bl	8001de4 <BMP280_ReadPressure>
 80023c6:	ed87 0a03 	vstr	s0, [r7, #12]
    return 44330.0f * (1.0f - powf(pressure_hPa / sea_level_hPa, 0.1903f));
 80023ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80023ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80023d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80023d6:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8002400 <BMP280_ReadAltitude+0x48>
 80023da:	eeb0 0a66 	vmov.f32	s0, s13
 80023de:	f007 f81f 	bl	8009420 <powf>
 80023e2:	eef0 7a40 	vmov.f32	s15, s0
 80023e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80023ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023ee:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002404 <BMP280_ReadAltitude+0x4c>
 80023f2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80023f6:	eeb0 0a67 	vmov.f32	s0, s15
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	3e42de01 	.word	0x3e42de01
 8002404:	472d2a00 	.word	0x472d2a00

08002408 <BMP280_SPI_Init>:
#include "API_uart.h"

static SPI_HandleTypeDef hspi2;

void BMP280_SPI_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
	  hspi2.Instance = SPI2;
 800240c:	4b17      	ldr	r3, [pc, #92]	@ (800246c <BMP280_SPI_Init+0x64>)
 800240e:	4a18      	ldr	r2, [pc, #96]	@ (8002470 <BMP280_SPI_Init+0x68>)
 8002410:	601a      	str	r2, [r3, #0]
	  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002412:	4b16      	ldr	r3, [pc, #88]	@ (800246c <BMP280_SPI_Init+0x64>)
 8002414:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002418:	605a      	str	r2, [r3, #4]
	  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800241a:	4b14      	ldr	r3, [pc, #80]	@ (800246c <BMP280_SPI_Init+0x64>)
 800241c:	2200      	movs	r2, #0
 800241e:	609a      	str	r2, [r3, #8]
	  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002420:	4b12      	ldr	r3, [pc, #72]	@ (800246c <BMP280_SPI_Init+0x64>)
 8002422:	2200      	movs	r2, #0
 8002424:	60da      	str	r2, [r3, #12]
	  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002426:	4b11      	ldr	r3, [pc, #68]	@ (800246c <BMP280_SPI_Init+0x64>)
 8002428:	2200      	movs	r2, #0
 800242a:	611a      	str	r2, [r3, #16]
	  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800242c:	4b0f      	ldr	r3, [pc, #60]	@ (800246c <BMP280_SPI_Init+0x64>)
 800242e:	2200      	movs	r2, #0
 8002430:	615a      	str	r2, [r3, #20]
	  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002432:	4b0e      	ldr	r3, [pc, #56]	@ (800246c <BMP280_SPI_Init+0x64>)
 8002434:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002438:	619a      	str	r2, [r3, #24]
	  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800243a:	4b0c      	ldr	r3, [pc, #48]	@ (800246c <BMP280_SPI_Init+0x64>)
 800243c:	2200      	movs	r2, #0
 800243e:	61da      	str	r2, [r3, #28]
	  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002440:	4b0a      	ldr	r3, [pc, #40]	@ (800246c <BMP280_SPI_Init+0x64>)
 8002442:	2200      	movs	r2, #0
 8002444:	621a      	str	r2, [r3, #32]
	  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002446:	4b09      	ldr	r3, [pc, #36]	@ (800246c <BMP280_SPI_Init+0x64>)
 8002448:	2200      	movs	r2, #0
 800244a:	625a      	str	r2, [r3, #36]	@ 0x24
	  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800244c:	4b07      	ldr	r3, [pc, #28]	@ (800246c <BMP280_SPI_Init+0x64>)
 800244e:	2200      	movs	r2, #0
 8002450:	629a      	str	r2, [r3, #40]	@ 0x28
	  hspi2.Init.CRCPolynomial = 10;
 8002452:	4b06      	ldr	r3, [pc, #24]	@ (800246c <BMP280_SPI_Init+0x64>)
 8002454:	220a      	movs	r2, #10
 8002456:	62da      	str	r2, [r3, #44]	@ 0x2c
	  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002458:	4804      	ldr	r0, [pc, #16]	@ (800246c <BMP280_SPI_Init+0x64>)
 800245a:	f002 ff6f 	bl	800533c <HAL_SPI_Init>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <BMP280_SPI_Init+0x60>
	  {
	    Error_Handler();
 8002464:	f7ff f80c 	bl	8001480 <Error_Handler>
	  }
}
 8002468:	bf00      	nop
 800246a:	bd80      	pop	{r7, pc}
 800246c:	20000258 	.word	0x20000258
 8002470:	40003800 	.word	0x40003800

08002474 <BMP280_SPI_CS_Init>:

void BMP280_SPI_CS_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800247a:	1d3b      	adds	r3, r7, #4
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002488:	2310      	movs	r3, #16
 800248a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800248c:	2301      	movs	r3, #1
 800248e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002490:	2300      	movs	r3, #0
 8002492:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002494:	2300      	movs	r3, #0
 8002496:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002498:	1d3b      	adds	r3, r7, #4
 800249a:	4619      	mov	r1, r3
 800249c:	4805      	ldr	r0, [pc, #20]	@ (80024b4 <BMP280_SPI_CS_Init+0x40>)
 800249e:	f000 fdf9 	bl	8003094 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80024a2:	2201      	movs	r2, #1
 80024a4:	2110      	movs	r1, #16
 80024a6:	4803      	ldr	r0, [pc, #12]	@ (80024b4 <BMP280_SPI_CS_Init+0x40>)
 80024a8:	f000 ff88 	bl	80033bc <HAL_GPIO_WritePin>
}
 80024ac:	bf00      	nop
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40020000 	.word	0x40020000

080024b8 <BMP280_PortSPI_WriteRegister>:

void BMP280_PortSPI_WriteRegister(uint8_t *valor, uint8_t size)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	70fb      	strb	r3, [r7, #3]
	if(HAL_SPI_Transmit(&hspi2, valor , size, HAL_MAX_DELAY) != HAL_OK)
 80024c4:	78fb      	ldrb	r3, [r7, #3]
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	f04f 33ff 	mov.w	r3, #4294967295
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4807      	ldr	r0, [pc, #28]	@ (80024ec <BMP280_PortSPI_WriteRegister+0x34>)
 80024d0:	f002 ffbd 	bl	800544e <HAL_SPI_Transmit>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d004      	beq.n	80024e4 <BMP280_PortSPI_WriteRegister+0x2c>
	{
		uartSendString((uint8_t*)"ERROR HANDLER BMP280 WRITE!\r\n");
 80024da:	4805      	ldr	r0, [pc, #20]	@ (80024f0 <BMP280_PortSPI_WriteRegister+0x38>)
 80024dc:	f7ff facc 	bl	8001a78 <uartSendString>
		Error_Handler();
 80024e0:	f7fe ffce 	bl	8001480 <Error_Handler>
	}
}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	20000258 	.word	0x20000258
 80024f0:	08009c24 	.word	0x08009c24

080024f4 <BMP280_PortSPI_ReadRegister>:

void BMP280_PortSPI_ReadRegister(uint8_t *valor, uint8_t size)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	460b      	mov	r3, r1
 80024fe:	70fb      	strb	r3, [r7, #3]
	if(HAL_SPI_Receive(&hspi2, valor , size, HAL_MAX_DELAY) != HAL_OK)
 8002500:	78fb      	ldrb	r3, [r7, #3]
 8002502:	b29a      	uxth	r2, r3
 8002504:	f04f 33ff 	mov.w	r3, #4294967295
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	4807      	ldr	r0, [pc, #28]	@ (8002528 <BMP280_PortSPI_ReadRegister+0x34>)
 800250c:	f003 f8e3 	bl	80056d6 <HAL_SPI_Receive>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d004      	beq.n	8002520 <BMP280_PortSPI_ReadRegister+0x2c>
	{
		uartSendString((uint8_t*)"ERROR HANDLER BMP280 READ!\r\n");
 8002516:	4805      	ldr	r0, [pc, #20]	@ (800252c <BMP280_PortSPI_ReadRegister+0x38>)
 8002518:	f7ff faae 	bl	8001a78 <uartSendString>
		Error_Handler();
 800251c:	f7fe ffb0 	bl	8001480 <Error_Handler>
	}
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20000258 	.word	0x20000258
 800252c:	08009c44 	.word	0x08009c44

08002530 <BMP280_SPI_CS_Select>:

void BMP280_SPI_CS_Select(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002534:	2200      	movs	r2, #0
 8002536:	2110      	movs	r1, #16
 8002538:	4802      	ldr	r0, [pc, #8]	@ (8002544 <BMP280_SPI_CS_Select+0x14>)
 800253a:	f000 ff3f 	bl	80033bc <HAL_GPIO_WritePin>
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40020000 	.word	0x40020000

08002548 <BMP280_SPI_CS_Deselect>:

void BMP280_SPI_CS_Deselect(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800254c:	2201      	movs	r2, #1
 800254e:	2110      	movs	r1, #16
 8002550:	4802      	ldr	r0, [pc, #8]	@ (800255c <BMP280_SPI_CS_Deselect+0x14>)
 8002552:	f000 ff33 	bl	80033bc <HAL_GPIO_WritePin>
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40020000 	.word	0x40020000

08002560 <LCD_SendNibble>:
static void LCD_SendNibble( uint8_t nibble, uint8_t mode);
static void FormatIntDecimal(char *buf, int32_t value, uint8_t decimal);
static void LCD_PrintLine(uint8_t row, char* text);

static void LCD_SendNibble(uint8_t nibble, uint8_t mode)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	460a      	mov	r2, r1
 800256a:	71fb      	strb	r3, [r7, #7]
 800256c:	4613      	mov	r3, r2
 800256e:	71bb      	strb	r3, [r7, #6]
	uint8_t data = (nibble & MASK) | LCD_BACKLIGHT | mode;
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	f023 030f 	bic.w	r3, r3, #15
 8002576:	b2da      	uxtb	r2, r3
 8002578:	79bb      	ldrb	r3, [r7, #6]
 800257a:	4313      	orrs	r3, r2
 800257c:	b2db      	uxtb	r3, r3
 800257e:	f043 0308 	orr.w	r3, r3, #8
 8002582:	73fb      	strb	r3, [r7, #15]
	LCD_PortI2C_WriteRegister(data | ENABLE);
 8002584:	7bfb      	ldrb	r3, [r7, #15]
 8002586:	f043 0304 	orr.w	r3, r3, #4
 800258a:	b2db      	uxtb	r3, r3
 800258c:	4618      	mov	r0, r3
 800258e:	f000 fa4b 	bl	8002a28 <LCD_PortI2C_WriteRegister>
    HAL_Delay(5);
 8002592:	2005      	movs	r0, #5
 8002594:	f000 fc74 	bl	8002e80 <HAL_Delay>
    LCD_PortI2C_WriteRegister(data & ~ENABLE);
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	f023 0304 	bic.w	r3, r3, #4
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 fa41 	bl	8002a28 <LCD_PortI2C_WriteRegister>
}
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <LCD_SendCommand>:

static void LCD_SendCommand( uint8_t cmd)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	4603      	mov	r3, r0
 80025b6:	71fb      	strb	r3, [r7, #7]
	LCD_SendNibble( cmd, MODE_RS_IR);
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	2100      	movs	r1, #0
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ffcf 	bl	8002560 <LCD_SendNibble>
	LCD_SendNibble((cmd << 4), MODE_RS_IR );
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	011b      	lsls	r3, r3, #4
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2100      	movs	r1, #0
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff ffc8 	bl	8002560 <LCD_SendNibble>
	HAL_Delay(2);
 80025d0:	2002      	movs	r0, #2
 80025d2:	f000 fc55 	bl	8002e80 <HAL_Delay>
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <LCD_SendData>:

static void LCD_SendData(uint8_t data)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	4603      	mov	r3, r0
 80025e6:	71fb      	strb	r3, [r7, #7]
	LCD_SendNibble( data, MODE_RS_DR);
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	2101      	movs	r1, #1
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff ffb7 	bl	8002560 <LCD_SendNibble>
	LCD_SendNibble((data << 4) & MASK, MODE_RS_DR );
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2101      	movs	r1, #1
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff ffb0 	bl	8002560 <LCD_SendNibble>
	HAL_Delay(1);
 8002600:	2001      	movs	r0, #1
 8002602:	f000 fc3d 	bl	8002e80 <HAL_Delay>
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <FormatIntDecimal>:

static void FormatIntDecimal(char *buf, int32_t value, uint8_t decimals)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b088      	sub	sp, #32
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	4613      	mov	r3, r2
 800261c:	71fb      	strb	r3, [r7, #7]
	int abs_value = (value < 0) ? -value : value;
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	bfb8      	it	lt
 8002624:	425b      	neglt	r3, r3
 8002626:	61fb      	str	r3, [r7, #28]
    int ent = abs_value / 100;
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	4a23      	ldr	r2, [pc, #140]	@ (80026b8 <FormatIntDecimal+0xa8>)
 800262c:	fb82 1203 	smull	r1, r2, r2, r3
 8002630:	1152      	asrs	r2, r2, #5
 8002632:	17db      	asrs	r3, r3, #31
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	61bb      	str	r3, [r7, #24]
    int dec = abs_value % 100;
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	4a1f      	ldr	r2, [pc, #124]	@ (80026b8 <FormatIntDecimal+0xa8>)
 800263c:	fb82 1203 	smull	r1, r2, r2, r3
 8002640:	1151      	asrs	r1, r2, #5
 8002642:	17da      	asrs	r2, r3, #31
 8002644:	1a8a      	subs	r2, r1, r2
 8002646:	2164      	movs	r1, #100	@ 0x64
 8002648:	fb01 f202 	mul.w	r2, r1, r2
 800264c:	1a9b      	subs	r3, r3, r2
 800264e:	617b      	str	r3, [r7, #20]

    if (value < 0) {
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	da16      	bge.n	8002684 <FormatIntDecimal+0x74>
        if (decimals == 2) {
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d106      	bne.n	800266a <FormatIntDecimal+0x5a>
            sprintf(buf, "-%d.%02d", ent, dec);
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4916      	ldr	r1, [pc, #88]	@ (80026bc <FormatIntDecimal+0xac>)
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f004 fd96 	bl	8007194 <siprintf>
            sprintf(buf, "%d.%02d", ent, dec);
        } else {
            sprintf(buf, "%d.%d", ent, dec / 10);
        }
    }
}
 8002668:	e022      	b.n	80026b0 <FormatIntDecimal+0xa0>
            sprintf(buf, "-%d.%d", ent, dec / 10);
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	4a14      	ldr	r2, [pc, #80]	@ (80026c0 <FormatIntDecimal+0xb0>)
 800266e:	fb82 1203 	smull	r1, r2, r2, r3
 8002672:	1092      	asrs	r2, r2, #2
 8002674:	17db      	asrs	r3, r3, #31
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4912      	ldr	r1, [pc, #72]	@ (80026c4 <FormatIntDecimal+0xb4>)
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f004 fd89 	bl	8007194 <siprintf>
}
 8002682:	e015      	b.n	80026b0 <FormatIntDecimal+0xa0>
        if (decimals == 2) {
 8002684:	79fb      	ldrb	r3, [r7, #7]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d106      	bne.n	8002698 <FormatIntDecimal+0x88>
            sprintf(buf, "%d.%02d", ent, dec);
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	490e      	ldr	r1, [pc, #56]	@ (80026c8 <FormatIntDecimal+0xb8>)
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f004 fd7f 	bl	8007194 <siprintf>
}
 8002696:	e00b      	b.n	80026b0 <FormatIntDecimal+0xa0>
            sprintf(buf, "%d.%d", ent, dec / 10);
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	4a09      	ldr	r2, [pc, #36]	@ (80026c0 <FormatIntDecimal+0xb0>)
 800269c:	fb82 1203 	smull	r1, r2, r2, r3
 80026a0:	1092      	asrs	r2, r2, #2
 80026a2:	17db      	asrs	r3, r3, #31
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4908      	ldr	r1, [pc, #32]	@ (80026cc <FormatIntDecimal+0xbc>)
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f004 fd72 	bl	8007194 <siprintf>
}
 80026b0:	bf00      	nop
 80026b2:	3720      	adds	r7, #32
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	51eb851f 	.word	0x51eb851f
 80026bc:	08009c64 	.word	0x08009c64
 80026c0:	66666667 	.word	0x66666667
 80026c4:	08009c70 	.word	0x08009c70
 80026c8:	08009c78 	.word	0x08009c78
 80026cc:	08009c80 	.word	0x08009c80

080026d0 <LCD_PrintLine>:


static void LCD_PrintLine(uint8_t row, char* text)
{
 80026d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026d4:	b087      	sub	sp, #28
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	4603      	mov	r3, r0
 80026da:	6039      	str	r1, [r7, #0]
 80026dc:	71fb      	strb	r3, [r7, #7]
 80026de:	466b      	mov	r3, sp
 80026e0:	461e      	mov	r6, r3
	char buf [lcd_conf.I2C_LCD_nCol + 1];
 80026e2:	4b2f      	ldr	r3, [pc, #188]	@ (80027a0 <LCD_PrintLine+0xd0>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	1c59      	adds	r1, r3, #1
 80026e8:	1e4b      	subs	r3, r1, #1
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	460a      	mov	r2, r1
 80026ee:	2300      	movs	r3, #0
 80026f0:	4690      	mov	r8, r2
 80026f2:	4699      	mov	r9, r3
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	f04f 0300 	mov.w	r3, #0
 80026fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002700:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002704:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002708:	460a      	mov	r2, r1
 800270a:	2300      	movs	r3, #0
 800270c:	4614      	mov	r4, r2
 800270e:	461d      	mov	r5, r3
 8002710:	f04f 0200 	mov.w	r2, #0
 8002714:	f04f 0300 	mov.w	r3, #0
 8002718:	00eb      	lsls	r3, r5, #3
 800271a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800271e:	00e2      	lsls	r2, r4, #3
 8002720:	460b      	mov	r3, r1
 8002722:	3307      	adds	r3, #7
 8002724:	08db      	lsrs	r3, r3, #3
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	ebad 0d03 	sub.w	sp, sp, r3
 800272c:	466b      	mov	r3, sp
 800272e:	3300      	adds	r3, #0
 8002730:	60bb      	str	r3, [r7, #8]
	size_t len = strlen(text);
 8002732:	6838      	ldr	r0, [r7, #0]
 8002734:	f7fd fdbc 	bl	80002b0 <strlen>
 8002738:	6178      	str	r0, [r7, #20]

	if(len > lcd_conf.I2C_LCD_nCol) len = 20 ;
 800273a:	4b19      	ldr	r3, [pc, #100]	@ (80027a0 <LCD_PrintLine+0xd0>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	4293      	cmp	r3, r2
 8002744:	d901      	bls.n	800274a <LCD_PrintLine+0x7a>
 8002746:	2314      	movs	r3, #20
 8002748:	617b      	str	r3, [r7, #20]
	strncpy(buf, text, len);
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	6839      	ldr	r1, [r7, #0]
 800274e:	68b8      	ldr	r0, [r7, #8]
 8002750:	f004 fd8d 	bl	800726e <strncpy>

	for(size_t i = len; i < lcd_conf.I2C_LCD_nCol ; i++)
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	e007      	b.n	800276a <LCD_PrintLine+0x9a>
	{
		buf[i] = ' ';
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4413      	add	r3, r2
 8002760:	2220      	movs	r2, #32
 8002762:	701a      	strb	r2, [r3, #0]
	for(size_t i = len; i < lcd_conf.I2C_LCD_nCol ; i++)
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	3301      	adds	r3, #1
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	4b0d      	ldr	r3, [pc, #52]	@ (80027a0 <LCD_PrintLine+0xd0>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4293      	cmp	r3, r2
 8002774:	d3f1      	bcc.n	800275a <LCD_PrintLine+0x8a>
	}

	buf[lcd_conf.I2C_LCD_nCol] = '\0';
 8002776:	4b0a      	ldr	r3, [pc, #40]	@ (80027a0 <LCD_PrintLine+0xd0>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2100      	movs	r1, #0
 8002780:	5499      	strb	r1, [r3, r2]
    LCD_SetCursor(0, row);
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	4619      	mov	r1, r3
 8002786:	2000      	movs	r0, #0
 8002788:	f000 f824 	bl	80027d4 <LCD_SetCursor>
    LCD_SendString(buf);
 800278c:	68b8      	ldr	r0, [r7, #8]
 800278e:	f000 f809 	bl	80027a4 <LCD_SendString>
 8002792:	46b5      	mov	sp, r6
}
 8002794:	bf00      	nop
 8002796:	371c      	adds	r7, #28
 8002798:	46bd      	mov	sp, r7
 800279a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800279e:	bf00      	nop
 80027a0:	200002b0 	.word	0x200002b0

080027a4 <LCD_SendString>:


void LCD_SendString(char *str) {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
    while(*str) {
 80027ac:	e007      	b.n	80027be <LCD_SendString+0x1a>
    	LCD_SendData((uint8_t)(*str));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff ff13 	bl	80025de <LCD_SendData>
        str++;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3301      	adds	r3, #1
 80027bc:	607b      	str	r3, [r7, #4]
    while(*str) {
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f3      	bne.n	80027ae <LCD_SendString+0xa>
    }

    HAL_Delay(2);
 80027c6:	2002      	movs	r0, #2
 80027c8:	f000 fb5a 	bl	8002e80 <HAL_Delay>
}
 80027cc:	bf00      	nop
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <LCD_SetCursor>:
    LCD_SendCommand(LCD_RETURNHOME);
    HAL_Delay(2);
}

void LCD_SetCursor(uint8_t col, uint8_t row)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	460a      	mov	r2, r1
 80027de:	71fb      	strb	r3, [r7, #7]
 80027e0:	4613      	mov	r3, r2
 80027e2:	71bb      	strb	r3, [r7, #6]
    const uint8_t row_offsets[] = {LCD_LINE_0, LCD_LINE_1, LCD_LINE_2, LCD_LINE_3};
 80027e4:	4b13      	ldr	r3, [pc, #76]	@ (8002834 <LCD_SetCursor+0x60>)
 80027e6:	60fb      	str	r3, [r7, #12]
    if(row >= lcd_conf.I2C_LCD_nRow) row = lcd_conf.I2C_LCD_nRow - 1;
 80027e8:	4b13      	ldr	r3, [pc, #76]	@ (8002838 <LCD_SetCursor+0x64>)
 80027ea:	785b      	ldrb	r3, [r3, #1]
 80027ec:	79ba      	ldrb	r2, [r7, #6]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d303      	bcc.n	80027fa <LCD_SetCursor+0x26>
 80027f2:	4b11      	ldr	r3, [pc, #68]	@ (8002838 <LCD_SetCursor+0x64>)
 80027f4:	785b      	ldrb	r3, [r3, #1]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	71bb      	strb	r3, [r7, #6]
    if(col >= lcd_conf.I2C_LCD_nCol) col = lcd_conf.I2C_LCD_nCol - 1;
 80027fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002838 <LCD_SetCursor+0x64>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	79fa      	ldrb	r2, [r7, #7]
 8002800:	429a      	cmp	r2, r3
 8002802:	d303      	bcc.n	800280c <LCD_SetCursor+0x38>
 8002804:	4b0c      	ldr	r3, [pc, #48]	@ (8002838 <LCD_SetCursor+0x64>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	3b01      	subs	r3, #1
 800280a:	71fb      	strb	r3, [r7, #7]
    LCD_SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800280c:	79bb      	ldrb	r3, [r7, #6]
 800280e:	3310      	adds	r3, #16
 8002810:	443b      	add	r3, r7
 8002812:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	4413      	add	r3, r2
 800281a:	b2db      	uxtb	r3, r3
 800281c:	b25b      	sxtb	r3, r3
 800281e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002822:	b25b      	sxtb	r3, r3
 8002824:	b2db      	uxtb	r3, r3
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff fec1 	bl	80025ae <LCD_SendCommand>
}
 800282c:	bf00      	nop
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	54144000 	.word	0x54144000
 8002838:	200002b0 	.word	0x200002b0

0800283c <LCD_Init>:
    LCD_SendString(str);
}


void LCD_Init()
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 8002840:	2032      	movs	r0, #50	@ 0x32
 8002842:	f000 fb1d 	bl	8002e80 <HAL_Delay>

    LCD_SendNibble(FUNCTION_SET_8BIT, MODE_RS_IR);
 8002846:	2100      	movs	r1, #0
 8002848:	2030      	movs	r0, #48	@ 0x30
 800284a:	f7ff fe89 	bl	8002560 <LCD_SendNibble>
    HAL_Delay(5);
 800284e:	2005      	movs	r0, #5
 8002850:	f000 fb16 	bl	8002e80 <HAL_Delay>
    LCD_SendNibble(FUNCTION_SET_8BIT, MODE_RS_IR);
 8002854:	2100      	movs	r1, #0
 8002856:	2030      	movs	r0, #48	@ 0x30
 8002858:	f7ff fe82 	bl	8002560 <LCD_SendNibble>
    HAL_Delay(5);
 800285c:	2005      	movs	r0, #5
 800285e:	f000 fb0f 	bl	8002e80 <HAL_Delay>
    LCD_SendNibble(FUNCTION_SET_8BIT, MODE_RS_IR);
 8002862:	2100      	movs	r1, #0
 8002864:	2030      	movs	r0, #48	@ 0x30
 8002866:	f7ff fe7b 	bl	8002560 <LCD_SendNibble>
    HAL_Delay(1);
 800286a:	2001      	movs	r0, #1
 800286c:	f000 fb08 	bl	8002e80 <HAL_Delay>

    LCD_SendNibble(LCD_FUNCTIONSET, MODE_RS_IR);
 8002870:	2100      	movs	r1, #0
 8002872:	2020      	movs	r0, #32
 8002874:	f7ff fe74 	bl	8002560 <LCD_SendNibble>
    HAL_Delay(1);
 8002878:	2001      	movs	r0, #1
 800287a:	f000 fb01 	bl	8002e80 <HAL_Delay>

    LCD_SendCommand(LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 800287e:	2028      	movs	r0, #40	@ 0x28
 8002880:	f7ff fe95 	bl	80025ae <LCD_SendCommand>
    LCD_SendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAYOFF | LCD_CURSOROFF | LCD_BLINKOFF);
 8002884:	2008      	movs	r0, #8
 8002886:	f7ff fe92 	bl	80025ae <LCD_SendCommand>
    LCD_SendCommand(LCD_CLEARDISPLAY);
 800288a:	2001      	movs	r0, #1
 800288c:	f7ff fe8f 	bl	80025ae <LCD_SendCommand>
    HAL_Delay(2);
 8002890:	2002      	movs	r0, #2
 8002892:	f000 faf5 	bl	8002e80 <HAL_Delay>
    LCD_SendCommand(LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 8002896:	2006      	movs	r0, #6
 8002898:	f7ff fe89 	bl	80025ae <LCD_SendCommand>
    LCD_SendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 800289c:	200c      	movs	r0, #12
 800289e:	f7ff fe86 	bl	80025ae <LCD_SendCommand>
}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <LCD_Begin>:

void LCD_Begin(uint8_t cols, uint8_t row)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	460a      	mov	r2, r1
 80028b2:	71fb      	strb	r3, [r7, #7]
 80028b4:	4613      	mov	r3, r2
 80028b6:	71bb      	strb	r3, [r7, #6]
	lcd_conf.I2C_LCD_nCol = cols;
 80028b8:	4a05      	ldr	r2, [pc, #20]	@ (80028d0 <LCD_Begin+0x28>)
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	7013      	strb	r3, [r2, #0]
	lcd_conf.I2C_LCD_nRow = row;
 80028be:	4a04      	ldr	r2, [pc, #16]	@ (80028d0 <LCD_Begin+0x28>)
 80028c0:	79bb      	ldrb	r3, [r7, #6]
 80028c2:	7053      	strb	r3, [r2, #1]
	LCD_Init();
 80028c4:	f7ff ffba 	bl	800283c <LCD_Init>
}
 80028c8:	bf00      	nop
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	200002b0 	.word	0x200002b0

080028d4 <LCD_PrintSensorData>:

void LCD_PrintSensorData(int16_t temp_x100, int16_t gx_x100, int16_t ax_x100) {
 80028d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028d8:	b089      	sub	sp, #36	@ 0x24
 80028da:	af00      	add	r7, sp, #0
 80028dc:	4603      	mov	r3, r0
 80028de:	80fb      	strh	r3, [r7, #6]
 80028e0:	460b      	mov	r3, r1
 80028e2:	80bb      	strh	r3, [r7, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	807b      	strh	r3, [r7, #2]
 80028e8:	466b      	mov	r3, sp
 80028ea:	461e      	mov	r6, r3
    char line[lcd_conf.I2C_LCD_nCol + 1 ];  // 20 caracteres + nulo
 80028ec:	4b33      	ldr	r3, [pc, #204]	@ (80029bc <LCD_PrintSensorData+0xe8>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	1c59      	adds	r1, r3, #1
 80028f2:	1e4b      	subs	r3, r1, #1
 80028f4:	61fb      	str	r3, [r7, #28]
 80028f6:	460a      	mov	r2, r1
 80028f8:	2300      	movs	r3, #0
 80028fa:	4690      	mov	r8, r2
 80028fc:	4699      	mov	r9, r3
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	f04f 0300 	mov.w	r3, #0
 8002906:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800290a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800290e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002912:	460a      	mov	r2, r1
 8002914:	2300      	movs	r3, #0
 8002916:	4614      	mov	r4, r2
 8002918:	461d      	mov	r5, r3
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	f04f 0300 	mov.w	r3, #0
 8002922:	00eb      	lsls	r3, r5, #3
 8002924:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002928:	00e2      	lsls	r2, r4, #3
 800292a:	460b      	mov	r3, r1
 800292c:	3307      	adds	r3, #7
 800292e:	08db      	lsrs	r3, r3, #3
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	ebad 0d03 	sub.w	sp, sp, r3
 8002936:	466b      	mov	r3, sp
 8002938:	3300      	adds	r3, #0
 800293a:	61bb      	str	r3, [r7, #24]
    char value[10];

    // Línea 1: Temperatura
    FormatIntDecimal(value, temp_x100, 1); // 1 decimal
 800293c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8002940:	f107 030c 	add.w	r3, r7, #12
 8002944:	2201      	movs	r2, #1
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff fe62 	bl	8002610 <FormatIntDecimal>
    sprintf(line, "Temp: %s C", value);
 800294c:	f107 030c 	add.w	r3, r7, #12
 8002950:	461a      	mov	r2, r3
 8002952:	491b      	ldr	r1, [pc, #108]	@ (80029c0 <LCD_PrintSensorData+0xec>)
 8002954:	69b8      	ldr	r0, [r7, #24]
 8002956:	f004 fc1d 	bl	8007194 <siprintf>
    LCD_PrintLine(0, line);
 800295a:	69b9      	ldr	r1, [r7, #24]
 800295c:	2000      	movs	r0, #0
 800295e:	f7ff feb7 	bl	80026d0 <LCD_PrintLine>

    // Línea 2: Gyro X
    FormatIntDecimal(value, gx_x100, 2); // 2 decimales
 8002962:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002966:	f107 030c 	add.w	r3, r7, #12
 800296a:	2202      	movs	r2, #2
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff fe4f 	bl	8002610 <FormatIntDecimal>
    sprintf(line, "Gx: %s deg/s", value);
 8002972:	f107 030c 	add.w	r3, r7, #12
 8002976:	461a      	mov	r2, r3
 8002978:	4912      	ldr	r1, [pc, #72]	@ (80029c4 <LCD_PrintSensorData+0xf0>)
 800297a:	69b8      	ldr	r0, [r7, #24]
 800297c:	f004 fc0a 	bl	8007194 <siprintf>
    LCD_PrintLine(1, line);
 8002980:	69b9      	ldr	r1, [r7, #24]
 8002982:	2001      	movs	r0, #1
 8002984:	f7ff fea4 	bl	80026d0 <LCD_PrintLine>

    // Línea 3: Accel X
    FormatIntDecimal(value, ax_x100, 2);
 8002988:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800298c:	f107 030c 	add.w	r3, r7, #12
 8002990:	2202      	movs	r2, #2
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff fe3c 	bl	8002610 <FormatIntDecimal>
    sprintf(line, "Ax: %s g", value);
 8002998:	f107 030c 	add.w	r3, r7, #12
 800299c:	461a      	mov	r2, r3
 800299e:	490a      	ldr	r1, [pc, #40]	@ (80029c8 <LCD_PrintSensorData+0xf4>)
 80029a0:	69b8      	ldr	r0, [r7, #24]
 80029a2:	f004 fbf7 	bl	8007194 <siprintf>
    LCD_PrintLine(2, line);
 80029a6:	69b9      	ldr	r1, [r7, #24]
 80029a8:	2002      	movs	r0, #2
 80029aa:	f7ff fe91 	bl	80026d0 <LCD_PrintLine>
 80029ae:	46b5      	mov	sp, r6
}
 80029b0:	bf00      	nop
 80029b2:	3724      	adds	r7, #36	@ 0x24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029ba:	bf00      	nop
 80029bc:	200002b0 	.word	0x200002b0
 80029c0:	08009c88 	.word	0x08009c88
 80029c4:	08009c94 	.word	0x08009c94
 80029c8:	08009ca4 	.word	0x08009ca4

080029cc <LCD_PortI2C_Init>:
#include "API_uart.h"

static I2C_HandleTypeDef hi2c1;

void LCD_PortI2C_Init()
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
	  hi2c1.Instance = I2C1;
 80029d0:	4b12      	ldr	r3, [pc, #72]	@ (8002a1c <LCD_PortI2C_Init+0x50>)
 80029d2:	4a13      	ldr	r2, [pc, #76]	@ (8002a20 <LCD_PortI2C_Init+0x54>)
 80029d4:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 100000;
 80029d6:	4b11      	ldr	r3, [pc, #68]	@ (8002a1c <LCD_PortI2C_Init+0x50>)
 80029d8:	4a12      	ldr	r2, [pc, #72]	@ (8002a24 <LCD_PortI2C_Init+0x58>)
 80029da:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029dc:	4b0f      	ldr	r3, [pc, #60]	@ (8002a1c <LCD_PortI2C_Init+0x50>)
 80029de:	2200      	movs	r2, #0
 80029e0:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0;
 80029e2:	4b0e      	ldr	r3, [pc, #56]	@ (8002a1c <LCD_PortI2C_Init+0x50>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029e8:	4b0c      	ldr	r3, [pc, #48]	@ (8002a1c <LCD_PortI2C_Init+0x50>)
 80029ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80029ee:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029f0:	4b0a      	ldr	r3, [pc, #40]	@ (8002a1c <LCD_PortI2C_Init+0x50>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 80029f6:	4b09      	ldr	r3, [pc, #36]	@ (8002a1c <LCD_PortI2C_Init+0x50>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029fc:	4b07      	ldr	r3, [pc, #28]	@ (8002a1c <LCD_PortI2C_Init+0x50>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a02:	4b06      	ldr	r3, [pc, #24]	@ (8002a1c <LCD_PortI2C_Init+0x50>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a08:	4804      	ldr	r0, [pc, #16]	@ (8002a1c <LCD_PortI2C_Init+0x50>)
 8002a0a:	f000 fd0b 	bl	8003424 <HAL_I2C_Init>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <LCD_PortI2C_Init+0x4c>
	  {
	    Error_Handler();
 8002a14:	f7fe fd34 	bl	8001480 <Error_Handler>
	  }
}
 8002a18:	bf00      	nop
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	200002b4 	.word	0x200002b4
 8002a20:	40005400 	.word	0x40005400
 8002a24:	000186a0 	.word	0x000186a0

08002a28 <LCD_PortI2C_WriteRegister>:
{
	if(HAL_I2C_IsDeviceReady(&hi2c1, LCD_ADDR, 1, HAL_MAX_DELAY) != HAL_OK) Error_Handler();
}

void LCD_PortI2C_WriteRegister(uint8_t valor)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	4603      	mov	r3, r0
 8002a30:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, &valor, sizeof(valor), HAL_MAX_DELAY) != HAL_OK){
 8002a32:	1dfa      	adds	r2, r7, #7
 8002a34:	f04f 33ff 	mov.w	r3, #4294967295
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	214e      	movs	r1, #78	@ 0x4e
 8002a3e:	4807      	ldr	r0, [pc, #28]	@ (8002a5c <LCD_PortI2C_WriteRegister+0x34>)
 8002a40:	f000 fe34 	bl	80036ac <HAL_I2C_Master_Transmit>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d004      	beq.n	8002a54 <LCD_PortI2C_WriteRegister+0x2c>
		uartSendString((uint8_t*)"ERROR HANDLER LCD WRITE!\r\n");
 8002a4a:	4805      	ldr	r0, [pc, #20]	@ (8002a60 <LCD_PortI2C_WriteRegister+0x38>)
 8002a4c:	f7ff f814 	bl	8001a78 <uartSendString>
		Error_Handler();
 8002a50:	f7fe fd16 	bl	8001480 <Error_Handler>
	}
}
 8002a54:	bf00      	nop
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	200002b4 	.word	0x200002b4
 8002a60:	08009cb0 	.word	0x08009cb0

08002a64 <MPU6050_RawMeasurementRead>:
static Vector3i16 MPU6050_ReadGyroscopeInt();
static Vector3i16 MPU6050_ReadAccelerometerInt();


static int16_t MPU6050_RawMeasurementRead(uint8_t address)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[LENGTH_DATA];
	MPU6050_PortI2C_ReadRegister(address, buf, MAX_BYTE_REGISTER, LENGTH_DATA);
 8002a6e:	f107 010c 	add.w	r1, r7, #12
 8002a72:	79f8      	ldrb	r0, [r7, #7]
 8002a74:	2302      	movs	r3, #2
 8002a76:	2201      	movs	r2, #1
 8002a78:	f000 f962 	bl	8002d40 <MPU6050_PortI2C_ReadRegister>
	return (int16_t)((buf[0] << 8) | buf[1]);
 8002a7c:	7b3b      	ldrb	r3, [r7, #12]
 8002a7e:	b21b      	sxth	r3, r3
 8002a80:	021b      	lsls	r3, r3, #8
 8002a82:	b21a      	sxth	r2, r3
 8002a84:	7b7b      	ldrb	r3, [r7, #13]
 8002a86:	b21b      	sxth	r3, r3
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	b21b      	sxth	r3, r3
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <MPU6050_ReadTemperatureInt>:

// Int Measurements

int16_t MPU6050_ReadTemperatureInt()
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
    int16_t raw = MPU6050_RawMeasurementRead(TEMP_OUT_H);
 8002a9a:	2041      	movs	r0, #65	@ 0x41
 8002a9c:	f7ff ffe2 	bl	8002a64 <MPU6050_RawMeasurementRead>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	80fb      	strh	r3, [r7, #6]
    return ((raw * 100) / 340) + 3653;
 8002aa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aa8:	2264      	movs	r2, #100	@ 0x64
 8002aaa:	fb02 f303 	mul.w	r3, r2, r3
 8002aae:	4a07      	ldr	r2, [pc, #28]	@ (8002acc <MPU6050_ReadTemperatureInt+0x38>)
 8002ab0:	fb82 1203 	smull	r1, r2, r2, r3
 8002ab4:	11d2      	asrs	r2, r2, #7
 8002ab6:	17db      	asrs	r3, r3, #31
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	f603 6345 	addw	r3, r3, #3653	@ 0xe45
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	b21b      	sxth	r3, r3
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	60606061 	.word	0x60606061

08002ad0 <MPU6050_ReadGyroscopeInt>:

static Vector3i16 MPU6050_ReadGyroscopeInt()
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	e024      	b.n	8002b28 <MPU6050_ReadGyroscopeInt+0x58>
        int16_t raw_gyro = MPU6050_RawMeasurementRead(GYRO_XOUT_H + 2*i);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	3343      	adds	r3, #67	@ 0x43
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff ffba 	bl	8002a64 <MPU6050_RawMeasurementRead>
 8002af0:	4603      	mov	r3, r0
 8002af2:	817b      	strh	r3, [r7, #10]
        ((int16_t*)&gyroi16)[i] = (raw_gyro * 100) / FS_LSB_GYRO_250;
 8002af4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002af8:	2264      	movs	r2, #100	@ 0x64
 8002afa:	fb02 f303 	mul.w	r3, r2, r3
 8002afe:	ee07 3a90 	vmov	s15, r3
 8002b02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b06:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8002b44 <MPU6050_ReadGyroscopeInt+0x74>
 8002b0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	4a0d      	ldr	r2, [pc, #52]	@ (8002b48 <MPU6050_ReadGyroscopeInt+0x78>)
 8002b14:	4413      	add	r3, r2
 8002b16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b1a:	ee17 2a90 	vmov	r2, s15
 8002b1e:	b212      	sxth	r2, r2
 8002b20:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	3301      	adds	r3, #1
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	ddd7      	ble.n	8002ade <MPU6050_ReadGyroscopeInt+0xe>
    }
    return gyroi16;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a05      	ldr	r2, [pc, #20]	@ (8002b48 <MPU6050_ReadGyroscopeInt+0x78>)
 8002b32:	6810      	ldr	r0, [r2, #0]
 8002b34:	6018      	str	r0, [r3, #0]
 8002b36:	8892      	ldrh	r2, [r2, #4]
 8002b38:	809a      	strh	r2, [r3, #4]
}
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	43030000 	.word	0x43030000
 8002b48:	20000308 	.word	0x20000308

08002b4c <MPU6050_ReadAccelerometerInt>:


static Vector3i16 MPU6050_ReadAccelerometerInt()
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8002b54:	2300      	movs	r3, #0
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	e024      	b.n	8002ba4 <MPU6050_ReadAccelerometerInt+0x58>
        int16_t raw_accel = MPU6050_RawMeasurementRead(ACCEL_XOUT_H + 2*i);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	333b      	adds	r3, #59	@ 0x3b
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff ff7c 	bl	8002a64 <MPU6050_RawMeasurementRead>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	817b      	strh	r3, [r7, #10]
        ((int16_t*)&acceli16)[i] = (raw_accel * 100) / FS_LSB_GYRO_250;
 8002b70:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002b74:	2264      	movs	r2, #100	@ 0x64
 8002b76:	fb02 f303 	mul.w	r3, r2, r3
 8002b7a:	ee07 3a90 	vmov	s15, r3
 8002b7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b82:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8002bc0 <MPU6050_ReadAccelerometerInt+0x74>
 8002b86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	4a0d      	ldr	r2, [pc, #52]	@ (8002bc4 <MPU6050_ReadAccelerometerInt+0x78>)
 8002b90:	4413      	add	r3, r2
 8002b92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b96:	ee17 2a90 	vmov	r2, s15
 8002b9a:	b212      	sxth	r2, r2
 8002b9c:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	ddd7      	ble.n	8002b5a <MPU6050_ReadAccelerometerInt+0xe>
    }
    return acceli16;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a05      	ldr	r2, [pc, #20]	@ (8002bc4 <MPU6050_ReadAccelerometerInt+0x78>)
 8002bae:	6810      	ldr	r0, [r2, #0]
 8002bb0:	6018      	str	r0, [r3, #0]
 8002bb2:	8892      	ldrh	r2, [r2, #4]
 8002bb4:	809a      	strh	r2, [r3, #4]
}
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	43030000 	.word	0x43030000
 8002bc4:	20000310 	.word	0x20000310

08002bc8 <MPU6050_Init>:




void MPU6050_Init()
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
	if(!MPU6050_IsAvailable()) return;
 8002bcc:	f000 f84a 	bl	8002c64 <MPU6050_IsAvailable>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f083 0301 	eor.w	r3, r3, #1
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d11c      	bne.n	8002c16 <MPU6050_Init+0x4e>
	MPU6050_PortI2C_WriteRegister(PWR_MGMT_1, CONF_PWR_MGMT, MAX_BYTE_REGISTER);
 8002bdc:	2201      	movs	r2, #1
 8002bde:	2100      	movs	r1, #0
 8002be0:	206b      	movs	r0, #107	@ 0x6b
 8002be2:	f000 f883 	bl	8002cec <MPU6050_PortI2C_WriteRegister>
	HAL_Delay(100);
 8002be6:	2064      	movs	r0, #100	@ 0x64
 8002be8:	f000 f94a 	bl	8002e80 <HAL_Delay>
	MPU6050_PortI2C_WriteRegister(SMPLRT_DIV, CONF_SMPLRT_DIV, MAX_BYTE_REGISTER);
 8002bec:	2201      	movs	r2, #1
 8002bee:	2100      	movs	r1, #0
 8002bf0:	2019      	movs	r0, #25
 8002bf2:	f000 f87b 	bl	8002cec <MPU6050_PortI2C_WriteRegister>
	MPU6050_PortI2C_WriteRegister(CONFIG, CONFIG_DLPF, MAX_BYTE_REGISTER);
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	2103      	movs	r1, #3
 8002bfa:	201a      	movs	r0, #26
 8002bfc:	f000 f876 	bl	8002cec <MPU6050_PortI2C_WriteRegister>
	MPU6050_PortI2C_WriteRegister(GYRO_CONFIG, FS_GYRO_250, MAX_BYTE_REGISTER);
 8002c00:	2201      	movs	r2, #1
 8002c02:	2100      	movs	r1, #0
 8002c04:	201b      	movs	r0, #27
 8002c06:	f000 f871 	bl	8002cec <MPU6050_PortI2C_WriteRegister>
	MPU6050_PortI2C_WriteRegister(ACCEL_CONFIG, FS_ACC_2G, MAX_BYTE_REGISTER);
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	201c      	movs	r0, #28
 8002c10:	f000 f86c 	bl	8002cec <MPU6050_PortI2C_WriteRegister>
 8002c14:	e000      	b.n	8002c18 <MPU6050_Init+0x50>
	if(!MPU6050_IsAvailable()) return;
 8002c16:	bf00      	nop
}
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <MPU6050_Check>:

void MPU6050_Check()
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	af00      	add	r7, sp, #0
	MPU6050_Init();
 8002c1e:	f7ff ffd3 	bl	8002bc8 <MPU6050_Init>
}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <MPU6050_GetTemperatureInt>:

// Int Measurements

int16_t MPU6050_GetTemperatureInt()
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	af00      	add	r7, sp, #0
	return MPU6050_ReadTemperatureInt();
 8002c2a:	f7ff ff33 	bl	8002a94 <MPU6050_ReadTemperatureInt>
 8002c2e:	4603      	mov	r3, r0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <MPU6050_GetGyroscopeInt>:

Vector3i16  MPU6050_GetGyroscopeInt()
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
	return MPU6050_ReadGyroscopeInt();
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff ff46 	bl	8002ad0 <MPU6050_ReadGyroscopeInt>
}
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <MPU6050_GetAccelerometerInt>:

Vector3i16  MPU6050_GetAccelerometerInt()
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
	return MPU6050_ReadAccelerometerInt();
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff ff78 	bl	8002b4c <MPU6050_ReadAccelerometerInt>
}
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <MPU6050_IsAvailable>:
    return MPU6050_ReadAccelerometer();
}


bool_t MPU6050_IsAvailable()
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
	uint8_t id_device = 0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	71fb      	strb	r3, [r7, #7]
	MPU6050_PortI2C_ReadRegister(WHO_AM_I, &id_device, MAX_BYTE_REGISTER, MAX_BYTE_SEND);
 8002c6e:	1df9      	adds	r1, r7, #7
 8002c70:	2301      	movs	r3, #1
 8002c72:	2201      	movs	r2, #1
 8002c74:	2075      	movs	r0, #117	@ 0x75
 8002c76:	f000 f863 	bl	8002d40 <MPU6050_PortI2C_ReadRegister>
	return id_device == ADDRESS_MPU6050;
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	2b68      	cmp	r3, #104	@ 0x68
 8002c7e:	bf0c      	ite	eq
 8002c80:	2301      	moveq	r3, #1
 8002c82:	2300      	movne	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <MPU6050_PortI2C_Init>:
#include "string.h"

static I2C_HandleTypeDef hi2c3;

void MPU6050_PortI2C_Init()
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0

	hi2c3.Instance = I2C3;
 8002c94:	4b12      	ldr	r3, [pc, #72]	@ (8002ce0 <MPU6050_PortI2C_Init+0x50>)
 8002c96:	4a13      	ldr	r2, [pc, #76]	@ (8002ce4 <MPU6050_PortI2C_Init+0x54>)
 8002c98:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 8002c9a:	4b11      	ldr	r3, [pc, #68]	@ (8002ce0 <MPU6050_PortI2C_Init+0x50>)
 8002c9c:	4a12      	ldr	r2, [pc, #72]	@ (8002ce8 <MPU6050_PortI2C_Init+0x58>)
 8002c9e:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce0 <MPU6050_PortI2C_Init+0x50>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 8002ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce0 <MPU6050_PortI2C_Init+0x50>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002cac:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce0 <MPU6050_PortI2C_Init+0x50>)
 8002cae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002cb2:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce0 <MPU6050_PortI2C_Init+0x50>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 8002cba:	4b09      	ldr	r3, [pc, #36]	@ (8002ce0 <MPU6050_PortI2C_Init+0x50>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cc0:	4b07      	ldr	r3, [pc, #28]	@ (8002ce0 <MPU6050_PortI2C_Init+0x50>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cc6:	4b06      	ldr	r3, [pc, #24]	@ (8002ce0 <MPU6050_PortI2C_Init+0x50>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002ccc:	4804      	ldr	r0, [pc, #16]	@ (8002ce0 <MPU6050_PortI2C_Init+0x50>)
 8002cce:	f000 fba9 	bl	8003424 <HAL_I2C_Init>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <MPU6050_PortI2C_Init+0x4c>
	{
	  Error_Handler();
 8002cd8:	f7fe fbd2 	bl	8001480 <Error_Handler>
	}

}
 8002cdc:	bf00      	nop
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	20000318 	.word	0x20000318
 8002ce4:	40005c00 	.word	0x40005c00
 8002ce8:	000186a0 	.word	0x000186a0

08002cec <MPU6050_PortI2C_WriteRegister>:
	if (HAL_I2C_IsDeviceReady(&hi2c3, ADDRESS_MPU6050 << 1, 1, HAL_MAX_DELAY) != HAL_OK) Error_Handler();
}


void MPU6050_PortI2C_WriteRegister(uint8_t reg, uint8_t value, uint8_t MAX_SIZE)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af04      	add	r7, sp, #16
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	71fb      	strb	r3, [r7, #7]
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	71bb      	strb	r3, [r7, #6]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	717b      	strb	r3, [r7, #5]
	if(HAL_I2C_Mem_Write(&hi2c3, ADDRESS_MPU6050 << 1 , reg, MAX_SIZE, &value, MAX_SIZE, HAL_MAX_DELAY) != HAL_OK){
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	797b      	ldrb	r3, [r7, #5]
 8002d04:	b299      	uxth	r1, r3
 8002d06:	797b      	ldrb	r3, [r7, #5]
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8002d0e:	9002      	str	r0, [sp, #8]
 8002d10:	9301      	str	r3, [sp, #4]
 8002d12:	1dbb      	adds	r3, r7, #6
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	460b      	mov	r3, r1
 8002d18:	21d0      	movs	r1, #208	@ 0xd0
 8002d1a:	4807      	ldr	r0, [pc, #28]	@ (8002d38 <MPU6050_PortI2C_WriteRegister+0x4c>)
 8002d1c:	f000 fdc4 	bl	80038a8 <HAL_I2C_Mem_Write>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d004      	beq.n	8002d30 <MPU6050_PortI2C_WriteRegister+0x44>
		uartSendString((uint8_t*)"ERROR HANDLER MPU6050 WRITE!\r\n");
 8002d26:	4805      	ldr	r0, [pc, #20]	@ (8002d3c <MPU6050_PortI2C_WriteRegister+0x50>)
 8002d28:	f7fe fea6 	bl	8001a78 <uartSendString>
		Error_Handler();
 8002d2c:	f7fe fba8 	bl	8001480 <Error_Handler>
	}
}
 8002d30:	bf00      	nop
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	20000318 	.word	0x20000318
 8002d3c:	08009ccc 	.word	0x08009ccc

08002d40 <MPU6050_PortI2C_ReadRegister>:


void MPU6050_PortI2C_ReadRegister(uint8_t reg, uint8_t* buffer, uint8_t MAX_SIZE, uint8_t length)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af04      	add	r7, sp, #16
 8002d46:	6039      	str	r1, [r7, #0]
 8002d48:	4611      	mov	r1, r2
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	71fb      	strb	r3, [r7, #7]
 8002d50:	460b      	mov	r3, r1
 8002d52:	71bb      	strb	r3, [r7, #6]
 8002d54:	4613      	mov	r3, r2
 8002d56:	717b      	strb	r3, [r7, #5]
	if(HAL_I2C_Mem_Read(&hi2c3, ADDRESS_MPU6050 << 1 , reg, MAX_SIZE, buffer, length, HAL_MAX_DELAY) != HAL_OK){
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	79bb      	ldrb	r3, [r7, #6]
 8002d5e:	b299      	uxth	r1, r3
 8002d60:	797b      	ldrb	r3, [r7, #5]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	f04f 30ff 	mov.w	r0, #4294967295
 8002d68:	9002      	str	r0, [sp, #8]
 8002d6a:	9301      	str	r3, [sp, #4]
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	460b      	mov	r3, r1
 8002d72:	21d0      	movs	r1, #208	@ 0xd0
 8002d74:	4807      	ldr	r0, [pc, #28]	@ (8002d94 <MPU6050_PortI2C_ReadRegister+0x54>)
 8002d76:	f000 fe91 	bl	8003a9c <HAL_I2C_Mem_Read>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d004      	beq.n	8002d8a <MPU6050_PortI2C_ReadRegister+0x4a>
		uartSendString((uint8_t*)"ERROR HANDLER MPU6050 READ!\r\n");
 8002d80:	4805      	ldr	r0, [pc, #20]	@ (8002d98 <MPU6050_PortI2C_ReadRegister+0x58>)
 8002d82:	f7fe fe79 	bl	8001a78 <uartSendString>
		Error_Handler();
 8002d86:	f7fe fb7b 	bl	8001480 <Error_Handler>
	}

}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	20000318 	.word	0x20000318
 8002d98:	08009cec 	.word	0x08009cec

08002d9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002da0:	4b0e      	ldr	r3, [pc, #56]	@ (8002ddc <HAL_Init+0x40>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a0d      	ldr	r2, [pc, #52]	@ (8002ddc <HAL_Init+0x40>)
 8002da6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002daa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dac:	4b0b      	ldr	r3, [pc, #44]	@ (8002ddc <HAL_Init+0x40>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a0a      	ldr	r2, [pc, #40]	@ (8002ddc <HAL_Init+0x40>)
 8002db2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002db6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002db8:	4b08      	ldr	r3, [pc, #32]	@ (8002ddc <HAL_Init+0x40>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a07      	ldr	r2, [pc, #28]	@ (8002ddc <HAL_Init+0x40>)
 8002dbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dc4:	2003      	movs	r0, #3
 8002dc6:	f000 f931 	bl	800302c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dca:	2000      	movs	r0, #0
 8002dcc:	f000 f808 	bl	8002de0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dd0:	f7fe fb5c 	bl	800148c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40023c00 	.word	0x40023c00

08002de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002de8:	4b12      	ldr	r3, [pc, #72]	@ (8002e34 <HAL_InitTick+0x54>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4b12      	ldr	r3, [pc, #72]	@ (8002e38 <HAL_InitTick+0x58>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	4619      	mov	r1, r3
 8002df2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 f93b 	bl	800307a <HAL_SYSTICK_Config>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e00e      	b.n	8002e2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b0f      	cmp	r3, #15
 8002e12:	d80a      	bhi.n	8002e2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e14:	2200      	movs	r2, #0
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	f04f 30ff 	mov.w	r0, #4294967295
 8002e1c:	f000 f911 	bl	8003042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e20:	4a06      	ldr	r2, [pc, #24]	@ (8002e3c <HAL_InitTick+0x5c>)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	e000      	b.n	8002e2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	20000000 	.word	0x20000000
 8002e38:	20000008 	.word	0x20000008
 8002e3c:	20000004 	.word	0x20000004

08002e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e44:	4b06      	ldr	r3, [pc, #24]	@ (8002e60 <HAL_IncTick+0x20>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4b06      	ldr	r3, [pc, #24]	@ (8002e64 <HAL_IncTick+0x24>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4413      	add	r3, r2
 8002e50:	4a04      	ldr	r2, [pc, #16]	@ (8002e64 <HAL_IncTick+0x24>)
 8002e52:	6013      	str	r3, [r2, #0]
}
 8002e54:	bf00      	nop
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	20000008 	.word	0x20000008
 8002e64:	2000036c 	.word	0x2000036c

08002e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e6c:	4b03      	ldr	r3, [pc, #12]	@ (8002e7c <HAL_GetTick+0x14>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	2000036c 	.word	0x2000036c

08002e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e88:	f7ff ffee 	bl	8002e68 <HAL_GetTick>
 8002e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e98:	d005      	beq.n	8002ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec4 <HAL_Delay+0x44>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ea6:	bf00      	nop
 8002ea8:	f7ff ffde 	bl	8002e68 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d8f7      	bhi.n	8002ea8 <HAL_Delay+0x28>
  {
  }
}
 8002eb8:	bf00      	nop
 8002eba:	bf00      	nop
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000008 	.word	0x20000008

08002ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8002f0c <__NVIC_SetPriorityGrouping+0x44>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ef0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ef4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002efa:	4a04      	ldr	r2, [pc, #16]	@ (8002f0c <__NVIC_SetPriorityGrouping+0x44>)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	60d3      	str	r3, [r2, #12]
}
 8002f00:	bf00      	nop
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	e000ed00 	.word	0xe000ed00

08002f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f14:	4b04      	ldr	r3, [pc, #16]	@ (8002f28 <__NVIC_GetPriorityGrouping+0x18>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	0a1b      	lsrs	r3, r3, #8
 8002f1a:	f003 0307 	and.w	r3, r3, #7
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	6039      	str	r1, [r7, #0]
 8002f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	db0a      	blt.n	8002f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	490c      	ldr	r1, [pc, #48]	@ (8002f78 <__NVIC_SetPriority+0x4c>)
 8002f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4a:	0112      	lsls	r2, r2, #4
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	440b      	add	r3, r1
 8002f50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f54:	e00a      	b.n	8002f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	4908      	ldr	r1, [pc, #32]	@ (8002f7c <__NVIC_SetPriority+0x50>)
 8002f5c:	79fb      	ldrb	r3, [r7, #7]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	3b04      	subs	r3, #4
 8002f64:	0112      	lsls	r2, r2, #4
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	440b      	add	r3, r1
 8002f6a:	761a      	strb	r2, [r3, #24]
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	e000e100 	.word	0xe000e100
 8002f7c:	e000ed00 	.word	0xe000ed00

08002f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b089      	sub	sp, #36	@ 0x24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f1c3 0307 	rsb	r3, r3, #7
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	bf28      	it	cs
 8002f9e:	2304      	movcs	r3, #4
 8002fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	2b06      	cmp	r3, #6
 8002fa8:	d902      	bls.n	8002fb0 <NVIC_EncodePriority+0x30>
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	3b03      	subs	r3, #3
 8002fae:	e000      	b.n	8002fb2 <NVIC_EncodePriority+0x32>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43da      	mvns	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	401a      	ands	r2, r3
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd2:	43d9      	mvns	r1, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd8:	4313      	orrs	r3, r2
         );
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3724      	adds	r7, #36	@ 0x24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
	...

08002fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ff8:	d301      	bcc.n	8002ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e00f      	b.n	800301e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8003028 <SysTick_Config+0x40>)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3b01      	subs	r3, #1
 8003004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003006:	210f      	movs	r1, #15
 8003008:	f04f 30ff 	mov.w	r0, #4294967295
 800300c:	f7ff ff8e 	bl	8002f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003010:	4b05      	ldr	r3, [pc, #20]	@ (8003028 <SysTick_Config+0x40>)
 8003012:	2200      	movs	r2, #0
 8003014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003016:	4b04      	ldr	r3, [pc, #16]	@ (8003028 <SysTick_Config+0x40>)
 8003018:	2207      	movs	r2, #7
 800301a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	e000e010 	.word	0xe000e010

0800302c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7ff ff47 	bl	8002ec8 <__NVIC_SetPriorityGrouping>
}
 800303a:	bf00      	nop
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003042:	b580      	push	{r7, lr}
 8003044:	b086      	sub	sp, #24
 8003046:	af00      	add	r7, sp, #0
 8003048:	4603      	mov	r3, r0
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	607a      	str	r2, [r7, #4]
 800304e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003054:	f7ff ff5c 	bl	8002f10 <__NVIC_GetPriorityGrouping>
 8003058:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	6978      	ldr	r0, [r7, #20]
 8003060:	f7ff ff8e 	bl	8002f80 <NVIC_EncodePriority>
 8003064:	4602      	mov	r2, r0
 8003066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800306a:	4611      	mov	r1, r2
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff ff5d 	bl	8002f2c <__NVIC_SetPriority>
}
 8003072:	bf00      	nop
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7ff ffb0 	bl	8002fe8 <SysTick_Config>
 8003088:	4603      	mov	r3, r0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003094:	b480      	push	{r7}
 8003096:	b089      	sub	sp, #36	@ 0x24
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800309e:	2300      	movs	r3, #0
 80030a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030a6:	2300      	movs	r3, #0
 80030a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030aa:	2300      	movs	r3, #0
 80030ac:	61fb      	str	r3, [r7, #28]
 80030ae:	e165      	b.n	800337c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030b0:	2201      	movs	r2, #1
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	4013      	ands	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	f040 8154 	bne.w	8003376 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d005      	beq.n	80030e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d130      	bne.n	8003148 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	2203      	movs	r2, #3
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	43db      	mvns	r3, r3
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	4013      	ands	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4313      	orrs	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800311c:	2201      	movs	r2, #1
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4013      	ands	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	091b      	lsrs	r3, r3, #4
 8003132:	f003 0201 	and.w	r2, r3, #1
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 0303 	and.w	r3, r3, #3
 8003150:	2b03      	cmp	r3, #3
 8003152:	d017      	beq.n	8003184 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	2203      	movs	r2, #3
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4013      	ands	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f003 0303 	and.w	r3, r3, #3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d123      	bne.n	80031d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	08da      	lsrs	r2, r3, #3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3208      	adds	r2, #8
 8003198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800319c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	220f      	movs	r2, #15
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4013      	ands	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	691a      	ldr	r2, [r3, #16]
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	08da      	lsrs	r2, r3, #3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3208      	adds	r2, #8
 80031d2:	69b9      	ldr	r1, [r7, #24]
 80031d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	2203      	movs	r2, #3
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4013      	ands	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 0203 	and.w	r2, r3, #3
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4313      	orrs	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 80ae 	beq.w	8003376 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800321a:	2300      	movs	r3, #0
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	4b5d      	ldr	r3, [pc, #372]	@ (8003394 <HAL_GPIO_Init+0x300>)
 8003220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003222:	4a5c      	ldr	r2, [pc, #368]	@ (8003394 <HAL_GPIO_Init+0x300>)
 8003224:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003228:	6453      	str	r3, [r2, #68]	@ 0x44
 800322a:	4b5a      	ldr	r3, [pc, #360]	@ (8003394 <HAL_GPIO_Init+0x300>)
 800322c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003236:	4a58      	ldr	r2, [pc, #352]	@ (8003398 <HAL_GPIO_Init+0x304>)
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	089b      	lsrs	r3, r3, #2
 800323c:	3302      	adds	r3, #2
 800323e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003242:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	220f      	movs	r2, #15
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	43db      	mvns	r3, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4013      	ands	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a4f      	ldr	r2, [pc, #316]	@ (800339c <HAL_GPIO_Init+0x308>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d025      	beq.n	80032ae <HAL_GPIO_Init+0x21a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a4e      	ldr	r2, [pc, #312]	@ (80033a0 <HAL_GPIO_Init+0x30c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d01f      	beq.n	80032aa <HAL_GPIO_Init+0x216>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a4d      	ldr	r2, [pc, #308]	@ (80033a4 <HAL_GPIO_Init+0x310>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d019      	beq.n	80032a6 <HAL_GPIO_Init+0x212>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a4c      	ldr	r2, [pc, #304]	@ (80033a8 <HAL_GPIO_Init+0x314>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d013      	beq.n	80032a2 <HAL_GPIO_Init+0x20e>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a4b      	ldr	r2, [pc, #300]	@ (80033ac <HAL_GPIO_Init+0x318>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d00d      	beq.n	800329e <HAL_GPIO_Init+0x20a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a4a      	ldr	r2, [pc, #296]	@ (80033b0 <HAL_GPIO_Init+0x31c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d007      	beq.n	800329a <HAL_GPIO_Init+0x206>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a49      	ldr	r2, [pc, #292]	@ (80033b4 <HAL_GPIO_Init+0x320>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d101      	bne.n	8003296 <HAL_GPIO_Init+0x202>
 8003292:	2306      	movs	r3, #6
 8003294:	e00c      	b.n	80032b0 <HAL_GPIO_Init+0x21c>
 8003296:	2307      	movs	r3, #7
 8003298:	e00a      	b.n	80032b0 <HAL_GPIO_Init+0x21c>
 800329a:	2305      	movs	r3, #5
 800329c:	e008      	b.n	80032b0 <HAL_GPIO_Init+0x21c>
 800329e:	2304      	movs	r3, #4
 80032a0:	e006      	b.n	80032b0 <HAL_GPIO_Init+0x21c>
 80032a2:	2303      	movs	r3, #3
 80032a4:	e004      	b.n	80032b0 <HAL_GPIO_Init+0x21c>
 80032a6:	2302      	movs	r3, #2
 80032a8:	e002      	b.n	80032b0 <HAL_GPIO_Init+0x21c>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <HAL_GPIO_Init+0x21c>
 80032ae:	2300      	movs	r3, #0
 80032b0:	69fa      	ldr	r2, [r7, #28]
 80032b2:	f002 0203 	and.w	r2, r2, #3
 80032b6:	0092      	lsls	r2, r2, #2
 80032b8:	4093      	lsls	r3, r2
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4313      	orrs	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032c0:	4935      	ldr	r1, [pc, #212]	@ (8003398 <HAL_GPIO_Init+0x304>)
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	089b      	lsrs	r3, r3, #2
 80032c6:	3302      	adds	r3, #2
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032ce:	4b3a      	ldr	r3, [pc, #232]	@ (80033b8 <HAL_GPIO_Init+0x324>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	43db      	mvns	r3, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4013      	ands	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032f2:	4a31      	ldr	r2, [pc, #196]	@ (80033b8 <HAL_GPIO_Init+0x324>)
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032f8:	4b2f      	ldr	r3, [pc, #188]	@ (80033b8 <HAL_GPIO_Init+0x324>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	43db      	mvns	r3, r3
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	4013      	ands	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	4313      	orrs	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800331c:	4a26      	ldr	r2, [pc, #152]	@ (80033b8 <HAL_GPIO_Init+0x324>)
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003322:	4b25      	ldr	r3, [pc, #148]	@ (80033b8 <HAL_GPIO_Init+0x324>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	43db      	mvns	r3, r3
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	4013      	ands	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003346:	4a1c      	ldr	r2, [pc, #112]	@ (80033b8 <HAL_GPIO_Init+0x324>)
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800334c:	4b1a      	ldr	r3, [pc, #104]	@ (80033b8 <HAL_GPIO_Init+0x324>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	43db      	mvns	r3, r3
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4013      	ands	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003370:	4a11      	ldr	r2, [pc, #68]	@ (80033b8 <HAL_GPIO_Init+0x324>)
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	3301      	adds	r3, #1
 800337a:	61fb      	str	r3, [r7, #28]
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	2b0f      	cmp	r3, #15
 8003380:	f67f ae96 	bls.w	80030b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003384:	bf00      	nop
 8003386:	bf00      	nop
 8003388:	3724      	adds	r7, #36	@ 0x24
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	40023800 	.word	0x40023800
 8003398:	40013800 	.word	0x40013800
 800339c:	40020000 	.word	0x40020000
 80033a0:	40020400 	.word	0x40020400
 80033a4:	40020800 	.word	0x40020800
 80033a8:	40020c00 	.word	0x40020c00
 80033ac:	40021000 	.word	0x40021000
 80033b0:	40021400 	.word	0x40021400
 80033b4:	40021800 	.word	0x40021800
 80033b8:	40013c00 	.word	0x40013c00

080033bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	807b      	strh	r3, [r7, #2]
 80033c8:	4613      	mov	r3, r2
 80033ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033cc:	787b      	ldrb	r3, [r7, #1]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033d2:	887a      	ldrh	r2, [r7, #2]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033d8:	e003      	b.n	80033e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033da:	887b      	ldrh	r3, [r7, #2]
 80033dc:	041a      	lsls	r2, r3, #16
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	619a      	str	r2, [r3, #24]
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b085      	sub	sp, #20
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
 80033f6:	460b      	mov	r3, r1
 80033f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003400:	887a      	ldrh	r2, [r7, #2]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	4013      	ands	r3, r2
 8003406:	041a      	lsls	r2, r3, #16
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	43d9      	mvns	r1, r3
 800340c:	887b      	ldrh	r3, [r7, #2]
 800340e:	400b      	ands	r3, r1
 8003410:	431a      	orrs	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	619a      	str	r2, [r3, #24]
}
 8003416:	bf00      	nop
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
	...

08003424 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e12b      	b.n	800368e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d106      	bne.n	8003450 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7fe f846 	bl	80014dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2224      	movs	r2, #36	@ 0x24
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0201 	bic.w	r2, r2, #1
 8003466:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003476:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003486:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003488:	f001 fa62 	bl	8004950 <HAL_RCC_GetPCLK1Freq>
 800348c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	4a81      	ldr	r2, [pc, #516]	@ (8003698 <HAL_I2C_Init+0x274>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d807      	bhi.n	80034a8 <HAL_I2C_Init+0x84>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4a80      	ldr	r2, [pc, #512]	@ (800369c <HAL_I2C_Init+0x278>)
 800349c:	4293      	cmp	r3, r2
 800349e:	bf94      	ite	ls
 80034a0:	2301      	movls	r3, #1
 80034a2:	2300      	movhi	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	e006      	b.n	80034b6 <HAL_I2C_Init+0x92>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4a7d      	ldr	r2, [pc, #500]	@ (80036a0 <HAL_I2C_Init+0x27c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	bf94      	ite	ls
 80034b0:	2301      	movls	r3, #1
 80034b2:	2300      	movhi	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e0e7      	b.n	800368e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	4a78      	ldr	r2, [pc, #480]	@ (80036a4 <HAL_I2C_Init+0x280>)
 80034c2:	fba2 2303 	umull	r2, r3, r2, r3
 80034c6:	0c9b      	lsrs	r3, r3, #18
 80034c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	430a      	orrs	r2, r1
 80034dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	4a6a      	ldr	r2, [pc, #424]	@ (8003698 <HAL_I2C_Init+0x274>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d802      	bhi.n	80034f8 <HAL_I2C_Init+0xd4>
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	3301      	adds	r3, #1
 80034f6:	e009      	b.n	800350c <HAL_I2C_Init+0xe8>
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80034fe:	fb02 f303 	mul.w	r3, r2, r3
 8003502:	4a69      	ldr	r2, [pc, #420]	@ (80036a8 <HAL_I2C_Init+0x284>)
 8003504:	fba2 2303 	umull	r2, r3, r2, r3
 8003508:	099b      	lsrs	r3, r3, #6
 800350a:	3301      	adds	r3, #1
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	6812      	ldr	r2, [r2, #0]
 8003510:	430b      	orrs	r3, r1
 8003512:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800351e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	495c      	ldr	r1, [pc, #368]	@ (8003698 <HAL_I2C_Init+0x274>)
 8003528:	428b      	cmp	r3, r1
 800352a:	d819      	bhi.n	8003560 <HAL_I2C_Init+0x13c>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	1e59      	subs	r1, r3, #1
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	fbb1 f3f3 	udiv	r3, r1, r3
 800353a:	1c59      	adds	r1, r3, #1
 800353c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003540:	400b      	ands	r3, r1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <HAL_I2C_Init+0x138>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	1e59      	subs	r1, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	fbb1 f3f3 	udiv	r3, r1, r3
 8003554:	3301      	adds	r3, #1
 8003556:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800355a:	e051      	b.n	8003600 <HAL_I2C_Init+0x1dc>
 800355c:	2304      	movs	r3, #4
 800355e:	e04f      	b.n	8003600 <HAL_I2C_Init+0x1dc>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d111      	bne.n	800358c <HAL_I2C_Init+0x168>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	1e58      	subs	r0, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6859      	ldr	r1, [r3, #4]
 8003570:	460b      	mov	r3, r1
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	440b      	add	r3, r1
 8003576:	fbb0 f3f3 	udiv	r3, r0, r3
 800357a:	3301      	adds	r3, #1
 800357c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003580:	2b00      	cmp	r3, #0
 8003582:	bf0c      	ite	eq
 8003584:	2301      	moveq	r3, #1
 8003586:	2300      	movne	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	e012      	b.n	80035b2 <HAL_I2C_Init+0x18e>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	1e58      	subs	r0, r3, #1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6859      	ldr	r1, [r3, #4]
 8003594:	460b      	mov	r3, r1
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	0099      	lsls	r1, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	fbb0 f3f3 	udiv	r3, r0, r3
 80035a2:	3301      	adds	r3, #1
 80035a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	bf0c      	ite	eq
 80035ac:	2301      	moveq	r3, #1
 80035ae:	2300      	movne	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <HAL_I2C_Init+0x196>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e022      	b.n	8003600 <HAL_I2C_Init+0x1dc>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10e      	bne.n	80035e0 <HAL_I2C_Init+0x1bc>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	1e58      	subs	r0, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6859      	ldr	r1, [r3, #4]
 80035ca:	460b      	mov	r3, r1
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	440b      	add	r3, r1
 80035d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80035d4:	3301      	adds	r3, #1
 80035d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035de:	e00f      	b.n	8003600 <HAL_I2C_Init+0x1dc>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	1e58      	subs	r0, r3, #1
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6859      	ldr	r1, [r3, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	0099      	lsls	r1, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035f6:	3301      	adds	r3, #1
 80035f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	6809      	ldr	r1, [r1, #0]
 8003604:	4313      	orrs	r3, r2
 8003606:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69da      	ldr	r2, [r3, #28]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800362e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6911      	ldr	r1, [r2, #16]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	68d2      	ldr	r2, [r2, #12]
 800363a:	4311      	orrs	r1, r2
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6812      	ldr	r2, [r2, #0]
 8003640:	430b      	orrs	r3, r1
 8003642:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	695a      	ldr	r2, [r3, #20]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0201 	orr.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2220      	movs	r2, #32
 800367a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	000186a0 	.word	0x000186a0
 800369c:	001e847f 	.word	0x001e847f
 80036a0:	003d08ff 	.word	0x003d08ff
 80036a4:	431bde83 	.word	0x431bde83
 80036a8:	10624dd3 	.word	0x10624dd3

080036ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b088      	sub	sp, #32
 80036b0:	af02      	add	r7, sp, #8
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	607a      	str	r2, [r7, #4]
 80036b6:	461a      	mov	r2, r3
 80036b8:	460b      	mov	r3, r1
 80036ba:	817b      	strh	r3, [r7, #10]
 80036bc:	4613      	mov	r3, r2
 80036be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036c0:	f7ff fbd2 	bl	8002e68 <HAL_GetTick>
 80036c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b20      	cmp	r3, #32
 80036d0:	f040 80e0 	bne.w	8003894 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	2319      	movs	r3, #25
 80036da:	2201      	movs	r2, #1
 80036dc:	4970      	ldr	r1, [pc, #448]	@ (80038a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 fe0e 	bl	8004300 <I2C_WaitOnFlagUntilTimeout>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80036ea:	2302      	movs	r3, #2
 80036ec:	e0d3      	b.n	8003896 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d101      	bne.n	80036fc <HAL_I2C_Master_Transmit+0x50>
 80036f8:	2302      	movs	r3, #2
 80036fa:	e0cc      	b.n	8003896 <HAL_I2C_Master_Transmit+0x1ea>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b01      	cmp	r3, #1
 8003710:	d007      	beq.n	8003722 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f042 0201 	orr.w	r2, r2, #1
 8003720:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003730:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2221      	movs	r2, #33	@ 0x21
 8003736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2210      	movs	r2, #16
 800373e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	893a      	ldrh	r2, [r7, #8]
 8003752:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	4a50      	ldr	r2, [pc, #320]	@ (80038a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003762:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003764:	8979      	ldrh	r1, [r7, #10]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	6a3a      	ldr	r2, [r7, #32]
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 fbc8 	bl	8003f00 <I2C_MasterRequestWrite>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e08d      	b.n	8003896 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800377a:	2300      	movs	r3, #0
 800377c:	613b      	str	r3, [r7, #16]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	613b      	str	r3, [r7, #16]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	613b      	str	r3, [r7, #16]
 800378e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003790:	e066      	b.n	8003860 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	6a39      	ldr	r1, [r7, #32]
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 fecc 	bl	8004534 <I2C_WaitOnTXEFlagUntilTimeout>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00d      	beq.n	80037be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d107      	bne.n	80037ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e06b      	b.n	8003896 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c2:	781a      	ldrb	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d8:	b29b      	uxth	r3, r3
 80037da:	3b01      	subs	r3, #1
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d11b      	bne.n	8003834 <HAL_I2C_Master_Transmit+0x188>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003800:	2b00      	cmp	r3, #0
 8003802:	d017      	beq.n	8003834 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003808:	781a      	ldrb	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003814:	1c5a      	adds	r2, r3, #1
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800381e:	b29b      	uxth	r3, r3
 8003820:	3b01      	subs	r3, #1
 8003822:	b29a      	uxth	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	6a39      	ldr	r1, [r7, #32]
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 fec3 	bl	80045c4 <I2C_WaitOnBTFFlagUntilTimeout>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00d      	beq.n	8003860 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003848:	2b04      	cmp	r3, #4
 800384a:	d107      	bne.n	800385c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800385a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e01a      	b.n	8003896 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003864:	2b00      	cmp	r3, #0
 8003866:	d194      	bne.n	8003792 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003876:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	e000      	b.n	8003896 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003894:	2302      	movs	r3, #2
  }
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	00100002 	.word	0x00100002
 80038a4:	ffff0000 	.word	0xffff0000

080038a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b088      	sub	sp, #32
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	4608      	mov	r0, r1
 80038b2:	4611      	mov	r1, r2
 80038b4:	461a      	mov	r2, r3
 80038b6:	4603      	mov	r3, r0
 80038b8:	817b      	strh	r3, [r7, #10]
 80038ba:	460b      	mov	r3, r1
 80038bc:	813b      	strh	r3, [r7, #8]
 80038be:	4613      	mov	r3, r2
 80038c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038c2:	f7ff fad1 	bl	8002e68 <HAL_GetTick>
 80038c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	f040 80d9 	bne.w	8003a88 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	2319      	movs	r3, #25
 80038dc:	2201      	movs	r2, #1
 80038de:	496d      	ldr	r1, [pc, #436]	@ (8003a94 <HAL_I2C_Mem_Write+0x1ec>)
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 fd0d 	bl	8004300 <I2C_WaitOnFlagUntilTimeout>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80038ec:	2302      	movs	r3, #2
 80038ee:	e0cc      	b.n	8003a8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d101      	bne.n	80038fe <HAL_I2C_Mem_Write+0x56>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e0c5      	b.n	8003a8a <HAL_I2C_Mem_Write+0x1e2>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b01      	cmp	r3, #1
 8003912:	d007      	beq.n	8003924 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 0201 	orr.w	r2, r2, #1
 8003922:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003932:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2221      	movs	r2, #33	@ 0x21
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2240      	movs	r2, #64	@ 0x40
 8003940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6a3a      	ldr	r2, [r7, #32]
 800394e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003954:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800395a:	b29a      	uxth	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4a4d      	ldr	r2, [pc, #308]	@ (8003a98 <HAL_I2C_Mem_Write+0x1f0>)
 8003964:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003966:	88f8      	ldrh	r0, [r7, #6]
 8003968:	893a      	ldrh	r2, [r7, #8]
 800396a:	8979      	ldrh	r1, [r7, #10]
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	9301      	str	r3, [sp, #4]
 8003970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	4603      	mov	r3, r0
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f000 fb44 	bl	8004004 <I2C_RequestMemoryWrite>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d052      	beq.n	8003a28 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e081      	b.n	8003a8a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 fdd2 	bl	8004534 <I2C_WaitOnTXEFlagUntilTimeout>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00d      	beq.n	80039b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399a:	2b04      	cmp	r3, #4
 800399c:	d107      	bne.n	80039ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e06b      	b.n	8003a8a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b6:	781a      	ldrb	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c2:	1c5a      	adds	r2, r3, #1
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d8:	b29b      	uxth	r3, r3
 80039da:	3b01      	subs	r3, #1
 80039dc:	b29a      	uxth	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b04      	cmp	r3, #4
 80039ee:	d11b      	bne.n	8003a28 <HAL_I2C_Mem_Write+0x180>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d017      	beq.n	8003a28 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fc:	781a      	ldrb	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1aa      	bne.n	8003986 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 fdc5 	bl	80045c4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00d      	beq.n	8003a5c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a44:	2b04      	cmp	r3, #4
 8003a46:	d107      	bne.n	8003a58 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a56:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e016      	b.n	8003a8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a84:	2300      	movs	r3, #0
 8003a86:	e000      	b.n	8003a8a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003a88:	2302      	movs	r3, #2
  }
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3718      	adds	r7, #24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	00100002 	.word	0x00100002
 8003a98:	ffff0000 	.word	0xffff0000

08003a9c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b08c      	sub	sp, #48	@ 0x30
 8003aa0:	af02      	add	r7, sp, #8
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	4608      	mov	r0, r1
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4603      	mov	r3, r0
 8003aac:	817b      	strh	r3, [r7, #10]
 8003aae:	460b      	mov	r3, r1
 8003ab0:	813b      	strh	r3, [r7, #8]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ab6:	f7ff f9d7 	bl	8002e68 <HAL_GetTick>
 8003aba:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b20      	cmp	r3, #32
 8003ac6:	f040 8214 	bne.w	8003ef2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	2319      	movs	r3, #25
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	497b      	ldr	r1, [pc, #492]	@ (8003cc0 <HAL_I2C_Mem_Read+0x224>)
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 fc13 	bl	8004300 <I2C_WaitOnFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	e207      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d101      	bne.n	8003af2 <HAL_I2C_Mem_Read+0x56>
 8003aee:	2302      	movs	r3, #2
 8003af0:	e200      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x458>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d007      	beq.n	8003b18 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0201 	orr.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2222      	movs	r2, #34	@ 0x22
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2240      	movs	r2, #64	@ 0x40
 8003b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003b48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4a5b      	ldr	r2, [pc, #364]	@ (8003cc4 <HAL_I2C_Mem_Read+0x228>)
 8003b58:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b5a:	88f8      	ldrh	r0, [r7, #6]
 8003b5c:	893a      	ldrh	r2, [r7, #8]
 8003b5e:	8979      	ldrh	r1, [r7, #10]
 8003b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b62:	9301      	str	r3, [sp, #4]
 8003b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	4603      	mov	r3, r0
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 fae0 	bl	8004130 <I2C_RequestMemoryRead>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e1bc      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d113      	bne.n	8003baa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b82:	2300      	movs	r3, #0
 8003b84:	623b      	str	r3, [r7, #32]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	623b      	str	r3, [r7, #32]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	623b      	str	r3, [r7, #32]
 8003b96:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	e190      	b.n	8003ecc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d11b      	bne.n	8003bea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61fb      	str	r3, [r7, #28]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	61fb      	str	r3, [r7, #28]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	61fb      	str	r3, [r7, #28]
 8003bd6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	e170      	b.n	8003ecc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d11b      	bne.n	8003c2a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c00:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c12:	2300      	movs	r3, #0
 8003c14:	61bb      	str	r3, [r7, #24]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	61bb      	str	r3, [r7, #24]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	61bb      	str	r3, [r7, #24]
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	e150      	b.n	8003ecc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	617b      	str	r3, [r7, #20]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	617b      	str	r3, [r7, #20]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c40:	e144      	b.n	8003ecc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	f200 80f1 	bhi.w	8003e2e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d123      	bne.n	8003c9c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c56:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 fcfb 	bl	8004654 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e145      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c72:	b2d2      	uxtb	r2, r2
 8003c74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c9a:	e117      	b.n	8003ecc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d14e      	bne.n	8003d42 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003caa:	2200      	movs	r2, #0
 8003cac:	4906      	ldr	r1, [pc, #24]	@ (8003cc8 <HAL_I2C_Mem_Read+0x22c>)
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 fb26 	bl	8004300 <I2C_WaitOnFlagUntilTimeout>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d008      	beq.n	8003ccc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e11a      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x458>
 8003cbe:	bf00      	nop
 8003cc0:	00100002 	.word	0x00100002
 8003cc4:	ffff0000 	.word	0xffff0000
 8003cc8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	691a      	ldr	r2, [r3, #16]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cee:	1c5a      	adds	r2, r3, #1
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	691a      	ldr	r2, [r3, #16]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d18:	b2d2      	uxtb	r2, r2
 8003d1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d20:	1c5a      	adds	r2, r3, #1
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d40:	e0c4      	b.n	8003ecc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d48:	2200      	movs	r2, #0
 8003d4a:	496c      	ldr	r1, [pc, #432]	@ (8003efc <HAL_I2C_Mem_Read+0x460>)
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 fad7 	bl	8004300 <I2C_WaitOnFlagUntilTimeout>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e0cb      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	691a      	ldr	r2, [r3, #16]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d76:	b2d2      	uxtb	r2, r2
 8003d78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003da4:	2200      	movs	r2, #0
 8003da6:	4955      	ldr	r1, [pc, #340]	@ (8003efc <HAL_I2C_Mem_Read+0x460>)
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 faa9 	bl	8004300 <I2C_WaitOnFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e09d      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	691a      	ldr	r2, [r3, #16]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	691a      	ldr	r2, [r3, #16]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e2c:	e04e      	b.n	8003ecc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e30:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 fc0e 	bl	8004654 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e058      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e54:	1c5a      	adds	r2, r3, #1
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	f003 0304 	and.w	r3, r3, #4
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d124      	bne.n	8003ecc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e86:	2b03      	cmp	r3, #3
 8003e88:	d107      	bne.n	8003e9a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e98:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f47f aeb6 	bne.w	8003c42 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	e000      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003ef2:	2302      	movs	r3, #2
  }
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3728      	adds	r7, #40	@ 0x28
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	00010004 	.word	0x00010004

08003f00 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af02      	add	r7, sp, #8
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	607a      	str	r2, [r7, #4]
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f14:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d006      	beq.n	8003f2a <I2C_MasterRequestWrite+0x2a>
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d003      	beq.n	8003f2a <I2C_MasterRequestWrite+0x2a>
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f28:	d108      	bne.n	8003f3c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	e00b      	b.n	8003f54 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f40:	2b12      	cmp	r3, #18
 8003f42:	d107      	bne.n	8003f54 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 f9cd 	bl	8004300 <I2C_WaitOnFlagUntilTimeout>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00d      	beq.n	8003f88 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f7a:	d103      	bne.n	8003f84 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f82:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e035      	b.n	8003ff4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f90:	d108      	bne.n	8003fa4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f92:	897b      	ldrh	r3, [r7, #10]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	461a      	mov	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003fa0:	611a      	str	r2, [r3, #16]
 8003fa2:	e01b      	b.n	8003fdc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003fa4:	897b      	ldrh	r3, [r7, #10]
 8003fa6:	11db      	asrs	r3, r3, #7
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	f003 0306 	and.w	r3, r3, #6
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	f063 030f 	orn	r3, r3, #15
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	490e      	ldr	r1, [pc, #56]	@ (8003ffc <I2C_MasterRequestWrite+0xfc>)
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 fa16 	bl	80043f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e010      	b.n	8003ff4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003fd2:	897b      	ldrh	r3, [r7, #10]
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	4907      	ldr	r1, [pc, #28]	@ (8004000 <I2C_MasterRequestWrite+0x100>)
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 fa06 	bl	80043f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e000      	b.n	8003ff4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3718      	adds	r7, #24
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	00010008 	.word	0x00010008
 8004000:	00010002 	.word	0x00010002

08004004 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af02      	add	r7, sp, #8
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	4608      	mov	r0, r1
 800400e:	4611      	mov	r1, r2
 8004010:	461a      	mov	r2, r3
 8004012:	4603      	mov	r3, r0
 8004014:	817b      	strh	r3, [r7, #10]
 8004016:	460b      	mov	r3, r1
 8004018:	813b      	strh	r3, [r7, #8]
 800401a:	4613      	mov	r3, r2
 800401c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800402c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800402e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	2200      	movs	r2, #0
 8004036:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 f960 	bl	8004300 <I2C_WaitOnFlagUntilTimeout>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00d      	beq.n	8004062 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004050:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004054:	d103      	bne.n	800405e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800405c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e05f      	b.n	8004122 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004062:	897b      	ldrh	r3, [r7, #10]
 8004064:	b2db      	uxtb	r3, r3
 8004066:	461a      	mov	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004070:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004074:	6a3a      	ldr	r2, [r7, #32]
 8004076:	492d      	ldr	r1, [pc, #180]	@ (800412c <I2C_RequestMemoryWrite+0x128>)
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 f9bb 	bl	80043f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e04c      	b.n	8004122 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004088:	2300      	movs	r3, #0
 800408a:	617b      	str	r3, [r7, #20]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	617b      	str	r3, [r7, #20]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800409e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040a0:	6a39      	ldr	r1, [r7, #32]
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 fa46 	bl	8004534 <I2C_WaitOnTXEFlagUntilTimeout>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00d      	beq.n	80040ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d107      	bne.n	80040c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e02b      	b.n	8004122 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040ca:	88fb      	ldrh	r3, [r7, #6]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d105      	bne.n	80040dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040d0:	893b      	ldrh	r3, [r7, #8]
 80040d2:	b2da      	uxtb	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	611a      	str	r2, [r3, #16]
 80040da:	e021      	b.n	8004120 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80040dc:	893b      	ldrh	r3, [r7, #8]
 80040de:	0a1b      	lsrs	r3, r3, #8
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ec:	6a39      	ldr	r1, [r7, #32]
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 fa20 	bl	8004534 <I2C_WaitOnTXEFlagUntilTimeout>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00d      	beq.n	8004116 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fe:	2b04      	cmp	r3, #4
 8004100:	d107      	bne.n	8004112 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004110:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e005      	b.n	8004122 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004116:	893b      	ldrh	r3, [r7, #8]
 8004118:	b2da      	uxtb	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3718      	adds	r7, #24
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	00010002 	.word	0x00010002

08004130 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b088      	sub	sp, #32
 8004134:	af02      	add	r7, sp, #8
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	4608      	mov	r0, r1
 800413a:	4611      	mov	r1, r2
 800413c:	461a      	mov	r2, r3
 800413e:	4603      	mov	r3, r0
 8004140:	817b      	strh	r3, [r7, #10]
 8004142:	460b      	mov	r3, r1
 8004144:	813b      	strh	r3, [r7, #8]
 8004146:	4613      	mov	r3, r2
 8004148:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004158:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004168:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800416a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	2200      	movs	r2, #0
 8004172:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 f8c2 	bl	8004300 <I2C_WaitOnFlagUntilTimeout>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00d      	beq.n	800419e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800418c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004190:	d103      	bne.n	800419a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004198:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e0aa      	b.n	80042f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800419e:	897b      	ldrh	r3, [r7, #10]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	461a      	mov	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80041ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b0:	6a3a      	ldr	r2, [r7, #32]
 80041b2:	4952      	ldr	r1, [pc, #328]	@ (80042fc <I2C_RequestMemoryRead+0x1cc>)
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 f91d 	bl	80043f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e097      	b.n	80042f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c4:	2300      	movs	r3, #0
 80041c6:	617b      	str	r3, [r7, #20]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	617b      	str	r3, [r7, #20]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041dc:	6a39      	ldr	r1, [r7, #32]
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 f9a8 	bl	8004534 <I2C_WaitOnTXEFlagUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00d      	beq.n	8004206 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d107      	bne.n	8004202 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004200:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e076      	b.n	80042f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004206:	88fb      	ldrh	r3, [r7, #6]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d105      	bne.n	8004218 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800420c:	893b      	ldrh	r3, [r7, #8]
 800420e:	b2da      	uxtb	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	611a      	str	r2, [r3, #16]
 8004216:	e021      	b.n	800425c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004218:	893b      	ldrh	r3, [r7, #8]
 800421a:	0a1b      	lsrs	r3, r3, #8
 800421c:	b29b      	uxth	r3, r3
 800421e:	b2da      	uxtb	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004228:	6a39      	ldr	r1, [r7, #32]
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 f982 	bl	8004534 <I2C_WaitOnTXEFlagUntilTimeout>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00d      	beq.n	8004252 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423a:	2b04      	cmp	r3, #4
 800423c:	d107      	bne.n	800424e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800424c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e050      	b.n	80042f4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004252:	893b      	ldrh	r3, [r7, #8]
 8004254:	b2da      	uxtb	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800425c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800425e:	6a39      	ldr	r1, [r7, #32]
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 f967 	bl	8004534 <I2C_WaitOnTXEFlagUntilTimeout>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00d      	beq.n	8004288 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004270:	2b04      	cmp	r3, #4
 8004272:	d107      	bne.n	8004284 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004282:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e035      	b.n	80042f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004296:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	2200      	movs	r2, #0
 80042a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 f82b 	bl	8004300 <I2C_WaitOnFlagUntilTimeout>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00d      	beq.n	80042cc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042be:	d103      	bne.n	80042c8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e013      	b.n	80042f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042cc:	897b      	ldrh	r3, [r7, #10]
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	f043 0301 	orr.w	r3, r3, #1
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042de:	6a3a      	ldr	r2, [r7, #32]
 80042e0:	4906      	ldr	r1, [pc, #24]	@ (80042fc <I2C_RequestMemoryRead+0x1cc>)
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 f886 	bl	80043f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e000      	b.n	80042f4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3718      	adds	r7, #24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	00010002 	.word	0x00010002

08004300 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	603b      	str	r3, [r7, #0]
 800430c:	4613      	mov	r3, r2
 800430e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004310:	e048      	b.n	80043a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004318:	d044      	beq.n	80043a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800431a:	f7fe fda5 	bl	8002e68 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	429a      	cmp	r2, r3
 8004328:	d302      	bcc.n	8004330 <I2C_WaitOnFlagUntilTimeout+0x30>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d139      	bne.n	80043a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	0c1b      	lsrs	r3, r3, #16
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b01      	cmp	r3, #1
 8004338:	d10d      	bne.n	8004356 <I2C_WaitOnFlagUntilTimeout+0x56>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	43da      	mvns	r2, r3
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	4013      	ands	r3, r2
 8004346:	b29b      	uxth	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	bf0c      	ite	eq
 800434c:	2301      	moveq	r3, #1
 800434e:	2300      	movne	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	461a      	mov	r2, r3
 8004354:	e00c      	b.n	8004370 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	43da      	mvns	r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	4013      	ands	r3, r2
 8004362:	b29b      	uxth	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	bf0c      	ite	eq
 8004368:	2301      	moveq	r3, #1
 800436a:	2300      	movne	r3, #0
 800436c:	b2db      	uxtb	r3, r3
 800436e:	461a      	mov	r2, r3
 8004370:	79fb      	ldrb	r3, [r7, #7]
 8004372:	429a      	cmp	r2, r3
 8004374:	d116      	bne.n	80043a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2220      	movs	r2, #32
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004390:	f043 0220 	orr.w	r2, r3, #32
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e023      	b.n	80043ec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	0c1b      	lsrs	r3, r3, #16
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d10d      	bne.n	80043ca <I2C_WaitOnFlagUntilTimeout+0xca>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	43da      	mvns	r2, r3
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	4013      	ands	r3, r2
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	bf0c      	ite	eq
 80043c0:	2301      	moveq	r3, #1
 80043c2:	2300      	movne	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	461a      	mov	r2, r3
 80043c8:	e00c      	b.n	80043e4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	43da      	mvns	r2, r3
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	4013      	ands	r3, r2
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	bf0c      	ite	eq
 80043dc:	2301      	moveq	r3, #1
 80043de:	2300      	movne	r3, #0
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	461a      	mov	r2, r3
 80043e4:	79fb      	ldrb	r3, [r7, #7]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d093      	beq.n	8004312 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
 8004400:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004402:	e071      	b.n	80044e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800440e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004412:	d123      	bne.n	800445c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004422:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800442c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2220      	movs	r2, #32
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004448:	f043 0204 	orr.w	r2, r3, #4
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e067      	b.n	800452c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004462:	d041      	beq.n	80044e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004464:	f7fe fd00 	bl	8002e68 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	429a      	cmp	r2, r3
 8004472:	d302      	bcc.n	800447a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d136      	bne.n	80044e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	0c1b      	lsrs	r3, r3, #16
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b01      	cmp	r3, #1
 8004482:	d10c      	bne.n	800449e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	43da      	mvns	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	4013      	ands	r3, r2
 8004490:	b29b      	uxth	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	bf14      	ite	ne
 8004496:	2301      	movne	r3, #1
 8004498:	2300      	moveq	r3, #0
 800449a:	b2db      	uxtb	r3, r3
 800449c:	e00b      	b.n	80044b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	43da      	mvns	r2, r3
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	4013      	ands	r3, r2
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	bf14      	ite	ne
 80044b0:	2301      	movne	r3, #1
 80044b2:	2300      	moveq	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d016      	beq.n	80044e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d4:	f043 0220 	orr.w	r2, r3, #32
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e021      	b.n	800452c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	0c1b      	lsrs	r3, r3, #16
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d10c      	bne.n	800450c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	43da      	mvns	r2, r3
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	4013      	ands	r3, r2
 80044fe:	b29b      	uxth	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	bf14      	ite	ne
 8004504:	2301      	movne	r3, #1
 8004506:	2300      	moveq	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	e00b      	b.n	8004524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	43da      	mvns	r2, r3
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	4013      	ands	r3, r2
 8004518:	b29b      	uxth	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	bf14      	ite	ne
 800451e:	2301      	movne	r3, #1
 8004520:	2300      	moveq	r3, #0
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	f47f af6d 	bne.w	8004404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004540:	e034      	b.n	80045ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f8e3 	bl	800470e <I2C_IsAcknowledgeFailed>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e034      	b.n	80045bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004558:	d028      	beq.n	80045ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800455a:	f7fe fc85 	bl	8002e68 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	429a      	cmp	r2, r3
 8004568:	d302      	bcc.n	8004570 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d11d      	bne.n	80045ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800457a:	2b80      	cmp	r3, #128	@ 0x80
 800457c:	d016      	beq.n	80045ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004598:	f043 0220 	orr.w	r2, r3, #32
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e007      	b.n	80045bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045b6:	2b80      	cmp	r3, #128	@ 0x80
 80045b8:	d1c3      	bne.n	8004542 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045d0:	e034      	b.n	800463c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f000 f89b 	bl	800470e <I2C_IsAcknowledgeFailed>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e034      	b.n	800464c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e8:	d028      	beq.n	800463c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ea:	f7fe fc3d 	bl	8002e68 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d302      	bcc.n	8004600 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d11d      	bne.n	800463c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	f003 0304 	and.w	r3, r3, #4
 800460a:	2b04      	cmp	r3, #4
 800460c:	d016      	beq.n	800463c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2220      	movs	r2, #32
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004628:	f043 0220 	orr.w	r2, r3, #32
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e007      	b.n	800464c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	f003 0304 	and.w	r3, r3, #4
 8004646:	2b04      	cmp	r3, #4
 8004648:	d1c3      	bne.n	80045d2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004660:	e049      	b.n	80046f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	f003 0310 	and.w	r3, r3, #16
 800466c:	2b10      	cmp	r3, #16
 800466e:	d119      	bne.n	80046a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f06f 0210 	mvn.w	r2, #16
 8004678:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2220      	movs	r2, #32
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e030      	b.n	8004706 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a4:	f7fe fbe0 	bl	8002e68 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d302      	bcc.n	80046ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d11d      	bne.n	80046f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046c4:	2b40      	cmp	r3, #64	@ 0x40
 80046c6:	d016      	beq.n	80046f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e2:	f043 0220 	orr.w	r2, r3, #32
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e007      	b.n	8004706 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004700:	2b40      	cmp	r3, #64	@ 0x40
 8004702:	d1ae      	bne.n	8004662 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800470e:	b480      	push	{r7}
 8004710:	b083      	sub	sp, #12
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004720:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004724:	d11b      	bne.n	800475e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800472e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2220      	movs	r2, #32
 800473a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474a:	f043 0204 	orr.w	r2, r3, #4
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e000      	b.n	8004760 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e0cc      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004780:	4b68      	ldr	r3, [pc, #416]	@ (8004924 <HAL_RCC_ClockConfig+0x1b8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 030f 	and.w	r3, r3, #15
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d90c      	bls.n	80047a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478e:	4b65      	ldr	r3, [pc, #404]	@ (8004924 <HAL_RCC_ClockConfig+0x1b8>)
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	b2d2      	uxtb	r2, r2
 8004794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004796:	4b63      	ldr	r3, [pc, #396]	@ (8004924 <HAL_RCC_ClockConfig+0x1b8>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 030f 	and.w	r3, r3, #15
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d001      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e0b8      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d020      	beq.n	80047f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d005      	beq.n	80047cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047c0:	4b59      	ldr	r3, [pc, #356]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	4a58      	ldr	r2, [pc, #352]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80047c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0308 	and.w	r3, r3, #8
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d005      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047d8:	4b53      	ldr	r3, [pc, #332]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	4a52      	ldr	r2, [pc, #328]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80047de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80047e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047e4:	4b50      	ldr	r3, [pc, #320]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	494d      	ldr	r1, [pc, #308]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d044      	beq.n	800488c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d107      	bne.n	800481a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480a:	4b47      	ldr	r3, [pc, #284]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d119      	bne.n	800484a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e07f      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2b02      	cmp	r3, #2
 8004820:	d003      	beq.n	800482a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004826:	2b03      	cmp	r3, #3
 8004828:	d107      	bne.n	800483a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800482a:	4b3f      	ldr	r3, [pc, #252]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d109      	bne.n	800484a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e06f      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800483a:	4b3b      	ldr	r3, [pc, #236]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e067      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800484a:	4b37      	ldr	r3, [pc, #220]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f023 0203 	bic.w	r2, r3, #3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	4934      	ldr	r1, [pc, #208]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 8004858:	4313      	orrs	r3, r2
 800485a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800485c:	f7fe fb04 	bl	8002e68 <HAL_GetTick>
 8004860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004862:	e00a      	b.n	800487a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004864:	f7fe fb00 	bl	8002e68 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004872:	4293      	cmp	r3, r2
 8004874:	d901      	bls.n	800487a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e04f      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800487a:	4b2b      	ldr	r3, [pc, #172]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 020c 	and.w	r2, r3, #12
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	429a      	cmp	r2, r3
 800488a:	d1eb      	bne.n	8004864 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800488c:	4b25      	ldr	r3, [pc, #148]	@ (8004924 <HAL_RCC_ClockConfig+0x1b8>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 030f 	and.w	r3, r3, #15
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d20c      	bcs.n	80048b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489a:	4b22      	ldr	r3, [pc, #136]	@ (8004924 <HAL_RCC_ClockConfig+0x1b8>)
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a2:	4b20      	ldr	r3, [pc, #128]	@ (8004924 <HAL_RCC_ClockConfig+0x1b8>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 030f 	and.w	r3, r3, #15
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d001      	beq.n	80048b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e032      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d008      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048c0:	4b19      	ldr	r3, [pc, #100]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	4916      	ldr	r1, [pc, #88]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d009      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048de:	4b12      	ldr	r3, [pc, #72]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	490e      	ldr	r1, [pc, #56]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048f2:	f000 f855 	bl	80049a0 <HAL_RCC_GetSysClockFreq>
 80048f6:	4602      	mov	r2, r0
 80048f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	091b      	lsrs	r3, r3, #4
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	490a      	ldr	r1, [pc, #40]	@ (800492c <HAL_RCC_ClockConfig+0x1c0>)
 8004904:	5ccb      	ldrb	r3, [r1, r3]
 8004906:	fa22 f303 	lsr.w	r3, r2, r3
 800490a:	4a09      	ldr	r2, [pc, #36]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 800490c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800490e:	4b09      	ldr	r3, [pc, #36]	@ (8004934 <HAL_RCC_ClockConfig+0x1c8>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4618      	mov	r0, r3
 8004914:	f7fe fa64 	bl	8002de0 <HAL_InitTick>

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	40023c00 	.word	0x40023c00
 8004928:	40023800 	.word	0x40023800
 800492c:	08009d0c 	.word	0x08009d0c
 8004930:	20000000 	.word	0x20000000
 8004934:	20000004 	.word	0x20000004

08004938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800493c:	4b03      	ldr	r3, [pc, #12]	@ (800494c <HAL_RCC_GetHCLKFreq+0x14>)
 800493e:	681b      	ldr	r3, [r3, #0]
}
 8004940:	4618      	mov	r0, r3
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	20000000 	.word	0x20000000

08004950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004954:	f7ff fff0 	bl	8004938 <HAL_RCC_GetHCLKFreq>
 8004958:	4602      	mov	r2, r0
 800495a:	4b05      	ldr	r3, [pc, #20]	@ (8004970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	0a9b      	lsrs	r3, r3, #10
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	4903      	ldr	r1, [pc, #12]	@ (8004974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004966:	5ccb      	ldrb	r3, [r1, r3]
 8004968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800496c:	4618      	mov	r0, r3
 800496e:	bd80      	pop	{r7, pc}
 8004970:	40023800 	.word	0x40023800
 8004974:	08009d1c 	.word	0x08009d1c

08004978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800497c:	f7ff ffdc 	bl	8004938 <HAL_RCC_GetHCLKFreq>
 8004980:	4602      	mov	r2, r0
 8004982:	4b05      	ldr	r3, [pc, #20]	@ (8004998 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	0b5b      	lsrs	r3, r3, #13
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	4903      	ldr	r1, [pc, #12]	@ (800499c <HAL_RCC_GetPCLK2Freq+0x24>)
 800498e:	5ccb      	ldrb	r3, [r1, r3]
 8004990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004994:	4618      	mov	r0, r3
 8004996:	bd80      	pop	{r7, pc}
 8004998:	40023800 	.word	0x40023800
 800499c:	08009d1c 	.word	0x08009d1c

080049a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049a4:	b0ae      	sub	sp, #184	@ 0xb8
 80049a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80049a8:	2300      	movs	r3, #0
 80049aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80049c0:	2300      	movs	r3, #0
 80049c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049c6:	4bcb      	ldr	r3, [pc, #812]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 030c 	and.w	r3, r3, #12
 80049ce:	2b0c      	cmp	r3, #12
 80049d0:	f200 8206 	bhi.w	8004de0 <HAL_RCC_GetSysClockFreq+0x440>
 80049d4:	a201      	add	r2, pc, #4	@ (adr r2, 80049dc <HAL_RCC_GetSysClockFreq+0x3c>)
 80049d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049da:	bf00      	nop
 80049dc:	08004a11 	.word	0x08004a11
 80049e0:	08004de1 	.word	0x08004de1
 80049e4:	08004de1 	.word	0x08004de1
 80049e8:	08004de1 	.word	0x08004de1
 80049ec:	08004a19 	.word	0x08004a19
 80049f0:	08004de1 	.word	0x08004de1
 80049f4:	08004de1 	.word	0x08004de1
 80049f8:	08004de1 	.word	0x08004de1
 80049fc:	08004a21 	.word	0x08004a21
 8004a00:	08004de1 	.word	0x08004de1
 8004a04:	08004de1 	.word	0x08004de1
 8004a08:	08004de1 	.word	0x08004de1
 8004a0c:	08004c11 	.word	0x08004c11
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a10:	4bb9      	ldr	r3, [pc, #740]	@ (8004cf8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004a12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a16:	e1e7      	b.n	8004de8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a18:	4bb8      	ldr	r3, [pc, #736]	@ (8004cfc <HAL_RCC_GetSysClockFreq+0x35c>)
 8004a1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a1e:	e1e3      	b.n	8004de8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a20:	4bb4      	ldr	r3, [pc, #720]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a2c:	4bb1      	ldr	r3, [pc, #708]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d071      	beq.n	8004b1c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a38:	4bae      	ldr	r3, [pc, #696]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	099b      	lsrs	r3, r3, #6
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a44:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004a48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a54:	2300      	movs	r3, #0
 8004a56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004a5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004a5e:	4622      	mov	r2, r4
 8004a60:	462b      	mov	r3, r5
 8004a62:	f04f 0000 	mov.w	r0, #0
 8004a66:	f04f 0100 	mov.w	r1, #0
 8004a6a:	0159      	lsls	r1, r3, #5
 8004a6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a70:	0150      	lsls	r0, r2, #5
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	4621      	mov	r1, r4
 8004a78:	1a51      	subs	r1, r2, r1
 8004a7a:	6439      	str	r1, [r7, #64]	@ 0x40
 8004a7c:	4629      	mov	r1, r5
 8004a7e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a82:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a84:	f04f 0200 	mov.w	r2, #0
 8004a88:	f04f 0300 	mov.w	r3, #0
 8004a8c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004a90:	4649      	mov	r1, r9
 8004a92:	018b      	lsls	r3, r1, #6
 8004a94:	4641      	mov	r1, r8
 8004a96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a9a:	4641      	mov	r1, r8
 8004a9c:	018a      	lsls	r2, r1, #6
 8004a9e:	4641      	mov	r1, r8
 8004aa0:	1a51      	subs	r1, r2, r1
 8004aa2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004aa4:	4649      	mov	r1, r9
 8004aa6:	eb63 0301 	sbc.w	r3, r3, r1
 8004aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004aac:	f04f 0200 	mov.w	r2, #0
 8004ab0:	f04f 0300 	mov.w	r3, #0
 8004ab4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004ab8:	4649      	mov	r1, r9
 8004aba:	00cb      	lsls	r3, r1, #3
 8004abc:	4641      	mov	r1, r8
 8004abe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ac2:	4641      	mov	r1, r8
 8004ac4:	00ca      	lsls	r2, r1, #3
 8004ac6:	4610      	mov	r0, r2
 8004ac8:	4619      	mov	r1, r3
 8004aca:	4603      	mov	r3, r0
 8004acc:	4622      	mov	r2, r4
 8004ace:	189b      	adds	r3, r3, r2
 8004ad0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ad2:	462b      	mov	r3, r5
 8004ad4:	460a      	mov	r2, r1
 8004ad6:	eb42 0303 	adc.w	r3, r2, r3
 8004ada:	637b      	str	r3, [r7, #52]	@ 0x34
 8004adc:	f04f 0200 	mov.w	r2, #0
 8004ae0:	f04f 0300 	mov.w	r3, #0
 8004ae4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004ae8:	4629      	mov	r1, r5
 8004aea:	024b      	lsls	r3, r1, #9
 8004aec:	4621      	mov	r1, r4
 8004aee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004af2:	4621      	mov	r1, r4
 8004af4:	024a      	lsls	r2, r1, #9
 8004af6:	4610      	mov	r0, r2
 8004af8:	4619      	mov	r1, r3
 8004afa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004afe:	2200      	movs	r2, #0
 8004b00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b08:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004b0c:	f7fc f9ca 	bl	8000ea4 <__aeabi_uldivmod>
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	4613      	mov	r3, r2
 8004b16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b1a:	e067      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b1c:	4b75      	ldr	r3, [pc, #468]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	099b      	lsrs	r3, r3, #6
 8004b22:	2200      	movs	r2, #0
 8004b24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b28:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004b2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b36:	2300      	movs	r3, #0
 8004b38:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b3a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004b3e:	4622      	mov	r2, r4
 8004b40:	462b      	mov	r3, r5
 8004b42:	f04f 0000 	mov.w	r0, #0
 8004b46:	f04f 0100 	mov.w	r1, #0
 8004b4a:	0159      	lsls	r1, r3, #5
 8004b4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b50:	0150      	lsls	r0, r2, #5
 8004b52:	4602      	mov	r2, r0
 8004b54:	460b      	mov	r3, r1
 8004b56:	4621      	mov	r1, r4
 8004b58:	1a51      	subs	r1, r2, r1
 8004b5a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004b5c:	4629      	mov	r1, r5
 8004b5e:	eb63 0301 	sbc.w	r3, r3, r1
 8004b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	f04f 0300 	mov.w	r3, #0
 8004b6c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004b70:	4649      	mov	r1, r9
 8004b72:	018b      	lsls	r3, r1, #6
 8004b74:	4641      	mov	r1, r8
 8004b76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b7a:	4641      	mov	r1, r8
 8004b7c:	018a      	lsls	r2, r1, #6
 8004b7e:	4641      	mov	r1, r8
 8004b80:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b84:	4649      	mov	r1, r9
 8004b86:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b8a:	f04f 0200 	mov.w	r2, #0
 8004b8e:	f04f 0300 	mov.w	r3, #0
 8004b92:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b96:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b9e:	4692      	mov	sl, r2
 8004ba0:	469b      	mov	fp, r3
 8004ba2:	4623      	mov	r3, r4
 8004ba4:	eb1a 0303 	adds.w	r3, sl, r3
 8004ba8:	623b      	str	r3, [r7, #32]
 8004baa:	462b      	mov	r3, r5
 8004bac:	eb4b 0303 	adc.w	r3, fp, r3
 8004bb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bb2:	f04f 0200 	mov.w	r2, #0
 8004bb6:	f04f 0300 	mov.w	r3, #0
 8004bba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	028b      	lsls	r3, r1, #10
 8004bc2:	4621      	mov	r1, r4
 8004bc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bc8:	4621      	mov	r1, r4
 8004bca:	028a      	lsls	r2, r1, #10
 8004bcc:	4610      	mov	r0, r2
 8004bce:	4619      	mov	r1, r3
 8004bd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bd8:	677a      	str	r2, [r7, #116]	@ 0x74
 8004bda:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004bde:	f7fc f961 	bl	8000ea4 <__aeabi_uldivmod>
 8004be2:	4602      	mov	r2, r0
 8004be4:	460b      	mov	r3, r1
 8004be6:	4613      	mov	r3, r2
 8004be8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004bec:	4b41      	ldr	r3, [pc, #260]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	0c1b      	lsrs	r3, r3, #16
 8004bf2:	f003 0303 	and.w	r3, r3, #3
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004bfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004c0e:	e0eb      	b.n	8004de8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c10:	4b38      	ldr	r3, [pc, #224]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c1c:	4b35      	ldr	r3, [pc, #212]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d06b      	beq.n	8004d00 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c28:	4b32      	ldr	r3, [pc, #200]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	099b      	lsrs	r3, r3, #6
 8004c2e:	2200      	movs	r2, #0
 8004c30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004c34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c40:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004c44:	4622      	mov	r2, r4
 8004c46:	462b      	mov	r3, r5
 8004c48:	f04f 0000 	mov.w	r0, #0
 8004c4c:	f04f 0100 	mov.w	r1, #0
 8004c50:	0159      	lsls	r1, r3, #5
 8004c52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c56:	0150      	lsls	r0, r2, #5
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4621      	mov	r1, r4
 8004c5e:	1a51      	subs	r1, r2, r1
 8004c60:	61b9      	str	r1, [r7, #24]
 8004c62:	4629      	mov	r1, r5
 8004c64:	eb63 0301 	sbc.w	r3, r3, r1
 8004c68:	61fb      	str	r3, [r7, #28]
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	f04f 0300 	mov.w	r3, #0
 8004c72:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004c76:	4659      	mov	r1, fp
 8004c78:	018b      	lsls	r3, r1, #6
 8004c7a:	4651      	mov	r1, sl
 8004c7c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c80:	4651      	mov	r1, sl
 8004c82:	018a      	lsls	r2, r1, #6
 8004c84:	4651      	mov	r1, sl
 8004c86:	ebb2 0801 	subs.w	r8, r2, r1
 8004c8a:	4659      	mov	r1, fp
 8004c8c:	eb63 0901 	sbc.w	r9, r3, r1
 8004c90:	f04f 0200 	mov.w	r2, #0
 8004c94:	f04f 0300 	mov.w	r3, #0
 8004c98:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c9c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ca0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ca4:	4690      	mov	r8, r2
 8004ca6:	4699      	mov	r9, r3
 8004ca8:	4623      	mov	r3, r4
 8004caa:	eb18 0303 	adds.w	r3, r8, r3
 8004cae:	613b      	str	r3, [r7, #16]
 8004cb0:	462b      	mov	r3, r5
 8004cb2:	eb49 0303 	adc.w	r3, r9, r3
 8004cb6:	617b      	str	r3, [r7, #20]
 8004cb8:	f04f 0200 	mov.w	r2, #0
 8004cbc:	f04f 0300 	mov.w	r3, #0
 8004cc0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004cc4:	4629      	mov	r1, r5
 8004cc6:	024b      	lsls	r3, r1, #9
 8004cc8:	4621      	mov	r1, r4
 8004cca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cce:	4621      	mov	r1, r4
 8004cd0:	024a      	lsls	r2, r1, #9
 8004cd2:	4610      	mov	r0, r2
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004cda:	2200      	movs	r2, #0
 8004cdc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004cde:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004ce0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ce4:	f7fc f8de 	bl	8000ea4 <__aeabi_uldivmod>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	4613      	mov	r3, r2
 8004cee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004cf2:	e065      	b.n	8004dc0 <HAL_RCC_GetSysClockFreq+0x420>
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	00f42400 	.word	0x00f42400
 8004cfc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d00:	4b3d      	ldr	r3, [pc, #244]	@ (8004df8 <HAL_RCC_GetSysClockFreq+0x458>)
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	099b      	lsrs	r3, r3, #6
 8004d06:	2200      	movs	r2, #0
 8004d08:	4618      	mov	r0, r3
 8004d0a:	4611      	mov	r1, r2
 8004d0c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d10:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d12:	2300      	movs	r3, #0
 8004d14:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d16:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004d1a:	4642      	mov	r2, r8
 8004d1c:	464b      	mov	r3, r9
 8004d1e:	f04f 0000 	mov.w	r0, #0
 8004d22:	f04f 0100 	mov.w	r1, #0
 8004d26:	0159      	lsls	r1, r3, #5
 8004d28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d2c:	0150      	lsls	r0, r2, #5
 8004d2e:	4602      	mov	r2, r0
 8004d30:	460b      	mov	r3, r1
 8004d32:	4641      	mov	r1, r8
 8004d34:	1a51      	subs	r1, r2, r1
 8004d36:	60b9      	str	r1, [r7, #8]
 8004d38:	4649      	mov	r1, r9
 8004d3a:	eb63 0301 	sbc.w	r3, r3, r1
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	f04f 0300 	mov.w	r3, #0
 8004d48:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004d4c:	4659      	mov	r1, fp
 8004d4e:	018b      	lsls	r3, r1, #6
 8004d50:	4651      	mov	r1, sl
 8004d52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d56:	4651      	mov	r1, sl
 8004d58:	018a      	lsls	r2, r1, #6
 8004d5a:	4651      	mov	r1, sl
 8004d5c:	1a54      	subs	r4, r2, r1
 8004d5e:	4659      	mov	r1, fp
 8004d60:	eb63 0501 	sbc.w	r5, r3, r1
 8004d64:	f04f 0200 	mov.w	r2, #0
 8004d68:	f04f 0300 	mov.w	r3, #0
 8004d6c:	00eb      	lsls	r3, r5, #3
 8004d6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d72:	00e2      	lsls	r2, r4, #3
 8004d74:	4614      	mov	r4, r2
 8004d76:	461d      	mov	r5, r3
 8004d78:	4643      	mov	r3, r8
 8004d7a:	18e3      	adds	r3, r4, r3
 8004d7c:	603b      	str	r3, [r7, #0]
 8004d7e:	464b      	mov	r3, r9
 8004d80:	eb45 0303 	adc.w	r3, r5, r3
 8004d84:	607b      	str	r3, [r7, #4]
 8004d86:	f04f 0200 	mov.w	r2, #0
 8004d8a:	f04f 0300 	mov.w	r3, #0
 8004d8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d92:	4629      	mov	r1, r5
 8004d94:	028b      	lsls	r3, r1, #10
 8004d96:	4621      	mov	r1, r4
 8004d98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d9c:	4621      	mov	r1, r4
 8004d9e:	028a      	lsls	r2, r1, #10
 8004da0:	4610      	mov	r0, r2
 8004da2:	4619      	mov	r1, r3
 8004da4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004da8:	2200      	movs	r2, #0
 8004daa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dac:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004dae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004db2:	f7fc f877 	bl	8000ea4 <__aeabi_uldivmod>
 8004db6:	4602      	mov	r2, r0
 8004db8:	460b      	mov	r3, r1
 8004dba:	4613      	mov	r3, r2
 8004dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004dc0:	4b0d      	ldr	r3, [pc, #52]	@ (8004df8 <HAL_RCC_GetSysClockFreq+0x458>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	0f1b      	lsrs	r3, r3, #28
 8004dc6:	f003 0307 	and.w	r3, r3, #7
 8004dca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004dce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004dd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004dde:	e003      	b.n	8004de8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004de0:	4b06      	ldr	r3, [pc, #24]	@ (8004dfc <HAL_RCC_GetSysClockFreq+0x45c>)
 8004de2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004de6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004de8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	37b8      	adds	r7, #184	@ 0xb8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004df6:	bf00      	nop
 8004df8:	40023800 	.word	0x40023800
 8004dfc:	00f42400 	.word	0x00f42400

08004e00 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e28d      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 8083 	beq.w	8004f26 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004e20:	4b94      	ldr	r3, [pc, #592]	@ (8005074 <HAL_RCC_OscConfig+0x274>)
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f003 030c 	and.w	r3, r3, #12
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	d019      	beq.n	8004e60 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004e2c:	4b91      	ldr	r3, [pc, #580]	@ (8005074 <HAL_RCC_OscConfig+0x274>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f003 030c 	and.w	r3, r3, #12
        || \
 8004e34:	2b08      	cmp	r3, #8
 8004e36:	d106      	bne.n	8004e46 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004e38:	4b8e      	ldr	r3, [pc, #568]	@ (8005074 <HAL_RCC_OscConfig+0x274>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e44:	d00c      	beq.n	8004e60 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e46:	4b8b      	ldr	r3, [pc, #556]	@ (8005074 <HAL_RCC_OscConfig+0x274>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004e4e:	2b0c      	cmp	r3, #12
 8004e50:	d112      	bne.n	8004e78 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e52:	4b88      	ldr	r3, [pc, #544]	@ (8005074 <HAL_RCC_OscConfig+0x274>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e5e:	d10b      	bne.n	8004e78 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e60:	4b84      	ldr	r3, [pc, #528]	@ (8005074 <HAL_RCC_OscConfig+0x274>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d05b      	beq.n	8004f24 <HAL_RCC_OscConfig+0x124>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d157      	bne.n	8004f24 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e25a      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e80:	d106      	bne.n	8004e90 <HAL_RCC_OscConfig+0x90>
 8004e82:	4b7c      	ldr	r3, [pc, #496]	@ (8005074 <HAL_RCC_OscConfig+0x274>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a7b      	ldr	r2, [pc, #492]	@ (8005074 <HAL_RCC_OscConfig+0x274>)
 8004e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e8c:	6013      	str	r3, [r2, #0]
 8004e8e:	e01d      	b.n	8004ecc <HAL_RCC_OscConfig+0xcc>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e98:	d10c      	bne.n	8004eb4 <HAL_RCC_OscConfig+0xb4>
 8004e9a:	4b76      	ldr	r3, [pc, #472]	@ (8005074 <HAL_RCC_OscConfig+0x274>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a75      	ldr	r2, [pc, #468]	@ (8005074 <HAL_RCC_OscConfig+0x274>)
 8004ea0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	4b73      	ldr	r3, [pc, #460]	@ (8005074 <HAL_RCC_OscConfig+0x274>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a72      	ldr	r2, [pc, #456]	@ (8005074 <HAL_RCC_OscConfig+0x274>)
 8004eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	e00b      	b.n	8004ecc <HAL_RCC_OscConfig+0xcc>
 8004eb4:	4b6f      	ldr	r3, [pc, #444]	@ (8005074 <HAL_RCC_OscConfig+0x274>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a6e      	ldr	r2, [pc, #440]	@ (8005074 <HAL_RCC_OscConfig+0x274>)
 8004eba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ebe:	6013      	str	r3, [r2, #0]
 8004ec0:	4b6c      	ldr	r3, [pc, #432]	@ (8005074 <HAL_RCC_OscConfig+0x274>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a6b      	ldr	r2, [pc, #428]	@ (8005074 <HAL_RCC_OscConfig+0x274>)
 8004ec6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d013      	beq.n	8004efc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed4:	f7fd ffc8 	bl	8002e68 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004edc:	f7fd ffc4 	bl	8002e68 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b64      	cmp	r3, #100	@ 0x64
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e21f      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eee:	4b61      	ldr	r3, [pc, #388]	@ (8005074 <HAL_RCC_OscConfig+0x274>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d0f0      	beq.n	8004edc <HAL_RCC_OscConfig+0xdc>
 8004efa:	e014      	b.n	8004f26 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efc:	f7fd ffb4 	bl	8002e68 <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f04:	f7fd ffb0 	bl	8002e68 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b64      	cmp	r3, #100	@ 0x64
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e20b      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f16:	4b57      	ldr	r3, [pc, #348]	@ (8005074 <HAL_RCC_OscConfig+0x274>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1f0      	bne.n	8004f04 <HAL_RCC_OscConfig+0x104>
 8004f22:	e000      	b.n	8004f26 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d06f      	beq.n	8005012 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004f32:	4b50      	ldr	r3, [pc, #320]	@ (8005074 <HAL_RCC_OscConfig+0x274>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 030c 	and.w	r3, r3, #12
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d017      	beq.n	8004f6e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004f3e:	4b4d      	ldr	r3, [pc, #308]	@ (8005074 <HAL_RCC_OscConfig+0x274>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 030c 	and.w	r3, r3, #12
        || \
 8004f46:	2b08      	cmp	r3, #8
 8004f48:	d105      	bne.n	8004f56 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8005074 <HAL_RCC_OscConfig+0x274>)
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00b      	beq.n	8004f6e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f56:	4b47      	ldr	r3, [pc, #284]	@ (8005074 <HAL_RCC_OscConfig+0x274>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004f5e:	2b0c      	cmp	r3, #12
 8004f60:	d11c      	bne.n	8004f9c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f62:	4b44      	ldr	r3, [pc, #272]	@ (8005074 <HAL_RCC_OscConfig+0x274>)
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d116      	bne.n	8004f9c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f6e:	4b41      	ldr	r3, [pc, #260]	@ (8005074 <HAL_RCC_OscConfig+0x274>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d005      	beq.n	8004f86 <HAL_RCC_OscConfig+0x186>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d001      	beq.n	8004f86 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e1d3      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f86:	4b3b      	ldr	r3, [pc, #236]	@ (8005074 <HAL_RCC_OscConfig+0x274>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	00db      	lsls	r3, r3, #3
 8004f94:	4937      	ldr	r1, [pc, #220]	@ (8005074 <HAL_RCC_OscConfig+0x274>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f9a:	e03a      	b.n	8005012 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d020      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fa4:	4b34      	ldr	r3, [pc, #208]	@ (8005078 <HAL_RCC_OscConfig+0x278>)
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004faa:	f7fd ff5d 	bl	8002e68 <HAL_GetTick>
 8004fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fb0:	e008      	b.n	8004fc4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fb2:	f7fd ff59 	bl	8002e68 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d901      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e1b4      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8005074 <HAL_RCC_OscConfig+0x274>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d0f0      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fd0:	4b28      	ldr	r3, [pc, #160]	@ (8005074 <HAL_RCC_OscConfig+0x274>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	00db      	lsls	r3, r3, #3
 8004fde:	4925      	ldr	r1, [pc, #148]	@ (8005074 <HAL_RCC_OscConfig+0x274>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	600b      	str	r3, [r1, #0]
 8004fe4:	e015      	b.n	8005012 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fe6:	4b24      	ldr	r3, [pc, #144]	@ (8005078 <HAL_RCC_OscConfig+0x278>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fec:	f7fd ff3c 	bl	8002e68 <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ff4:	f7fd ff38 	bl	8002e68 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e193      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005006:	4b1b      	ldr	r3, [pc, #108]	@ (8005074 <HAL_RCC_OscConfig+0x274>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1f0      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0308 	and.w	r3, r3, #8
 800501a:	2b00      	cmp	r3, #0
 800501c:	d036      	beq.n	800508c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d016      	beq.n	8005054 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005026:	4b15      	ldr	r3, [pc, #84]	@ (800507c <HAL_RCC_OscConfig+0x27c>)
 8005028:	2201      	movs	r2, #1
 800502a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800502c:	f7fd ff1c 	bl	8002e68 <HAL_GetTick>
 8005030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005032:	e008      	b.n	8005046 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005034:	f7fd ff18 	bl	8002e68 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b02      	cmp	r3, #2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e173      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005046:	4b0b      	ldr	r3, [pc, #44]	@ (8005074 <HAL_RCC_OscConfig+0x274>)
 8005048:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d0f0      	beq.n	8005034 <HAL_RCC_OscConfig+0x234>
 8005052:	e01b      	b.n	800508c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005054:	4b09      	ldr	r3, [pc, #36]	@ (800507c <HAL_RCC_OscConfig+0x27c>)
 8005056:	2200      	movs	r2, #0
 8005058:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800505a:	f7fd ff05 	bl	8002e68 <HAL_GetTick>
 800505e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005060:	e00e      	b.n	8005080 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005062:	f7fd ff01 	bl	8002e68 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	2b02      	cmp	r3, #2
 800506e:	d907      	bls.n	8005080 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e15c      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
 8005074:	40023800 	.word	0x40023800
 8005078:	42470000 	.word	0x42470000
 800507c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005080:	4b8a      	ldr	r3, [pc, #552]	@ (80052ac <HAL_RCC_OscConfig+0x4ac>)
 8005082:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1ea      	bne.n	8005062 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 8097 	beq.w	80051c8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800509a:	2300      	movs	r3, #0
 800509c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800509e:	4b83      	ldr	r3, [pc, #524]	@ (80052ac <HAL_RCC_OscConfig+0x4ac>)
 80050a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10f      	bne.n	80050ca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050aa:	2300      	movs	r3, #0
 80050ac:	60bb      	str	r3, [r7, #8]
 80050ae:	4b7f      	ldr	r3, [pc, #508]	@ (80052ac <HAL_RCC_OscConfig+0x4ac>)
 80050b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b2:	4a7e      	ldr	r2, [pc, #504]	@ (80052ac <HAL_RCC_OscConfig+0x4ac>)
 80050b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80050ba:	4b7c      	ldr	r3, [pc, #496]	@ (80052ac <HAL_RCC_OscConfig+0x4ac>)
 80050bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050c2:	60bb      	str	r3, [r7, #8]
 80050c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050c6:	2301      	movs	r3, #1
 80050c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ca:	4b79      	ldr	r3, [pc, #484]	@ (80052b0 <HAL_RCC_OscConfig+0x4b0>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d118      	bne.n	8005108 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050d6:	4b76      	ldr	r3, [pc, #472]	@ (80052b0 <HAL_RCC_OscConfig+0x4b0>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a75      	ldr	r2, [pc, #468]	@ (80052b0 <HAL_RCC_OscConfig+0x4b0>)
 80050dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050e2:	f7fd fec1 	bl	8002e68 <HAL_GetTick>
 80050e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e8:	e008      	b.n	80050fc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ea:	f7fd febd 	bl	8002e68 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d901      	bls.n	80050fc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e118      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050fc:	4b6c      	ldr	r3, [pc, #432]	@ (80052b0 <HAL_RCC_OscConfig+0x4b0>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005104:	2b00      	cmp	r3, #0
 8005106:	d0f0      	beq.n	80050ea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d106      	bne.n	800511e <HAL_RCC_OscConfig+0x31e>
 8005110:	4b66      	ldr	r3, [pc, #408]	@ (80052ac <HAL_RCC_OscConfig+0x4ac>)
 8005112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005114:	4a65      	ldr	r2, [pc, #404]	@ (80052ac <HAL_RCC_OscConfig+0x4ac>)
 8005116:	f043 0301 	orr.w	r3, r3, #1
 800511a:	6713      	str	r3, [r2, #112]	@ 0x70
 800511c:	e01c      	b.n	8005158 <HAL_RCC_OscConfig+0x358>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	2b05      	cmp	r3, #5
 8005124:	d10c      	bne.n	8005140 <HAL_RCC_OscConfig+0x340>
 8005126:	4b61      	ldr	r3, [pc, #388]	@ (80052ac <HAL_RCC_OscConfig+0x4ac>)
 8005128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800512a:	4a60      	ldr	r2, [pc, #384]	@ (80052ac <HAL_RCC_OscConfig+0x4ac>)
 800512c:	f043 0304 	orr.w	r3, r3, #4
 8005130:	6713      	str	r3, [r2, #112]	@ 0x70
 8005132:	4b5e      	ldr	r3, [pc, #376]	@ (80052ac <HAL_RCC_OscConfig+0x4ac>)
 8005134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005136:	4a5d      	ldr	r2, [pc, #372]	@ (80052ac <HAL_RCC_OscConfig+0x4ac>)
 8005138:	f043 0301 	orr.w	r3, r3, #1
 800513c:	6713      	str	r3, [r2, #112]	@ 0x70
 800513e:	e00b      	b.n	8005158 <HAL_RCC_OscConfig+0x358>
 8005140:	4b5a      	ldr	r3, [pc, #360]	@ (80052ac <HAL_RCC_OscConfig+0x4ac>)
 8005142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005144:	4a59      	ldr	r2, [pc, #356]	@ (80052ac <HAL_RCC_OscConfig+0x4ac>)
 8005146:	f023 0301 	bic.w	r3, r3, #1
 800514a:	6713      	str	r3, [r2, #112]	@ 0x70
 800514c:	4b57      	ldr	r3, [pc, #348]	@ (80052ac <HAL_RCC_OscConfig+0x4ac>)
 800514e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005150:	4a56      	ldr	r2, [pc, #344]	@ (80052ac <HAL_RCC_OscConfig+0x4ac>)
 8005152:	f023 0304 	bic.w	r3, r3, #4
 8005156:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d015      	beq.n	800518c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005160:	f7fd fe82 	bl	8002e68 <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005166:	e00a      	b.n	800517e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005168:	f7fd fe7e 	bl	8002e68 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005176:	4293      	cmp	r3, r2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e0d7      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800517e:	4b4b      	ldr	r3, [pc, #300]	@ (80052ac <HAL_RCC_OscConfig+0x4ac>)
 8005180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d0ee      	beq.n	8005168 <HAL_RCC_OscConfig+0x368>
 800518a:	e014      	b.n	80051b6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800518c:	f7fd fe6c 	bl	8002e68 <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005192:	e00a      	b.n	80051aa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005194:	f7fd fe68 	bl	8002e68 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e0c1      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051aa:	4b40      	ldr	r3, [pc, #256]	@ (80052ac <HAL_RCC_OscConfig+0x4ac>)
 80051ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1ee      	bne.n	8005194 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051b6:	7dfb      	ldrb	r3, [r7, #23]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d105      	bne.n	80051c8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051bc:	4b3b      	ldr	r3, [pc, #236]	@ (80052ac <HAL_RCC_OscConfig+0x4ac>)
 80051be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c0:	4a3a      	ldr	r2, [pc, #232]	@ (80052ac <HAL_RCC_OscConfig+0x4ac>)
 80051c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 80ad 	beq.w	800532c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051d2:	4b36      	ldr	r3, [pc, #216]	@ (80052ac <HAL_RCC_OscConfig+0x4ac>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 030c 	and.w	r3, r3, #12
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d060      	beq.n	80052a0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d145      	bne.n	8005272 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051e6:	4b33      	ldr	r3, [pc, #204]	@ (80052b4 <HAL_RCC_OscConfig+0x4b4>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ec:	f7fd fe3c 	bl	8002e68 <HAL_GetTick>
 80051f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051f2:	e008      	b.n	8005206 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051f4:	f7fd fe38 	bl	8002e68 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e093      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005206:	4b29      	ldr	r3, [pc, #164]	@ (80052ac <HAL_RCC_OscConfig+0x4ac>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1f0      	bne.n	80051f4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69da      	ldr	r2, [r3, #28]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	431a      	orrs	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005220:	019b      	lsls	r3, r3, #6
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005228:	085b      	lsrs	r3, r3, #1
 800522a:	3b01      	subs	r3, #1
 800522c:	041b      	lsls	r3, r3, #16
 800522e:	431a      	orrs	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005234:	061b      	lsls	r3, r3, #24
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800523c:	071b      	lsls	r3, r3, #28
 800523e:	491b      	ldr	r1, [pc, #108]	@ (80052ac <HAL_RCC_OscConfig+0x4ac>)
 8005240:	4313      	orrs	r3, r2
 8005242:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005244:	4b1b      	ldr	r3, [pc, #108]	@ (80052b4 <HAL_RCC_OscConfig+0x4b4>)
 8005246:	2201      	movs	r2, #1
 8005248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800524a:	f7fd fe0d 	bl	8002e68 <HAL_GetTick>
 800524e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005250:	e008      	b.n	8005264 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005252:	f7fd fe09 	bl	8002e68 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d901      	bls.n	8005264 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e064      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005264:	4b11      	ldr	r3, [pc, #68]	@ (80052ac <HAL_RCC_OscConfig+0x4ac>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d0f0      	beq.n	8005252 <HAL_RCC_OscConfig+0x452>
 8005270:	e05c      	b.n	800532c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005272:	4b10      	ldr	r3, [pc, #64]	@ (80052b4 <HAL_RCC_OscConfig+0x4b4>)
 8005274:	2200      	movs	r2, #0
 8005276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005278:	f7fd fdf6 	bl	8002e68 <HAL_GetTick>
 800527c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800527e:	e008      	b.n	8005292 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005280:	f7fd fdf2 	bl	8002e68 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b02      	cmp	r3, #2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e04d      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005292:	4b06      	ldr	r3, [pc, #24]	@ (80052ac <HAL_RCC_OscConfig+0x4ac>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1f0      	bne.n	8005280 <HAL_RCC_OscConfig+0x480>
 800529e:	e045      	b.n	800532c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d107      	bne.n	80052b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e040      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
 80052ac:	40023800 	.word	0x40023800
 80052b0:	40007000 	.word	0x40007000
 80052b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052b8:	4b1f      	ldr	r3, [pc, #124]	@ (8005338 <HAL_RCC_OscConfig+0x538>)
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d030      	beq.n	8005328 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d129      	bne.n	8005328 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052de:	429a      	cmp	r2, r3
 80052e0:	d122      	bne.n	8005328 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80052e8:	4013      	ands	r3, r2
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80052ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d119      	bne.n	8005328 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052fe:	085b      	lsrs	r3, r3, #1
 8005300:	3b01      	subs	r3, #1
 8005302:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005304:	429a      	cmp	r2, r3
 8005306:	d10f      	bne.n	8005328 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005312:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005314:	429a      	cmp	r2, r3
 8005316:	d107      	bne.n	8005328 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005322:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005324:	429a      	cmp	r2, r3
 8005326:	d001      	beq.n	800532c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e000      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	40023800 	.word	0x40023800

0800533c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d101      	bne.n	800534e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e07b      	b.n	8005446 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005352:	2b00      	cmp	r3, #0
 8005354:	d108      	bne.n	8005368 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800535e:	d009      	beq.n	8005374 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	61da      	str	r2, [r3, #28]
 8005366:	e005      	b.n	8005374 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d106      	bne.n	8005394 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7fc f944 	bl	800161c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2202      	movs	r2, #2
 8005398:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80053bc:	431a      	orrs	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	431a      	orrs	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	431a      	orrs	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053e4:	431a      	orrs	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053f8:	ea42 0103 	orr.w	r1, r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005400:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	0c1b      	lsrs	r3, r3, #16
 8005412:	f003 0104 	and.w	r1, r3, #4
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541a:	f003 0210 	and.w	r2, r3, #16
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	69da      	ldr	r2, [r3, #28]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005434:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b088      	sub	sp, #32
 8005452:	af00      	add	r7, sp, #0
 8005454:	60f8      	str	r0, [r7, #12]
 8005456:	60b9      	str	r1, [r7, #8]
 8005458:	603b      	str	r3, [r7, #0]
 800545a:	4613      	mov	r3, r2
 800545c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800545e:	f7fd fd03 	bl	8002e68 <HAL_GetTick>
 8005462:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005464:	88fb      	ldrh	r3, [r7, #6]
 8005466:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b01      	cmp	r3, #1
 8005472:	d001      	beq.n	8005478 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005474:	2302      	movs	r3, #2
 8005476:	e12a      	b.n	80056ce <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <HAL_SPI_Transmit+0x36>
 800547e:	88fb      	ldrh	r3, [r7, #6]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d101      	bne.n	8005488 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e122      	b.n	80056ce <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800548e:	2b01      	cmp	r3, #1
 8005490:	d101      	bne.n	8005496 <HAL_SPI_Transmit+0x48>
 8005492:	2302      	movs	r3, #2
 8005494:	e11b      	b.n	80056ce <HAL_SPI_Transmit+0x280>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2203      	movs	r2, #3
 80054a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	88fa      	ldrh	r2, [r7, #6]
 80054b6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	88fa      	ldrh	r2, [r7, #6]
 80054bc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054e4:	d10f      	bne.n	8005506 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005504:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005510:	2b40      	cmp	r3, #64	@ 0x40
 8005512:	d007      	beq.n	8005524 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005522:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800552c:	d152      	bne.n	80055d4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d002      	beq.n	800553c <HAL_SPI_Transmit+0xee>
 8005536:	8b7b      	ldrh	r3, [r7, #26]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d145      	bne.n	80055c8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005540:	881a      	ldrh	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800554c:	1c9a      	adds	r2, r3, #2
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005556:	b29b      	uxth	r3, r3
 8005558:	3b01      	subs	r3, #1
 800555a:	b29a      	uxth	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005560:	e032      	b.n	80055c8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f003 0302 	and.w	r3, r3, #2
 800556c:	2b02      	cmp	r3, #2
 800556e:	d112      	bne.n	8005596 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005574:	881a      	ldrh	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005580:	1c9a      	adds	r2, r3, #2
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800558a:	b29b      	uxth	r3, r3
 800558c:	3b01      	subs	r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005594:	e018      	b.n	80055c8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005596:	f7fd fc67 	bl	8002e68 <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d803      	bhi.n	80055ae <HAL_SPI_Transmit+0x160>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ac:	d102      	bne.n	80055b4 <HAL_SPI_Transmit+0x166>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d109      	bne.n	80055c8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e082      	b.n	80056ce <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1c7      	bne.n	8005562 <HAL_SPI_Transmit+0x114>
 80055d2:	e053      	b.n	800567c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d002      	beq.n	80055e2 <HAL_SPI_Transmit+0x194>
 80055dc:	8b7b      	ldrh	r3, [r7, #26]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d147      	bne.n	8005672 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	330c      	adds	r3, #12
 80055ec:	7812      	ldrb	r2, [r2, #0]
 80055ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055f4:	1c5a      	adds	r2, r3, #1
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055fe:	b29b      	uxth	r3, r3
 8005600:	3b01      	subs	r3, #1
 8005602:	b29a      	uxth	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005608:	e033      	b.n	8005672 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b02      	cmp	r3, #2
 8005616:	d113      	bne.n	8005640 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	330c      	adds	r3, #12
 8005622:	7812      	ldrb	r2, [r2, #0]
 8005624:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800562a:	1c5a      	adds	r2, r3, #1
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005634:	b29b      	uxth	r3, r3
 8005636:	3b01      	subs	r3, #1
 8005638:	b29a      	uxth	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800563e:	e018      	b.n	8005672 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005640:	f7fd fc12 	bl	8002e68 <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	429a      	cmp	r2, r3
 800564e:	d803      	bhi.n	8005658 <HAL_SPI_Transmit+0x20a>
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005656:	d102      	bne.n	800565e <HAL_SPI_Transmit+0x210>
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d109      	bne.n	8005672 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e02d      	b.n	80056ce <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005676:	b29b      	uxth	r3, r3
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1c6      	bne.n	800560a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800567c:	69fa      	ldr	r2, [r7, #28]
 800567e:	6839      	ldr	r1, [r7, #0]
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 fbd9 	bl	8005e38 <SPI_EndRxTxTransaction>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d002      	beq.n	8005692 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2220      	movs	r2, #32
 8005690:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10a      	bne.n	80056b0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800569a:	2300      	movs	r3, #0
 800569c:	617b      	str	r3, [r7, #20]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	617b      	str	r3, [r7, #20]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	617b      	str	r3, [r7, #20]
 80056ae:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e000      	b.n	80056ce <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80056cc:	2300      	movs	r3, #0
  }
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3720      	adds	r7, #32
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b088      	sub	sp, #32
 80056da:	af02      	add	r7, sp, #8
 80056dc:	60f8      	str	r0, [r7, #12]
 80056de:	60b9      	str	r1, [r7, #8]
 80056e0:	603b      	str	r3, [r7, #0]
 80056e2:	4613      	mov	r3, r2
 80056e4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d001      	beq.n	80056f6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80056f2:	2302      	movs	r3, #2
 80056f4:	e104      	b.n	8005900 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056fe:	d112      	bne.n	8005726 <HAL_SPI_Receive+0x50>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10e      	bne.n	8005726 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2204      	movs	r2, #4
 800570c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005710:	88fa      	ldrh	r2, [r7, #6]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	4613      	mov	r3, r2
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	68b9      	ldr	r1, [r7, #8]
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 f8f3 	bl	8005908 <HAL_SPI_TransmitReceive>
 8005722:	4603      	mov	r3, r0
 8005724:	e0ec      	b.n	8005900 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005726:	f7fd fb9f 	bl	8002e68 <HAL_GetTick>
 800572a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d002      	beq.n	8005738 <HAL_SPI_Receive+0x62>
 8005732:	88fb      	ldrh	r3, [r7, #6]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e0e1      	b.n	8005900 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005742:	2b01      	cmp	r3, #1
 8005744:	d101      	bne.n	800574a <HAL_SPI_Receive+0x74>
 8005746:	2302      	movs	r3, #2
 8005748:	e0da      	b.n	8005900 <HAL_SPI_Receive+0x22a>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2204      	movs	r2, #4
 8005756:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	88fa      	ldrh	r2, [r7, #6]
 800576a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	88fa      	ldrh	r2, [r7, #6]
 8005770:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005798:	d10f      	bne.n	80057ba <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80057b8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057c4:	2b40      	cmp	r3, #64	@ 0x40
 80057c6:	d007      	beq.n	80057d8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057d6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d170      	bne.n	80058c2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80057e0:	e035      	b.n	800584e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d115      	bne.n	800581c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f103 020c 	add.w	r2, r3, #12
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057fc:	7812      	ldrb	r2, [r2, #0]
 80057fe:	b2d2      	uxtb	r2, r2
 8005800:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005806:	1c5a      	adds	r2, r3, #1
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005810:	b29b      	uxth	r3, r3
 8005812:	3b01      	subs	r3, #1
 8005814:	b29a      	uxth	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800581a:	e018      	b.n	800584e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800581c:	f7fd fb24 	bl	8002e68 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	429a      	cmp	r2, r3
 800582a:	d803      	bhi.n	8005834 <HAL_SPI_Receive+0x15e>
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005832:	d102      	bne.n	800583a <HAL_SPI_Receive+0x164>
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d109      	bne.n	800584e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e058      	b.n	8005900 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005852:	b29b      	uxth	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1c4      	bne.n	80057e2 <HAL_SPI_Receive+0x10c>
 8005858:	e038      	b.n	80058cc <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	2b01      	cmp	r3, #1
 8005866:	d113      	bne.n	8005890 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68da      	ldr	r2, [r3, #12]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005872:	b292      	uxth	r2, r2
 8005874:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800587a:	1c9a      	adds	r2, r3, #2
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005884:	b29b      	uxth	r3, r3
 8005886:	3b01      	subs	r3, #1
 8005888:	b29a      	uxth	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800588e:	e018      	b.n	80058c2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005890:	f7fd faea 	bl	8002e68 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	683a      	ldr	r2, [r7, #0]
 800589c:	429a      	cmp	r2, r3
 800589e:	d803      	bhi.n	80058a8 <HAL_SPI_Receive+0x1d2>
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a6:	d102      	bne.n	80058ae <HAL_SPI_Receive+0x1d8>
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d109      	bne.n	80058c2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e01e      	b.n	8005900 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1c6      	bne.n	800585a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	6839      	ldr	r1, [r7, #0]
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f000 fa4b 	bl	8005d6c <SPI_EndRxTransaction>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d002      	beq.n	80058e2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2220      	movs	r2, #32
 80058e0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e000      	b.n	8005900 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80058fe:	2300      	movs	r3, #0
  }
}
 8005900:	4618      	mov	r0, r3
 8005902:	3718      	adds	r7, #24
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b08a      	sub	sp, #40	@ 0x28
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
 8005914:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005916:	2301      	movs	r3, #1
 8005918:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800591a:	f7fd faa5 	bl	8002e68 <HAL_GetTick>
 800591e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005926:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800592e:	887b      	ldrh	r3, [r7, #2]
 8005930:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005932:	7ffb      	ldrb	r3, [r7, #31]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d00c      	beq.n	8005952 <HAL_SPI_TransmitReceive+0x4a>
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800593e:	d106      	bne.n	800594e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d102      	bne.n	800594e <HAL_SPI_TransmitReceive+0x46>
 8005948:	7ffb      	ldrb	r3, [r7, #31]
 800594a:	2b04      	cmp	r3, #4
 800594c:	d001      	beq.n	8005952 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800594e:	2302      	movs	r3, #2
 8005950:	e17f      	b.n	8005c52 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d005      	beq.n	8005964 <HAL_SPI_TransmitReceive+0x5c>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d002      	beq.n	8005964 <HAL_SPI_TransmitReceive+0x5c>
 800595e:	887b      	ldrh	r3, [r7, #2]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e174      	b.n	8005c52 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800596e:	2b01      	cmp	r3, #1
 8005970:	d101      	bne.n	8005976 <HAL_SPI_TransmitReceive+0x6e>
 8005972:	2302      	movs	r3, #2
 8005974:	e16d      	b.n	8005c52 <HAL_SPI_TransmitReceive+0x34a>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b04      	cmp	r3, #4
 8005988:	d003      	beq.n	8005992 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2205      	movs	r2, #5
 800598e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	887a      	ldrh	r2, [r7, #2]
 80059a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	887a      	ldrh	r2, [r7, #2]
 80059a8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	887a      	ldrh	r2, [r7, #2]
 80059b4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	887a      	ldrh	r2, [r7, #2]
 80059ba:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d2:	2b40      	cmp	r3, #64	@ 0x40
 80059d4:	d007      	beq.n	80059e6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059ee:	d17e      	bne.n	8005aee <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d002      	beq.n	80059fe <HAL_SPI_TransmitReceive+0xf6>
 80059f8:	8afb      	ldrh	r3, [r7, #22]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d16c      	bne.n	8005ad8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a02:	881a      	ldrh	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a0e:	1c9a      	adds	r2, r3, #2
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a22:	e059      	b.n	8005ad8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d11b      	bne.n	8005a6a <HAL_SPI_TransmitReceive+0x162>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d016      	beq.n	8005a6a <HAL_SPI_TransmitReceive+0x162>
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d113      	bne.n	8005a6a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a46:	881a      	ldrh	r2, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a52:	1c9a      	adds	r2, r3, #2
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d119      	bne.n	8005aac <HAL_SPI_TransmitReceive+0x1a4>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d014      	beq.n	8005aac <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68da      	ldr	r2, [r3, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a8c:	b292      	uxth	r2, r2
 8005a8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a94:	1c9a      	adds	r2, r3, #2
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005aac:	f7fd f9dc 	bl	8002e68 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d80d      	bhi.n	8005ad8 <HAL_SPI_TransmitReceive+0x1d0>
 8005abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac2:	d009      	beq.n	8005ad8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e0bc      	b.n	8005c52 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1a0      	bne.n	8005a24 <HAL_SPI_TransmitReceive+0x11c>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d19b      	bne.n	8005a24 <HAL_SPI_TransmitReceive+0x11c>
 8005aec:	e082      	b.n	8005bf4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d002      	beq.n	8005afc <HAL_SPI_TransmitReceive+0x1f4>
 8005af6:	8afb      	ldrh	r3, [r7, #22]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d171      	bne.n	8005be0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	330c      	adds	r3, #12
 8005b06:	7812      	ldrb	r2, [r2, #0]
 8005b08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b0e:	1c5a      	adds	r2, r3, #1
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b22:	e05d      	b.n	8005be0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d11c      	bne.n	8005b6c <HAL_SPI_TransmitReceive+0x264>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d017      	beq.n	8005b6c <HAL_SPI_TransmitReceive+0x264>
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d114      	bne.n	8005b6c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	330c      	adds	r3, #12
 8005b4c:	7812      	ldrb	r2, [r2, #0]
 8005b4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b54:	1c5a      	adds	r2, r3, #1
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	3b01      	subs	r3, #1
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d119      	bne.n	8005bae <HAL_SPI_TransmitReceive+0x2a6>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d014      	beq.n	8005bae <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68da      	ldr	r2, [r3, #12]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b8e:	b2d2      	uxtb	r2, r2
 8005b90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b96:	1c5a      	adds	r2, r3, #1
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005baa:	2301      	movs	r3, #1
 8005bac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005bae:	f7fd f95b 	bl	8002e68 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d803      	bhi.n	8005bc6 <HAL_SPI_TransmitReceive+0x2be>
 8005bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc4:	d102      	bne.n	8005bcc <HAL_SPI_TransmitReceive+0x2c4>
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d109      	bne.n	8005be0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e038      	b.n	8005c52 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d19c      	bne.n	8005b24 <HAL_SPI_TransmitReceive+0x21c>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d197      	bne.n	8005b24 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bf4:	6a3a      	ldr	r2, [r7, #32]
 8005bf6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f000 f91d 	bl	8005e38 <SPI_EndRxTxTransaction>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d008      	beq.n	8005c16 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2220      	movs	r2, #32
 8005c08:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e01d      	b.n	8005c52 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10a      	bne.n	8005c34 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c1e:	2300      	movs	r3, #0
 8005c20:	613b      	str	r3, [r7, #16]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	613b      	str	r3, [r7, #16]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	613b      	str	r3, [r7, #16]
 8005c32:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e000      	b.n	8005c52 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005c50:	2300      	movs	r3, #0
  }
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3728      	adds	r7, #40	@ 0x28
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	603b      	str	r3, [r7, #0]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c6c:	f7fd f8fc 	bl	8002e68 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c74:	1a9b      	subs	r3, r3, r2
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	4413      	add	r3, r2
 8005c7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c7c:	f7fd f8f4 	bl	8002e68 <HAL_GetTick>
 8005c80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c82:	4b39      	ldr	r3, [pc, #228]	@ (8005d68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	015b      	lsls	r3, r3, #5
 8005c88:	0d1b      	lsrs	r3, r3, #20
 8005c8a:	69fa      	ldr	r2, [r7, #28]
 8005c8c:	fb02 f303 	mul.w	r3, r2, r3
 8005c90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c92:	e054      	b.n	8005d3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9a:	d050      	beq.n	8005d3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c9c:	f7fd f8e4 	bl	8002e68 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	69fa      	ldr	r2, [r7, #28]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d902      	bls.n	8005cb2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d13d      	bne.n	8005d2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005cc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cca:	d111      	bne.n	8005cf0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cd4:	d004      	beq.n	8005ce0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cde:	d107      	bne.n	8005cf0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cf8:	d10f      	bne.n	8005d1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e017      	b.n	8005d5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d34:	2300      	movs	r3, #0
 8005d36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689a      	ldr	r2, [r3, #8]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	4013      	ands	r3, r2
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	bf0c      	ite	eq
 8005d4e:	2301      	moveq	r3, #1
 8005d50:	2300      	movne	r3, #0
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	461a      	mov	r2, r3
 8005d56:	79fb      	ldrb	r3, [r7, #7]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d19b      	bne.n	8005c94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3720      	adds	r7, #32
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	20000000 	.word	0x20000000

08005d6c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af02      	add	r7, sp, #8
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d80:	d111      	bne.n	8005da6 <SPI_EndRxTransaction+0x3a>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d8a:	d004      	beq.n	8005d96 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d94:	d107      	bne.n	8005da6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005da4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dae:	d12a      	bne.n	8005e06 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005db8:	d012      	beq.n	8005de0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	2180      	movs	r1, #128	@ 0x80
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f7ff ff49 	bl	8005c5c <SPI_WaitFlagStateUntilTimeout>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d02d      	beq.n	8005e2c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd4:	f043 0220 	orr.w	r2, r3, #32
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e026      	b.n	8005e2e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	2200      	movs	r2, #0
 8005de8:	2101      	movs	r1, #1
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f7ff ff36 	bl	8005c5c <SPI_WaitFlagStateUntilTimeout>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d01a      	beq.n	8005e2c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dfa:	f043 0220 	orr.w	r2, r3, #32
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e013      	b.n	8005e2e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	2101      	movs	r1, #1
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f7ff ff23 	bl	8005c5c <SPI_WaitFlagStateUntilTimeout>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d007      	beq.n	8005e2c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e20:	f043 0220 	orr.w	r2, r3, #32
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e000      	b.n	8005e2e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
	...

08005e38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b088      	sub	sp, #32
 8005e3c:	af02      	add	r7, sp, #8
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	2102      	movs	r1, #2
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f7ff ff04 	bl	8005c5c <SPI_WaitFlagStateUntilTimeout>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d007      	beq.n	8005e6a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e5e:	f043 0220 	orr.w	r2, r3, #32
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e032      	b.n	8005ed0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ed8 <SPI_EndRxTxTransaction+0xa0>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a1b      	ldr	r2, [pc, #108]	@ (8005edc <SPI_EndRxTxTransaction+0xa4>)
 8005e70:	fba2 2303 	umull	r2, r3, r2, r3
 8005e74:	0d5b      	lsrs	r3, r3, #21
 8005e76:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005e7a:	fb02 f303 	mul.w	r3, r2, r3
 8005e7e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e88:	d112      	bne.n	8005eb0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2200      	movs	r2, #0
 8005e92:	2180      	movs	r1, #128	@ 0x80
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f7ff fee1 	bl	8005c5c <SPI_WaitFlagStateUntilTimeout>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d016      	beq.n	8005ece <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ea4:	f043 0220 	orr.w	r2, r3, #32
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e00f      	b.n	8005ed0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00a      	beq.n	8005ecc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ec6:	2b80      	cmp	r3, #128	@ 0x80
 8005ec8:	d0f2      	beq.n	8005eb0 <SPI_EndRxTxTransaction+0x78>
 8005eca:	e000      	b.n	8005ece <SPI_EndRxTxTransaction+0x96>
        break;
 8005ecc:	bf00      	nop
  }

  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3718      	adds	r7, #24
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	20000000 	.word	0x20000000
 8005edc:	165e9f81 	.word	0x165e9f81

08005ee0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e042      	b.n	8005f78 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d106      	bne.n	8005f0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f7fb fc00 	bl	800170c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2224      	movs	r2, #36	@ 0x24
 8005f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68da      	ldr	r2, [r3, #12]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f973 	bl	8006210 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	691a      	ldr	r2, [r3, #16]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	695a      	ldr	r2, [r3, #20]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68da      	ldr	r2, [r3, #12]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2220      	movs	r2, #32
 8005f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08a      	sub	sp, #40	@ 0x28
 8005f84:	af02      	add	r7, sp, #8
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	603b      	str	r3, [r7, #0]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	2b20      	cmp	r3, #32
 8005f9e:	d175      	bne.n	800608c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d002      	beq.n	8005fac <HAL_UART_Transmit+0x2c>
 8005fa6:	88fb      	ldrh	r3, [r7, #6]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e06e      	b.n	800608e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2221      	movs	r2, #33	@ 0x21
 8005fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fbe:	f7fc ff53 	bl	8002e68 <HAL_GetTick>
 8005fc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	88fa      	ldrh	r2, [r7, #6]
 8005fc8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	88fa      	ldrh	r2, [r7, #6]
 8005fce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fd8:	d108      	bne.n	8005fec <HAL_UART_Transmit+0x6c>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d104      	bne.n	8005fec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	61bb      	str	r3, [r7, #24]
 8005fea:	e003      	b.n	8005ff4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ff4:	e02e      	b.n	8006054 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	2180      	movs	r1, #128	@ 0x80
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 f848 	bl	8006096 <UART_WaitOnFlagUntilTimeout>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d005      	beq.n	8006018 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2220      	movs	r2, #32
 8006010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e03a      	b.n	800608e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10b      	bne.n	8006036 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	881b      	ldrh	r3, [r3, #0]
 8006022:	461a      	mov	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800602c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	3302      	adds	r3, #2
 8006032:	61bb      	str	r3, [r7, #24]
 8006034:	e007      	b.n	8006046 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	781a      	ldrb	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	3301      	adds	r3, #1
 8006044:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800604a:	b29b      	uxth	r3, r3
 800604c:	3b01      	subs	r3, #1
 800604e:	b29a      	uxth	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006058:	b29b      	uxth	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1cb      	bne.n	8005ff6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	2200      	movs	r2, #0
 8006066:	2140      	movs	r1, #64	@ 0x40
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 f814 	bl	8006096 <UART_WaitOnFlagUntilTimeout>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d005      	beq.n	8006080 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2220      	movs	r2, #32
 8006078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e006      	b.n	800608e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2220      	movs	r2, #32
 8006084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006088:	2300      	movs	r3, #0
 800608a:	e000      	b.n	800608e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800608c:	2302      	movs	r3, #2
  }
}
 800608e:	4618      	mov	r0, r3
 8006090:	3720      	adds	r7, #32
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b086      	sub	sp, #24
 800609a:	af00      	add	r7, sp, #0
 800609c:	60f8      	str	r0, [r7, #12]
 800609e:	60b9      	str	r1, [r7, #8]
 80060a0:	603b      	str	r3, [r7, #0]
 80060a2:	4613      	mov	r3, r2
 80060a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060a6:	e03b      	b.n	8006120 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ae:	d037      	beq.n	8006120 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060b0:	f7fc feda 	bl	8002e68 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	6a3a      	ldr	r2, [r7, #32]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d302      	bcc.n	80060c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80060c0:	6a3b      	ldr	r3, [r7, #32]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e03a      	b.n	8006140 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	f003 0304 	and.w	r3, r3, #4
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d023      	beq.n	8006120 <UART_WaitOnFlagUntilTimeout+0x8a>
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2b80      	cmp	r3, #128	@ 0x80
 80060dc:	d020      	beq.n	8006120 <UART_WaitOnFlagUntilTimeout+0x8a>
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	2b40      	cmp	r3, #64	@ 0x40
 80060e2:	d01d      	beq.n	8006120 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0308 	and.w	r3, r3, #8
 80060ee:	2b08      	cmp	r3, #8
 80060f0:	d116      	bne.n	8006120 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80060f2:	2300      	movs	r3, #0
 80060f4:	617b      	str	r3, [r7, #20]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	617b      	str	r3, [r7, #20]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	617b      	str	r3, [r7, #20]
 8006106:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f000 f81d 	bl	8006148 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2208      	movs	r2, #8
 8006112:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e00f      	b.n	8006140 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	4013      	ands	r3, r2
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	429a      	cmp	r2, r3
 800612e:	bf0c      	ite	eq
 8006130:	2301      	moveq	r3, #1
 8006132:	2300      	movne	r3, #0
 8006134:	b2db      	uxtb	r3, r3
 8006136:	461a      	mov	r2, r3
 8006138:	79fb      	ldrb	r3, [r7, #7]
 800613a:	429a      	cmp	r2, r3
 800613c:	d0b4      	beq.n	80060a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3718      	adds	r7, #24
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006148:	b480      	push	{r7}
 800614a:	b095      	sub	sp, #84	@ 0x54
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	330c      	adds	r3, #12
 8006156:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800615a:	e853 3f00 	ldrex	r3, [r3]
 800615e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006162:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006166:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	330c      	adds	r3, #12
 800616e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006170:	643a      	str	r2, [r7, #64]	@ 0x40
 8006172:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006174:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006176:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006178:	e841 2300 	strex	r3, r2, [r1]
 800617c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800617e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1e5      	bne.n	8006150 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	3314      	adds	r3, #20
 800618a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618c:	6a3b      	ldr	r3, [r7, #32]
 800618e:	e853 3f00 	ldrex	r3, [r3]
 8006192:	61fb      	str	r3, [r7, #28]
   return(result);
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	f023 0301 	bic.w	r3, r3, #1
 800619a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	3314      	adds	r3, #20
 80061a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061ac:	e841 2300 	strex	r3, r2, [r1]
 80061b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1e5      	bne.n	8006184 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d119      	bne.n	80061f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	330c      	adds	r3, #12
 80061c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	e853 3f00 	ldrex	r3, [r3]
 80061ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	f023 0310 	bic.w	r3, r3, #16
 80061d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	330c      	adds	r3, #12
 80061de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061e0:	61ba      	str	r2, [r7, #24]
 80061e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e4:	6979      	ldr	r1, [r7, #20]
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	e841 2300 	strex	r3, r2, [r1]
 80061ec:	613b      	str	r3, [r7, #16]
   return(result);
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1e5      	bne.n	80061c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2220      	movs	r2, #32
 80061f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006202:	bf00      	nop
 8006204:	3754      	adds	r7, #84	@ 0x54
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
	...

08006210 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006214:	b0c0      	sub	sp, #256	@ 0x100
 8006216:	af00      	add	r7, sp, #0
 8006218:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800621c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800622c:	68d9      	ldr	r1, [r3, #12]
 800622e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	ea40 0301 	orr.w	r3, r0, r1
 8006238:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800623a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	431a      	orrs	r2, r3
 8006248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	431a      	orrs	r2, r3
 8006250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	4313      	orrs	r3, r2
 8006258:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800625c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006268:	f021 010c 	bic.w	r1, r1, #12
 800626c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006276:	430b      	orrs	r3, r1
 8006278:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800627a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800628a:	6999      	ldr	r1, [r3, #24]
 800628c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	ea40 0301 	orr.w	r3, r0, r1
 8006296:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	4b8f      	ldr	r3, [pc, #572]	@ (80064dc <UART_SetConfig+0x2cc>)
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d005      	beq.n	80062b0 <UART_SetConfig+0xa0>
 80062a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	4b8d      	ldr	r3, [pc, #564]	@ (80064e0 <UART_SetConfig+0x2d0>)
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d104      	bne.n	80062ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062b0:	f7fe fb62 	bl	8004978 <HAL_RCC_GetPCLK2Freq>
 80062b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80062b8:	e003      	b.n	80062c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062ba:	f7fe fb49 	bl	8004950 <HAL_RCC_GetPCLK1Freq>
 80062be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062cc:	f040 810c 	bne.w	80064e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062d4:	2200      	movs	r2, #0
 80062d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80062da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80062de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80062e2:	4622      	mov	r2, r4
 80062e4:	462b      	mov	r3, r5
 80062e6:	1891      	adds	r1, r2, r2
 80062e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80062ea:	415b      	adcs	r3, r3
 80062ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80062ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80062f2:	4621      	mov	r1, r4
 80062f4:	eb12 0801 	adds.w	r8, r2, r1
 80062f8:	4629      	mov	r1, r5
 80062fa:	eb43 0901 	adc.w	r9, r3, r1
 80062fe:	f04f 0200 	mov.w	r2, #0
 8006302:	f04f 0300 	mov.w	r3, #0
 8006306:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800630a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800630e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006312:	4690      	mov	r8, r2
 8006314:	4699      	mov	r9, r3
 8006316:	4623      	mov	r3, r4
 8006318:	eb18 0303 	adds.w	r3, r8, r3
 800631c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006320:	462b      	mov	r3, r5
 8006322:	eb49 0303 	adc.w	r3, r9, r3
 8006326:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800632a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006336:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800633a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800633e:	460b      	mov	r3, r1
 8006340:	18db      	adds	r3, r3, r3
 8006342:	653b      	str	r3, [r7, #80]	@ 0x50
 8006344:	4613      	mov	r3, r2
 8006346:	eb42 0303 	adc.w	r3, r2, r3
 800634a:	657b      	str	r3, [r7, #84]	@ 0x54
 800634c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006350:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006354:	f7fa fda6 	bl	8000ea4 <__aeabi_uldivmod>
 8006358:	4602      	mov	r2, r0
 800635a:	460b      	mov	r3, r1
 800635c:	4b61      	ldr	r3, [pc, #388]	@ (80064e4 <UART_SetConfig+0x2d4>)
 800635e:	fba3 2302 	umull	r2, r3, r3, r2
 8006362:	095b      	lsrs	r3, r3, #5
 8006364:	011c      	lsls	r4, r3, #4
 8006366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800636a:	2200      	movs	r2, #0
 800636c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006370:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006374:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006378:	4642      	mov	r2, r8
 800637a:	464b      	mov	r3, r9
 800637c:	1891      	adds	r1, r2, r2
 800637e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006380:	415b      	adcs	r3, r3
 8006382:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006384:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006388:	4641      	mov	r1, r8
 800638a:	eb12 0a01 	adds.w	sl, r2, r1
 800638e:	4649      	mov	r1, r9
 8006390:	eb43 0b01 	adc.w	fp, r3, r1
 8006394:	f04f 0200 	mov.w	r2, #0
 8006398:	f04f 0300 	mov.w	r3, #0
 800639c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063a8:	4692      	mov	sl, r2
 80063aa:	469b      	mov	fp, r3
 80063ac:	4643      	mov	r3, r8
 80063ae:	eb1a 0303 	adds.w	r3, sl, r3
 80063b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80063b6:	464b      	mov	r3, r9
 80063b8:	eb4b 0303 	adc.w	r3, fp, r3
 80063bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80063c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80063d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80063d4:	460b      	mov	r3, r1
 80063d6:	18db      	adds	r3, r3, r3
 80063d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80063da:	4613      	mov	r3, r2
 80063dc:	eb42 0303 	adc.w	r3, r2, r3
 80063e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80063e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80063e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80063ea:	f7fa fd5b 	bl	8000ea4 <__aeabi_uldivmod>
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	4611      	mov	r1, r2
 80063f4:	4b3b      	ldr	r3, [pc, #236]	@ (80064e4 <UART_SetConfig+0x2d4>)
 80063f6:	fba3 2301 	umull	r2, r3, r3, r1
 80063fa:	095b      	lsrs	r3, r3, #5
 80063fc:	2264      	movs	r2, #100	@ 0x64
 80063fe:	fb02 f303 	mul.w	r3, r2, r3
 8006402:	1acb      	subs	r3, r1, r3
 8006404:	00db      	lsls	r3, r3, #3
 8006406:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800640a:	4b36      	ldr	r3, [pc, #216]	@ (80064e4 <UART_SetConfig+0x2d4>)
 800640c:	fba3 2302 	umull	r2, r3, r3, r2
 8006410:	095b      	lsrs	r3, r3, #5
 8006412:	005b      	lsls	r3, r3, #1
 8006414:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006418:	441c      	add	r4, r3
 800641a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800641e:	2200      	movs	r2, #0
 8006420:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006424:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006428:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800642c:	4642      	mov	r2, r8
 800642e:	464b      	mov	r3, r9
 8006430:	1891      	adds	r1, r2, r2
 8006432:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006434:	415b      	adcs	r3, r3
 8006436:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006438:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800643c:	4641      	mov	r1, r8
 800643e:	1851      	adds	r1, r2, r1
 8006440:	6339      	str	r1, [r7, #48]	@ 0x30
 8006442:	4649      	mov	r1, r9
 8006444:	414b      	adcs	r3, r1
 8006446:	637b      	str	r3, [r7, #52]	@ 0x34
 8006448:	f04f 0200 	mov.w	r2, #0
 800644c:	f04f 0300 	mov.w	r3, #0
 8006450:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006454:	4659      	mov	r1, fp
 8006456:	00cb      	lsls	r3, r1, #3
 8006458:	4651      	mov	r1, sl
 800645a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800645e:	4651      	mov	r1, sl
 8006460:	00ca      	lsls	r2, r1, #3
 8006462:	4610      	mov	r0, r2
 8006464:	4619      	mov	r1, r3
 8006466:	4603      	mov	r3, r0
 8006468:	4642      	mov	r2, r8
 800646a:	189b      	adds	r3, r3, r2
 800646c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006470:	464b      	mov	r3, r9
 8006472:	460a      	mov	r2, r1
 8006474:	eb42 0303 	adc.w	r3, r2, r3
 8006478:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800647c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006488:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800648c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006490:	460b      	mov	r3, r1
 8006492:	18db      	adds	r3, r3, r3
 8006494:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006496:	4613      	mov	r3, r2
 8006498:	eb42 0303 	adc.w	r3, r2, r3
 800649c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800649e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80064a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80064a6:	f7fa fcfd 	bl	8000ea4 <__aeabi_uldivmod>
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	4b0d      	ldr	r3, [pc, #52]	@ (80064e4 <UART_SetConfig+0x2d4>)
 80064b0:	fba3 1302 	umull	r1, r3, r3, r2
 80064b4:	095b      	lsrs	r3, r3, #5
 80064b6:	2164      	movs	r1, #100	@ 0x64
 80064b8:	fb01 f303 	mul.w	r3, r1, r3
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	00db      	lsls	r3, r3, #3
 80064c0:	3332      	adds	r3, #50	@ 0x32
 80064c2:	4a08      	ldr	r2, [pc, #32]	@ (80064e4 <UART_SetConfig+0x2d4>)
 80064c4:	fba2 2303 	umull	r2, r3, r2, r3
 80064c8:	095b      	lsrs	r3, r3, #5
 80064ca:	f003 0207 	and.w	r2, r3, #7
 80064ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4422      	add	r2, r4
 80064d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064d8:	e106      	b.n	80066e8 <UART_SetConfig+0x4d8>
 80064da:	bf00      	nop
 80064dc:	40011000 	.word	0x40011000
 80064e0:	40011400 	.word	0x40011400
 80064e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064ec:	2200      	movs	r2, #0
 80064ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80064f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80064f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80064fa:	4642      	mov	r2, r8
 80064fc:	464b      	mov	r3, r9
 80064fe:	1891      	adds	r1, r2, r2
 8006500:	6239      	str	r1, [r7, #32]
 8006502:	415b      	adcs	r3, r3
 8006504:	627b      	str	r3, [r7, #36]	@ 0x24
 8006506:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800650a:	4641      	mov	r1, r8
 800650c:	1854      	adds	r4, r2, r1
 800650e:	4649      	mov	r1, r9
 8006510:	eb43 0501 	adc.w	r5, r3, r1
 8006514:	f04f 0200 	mov.w	r2, #0
 8006518:	f04f 0300 	mov.w	r3, #0
 800651c:	00eb      	lsls	r3, r5, #3
 800651e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006522:	00e2      	lsls	r2, r4, #3
 8006524:	4614      	mov	r4, r2
 8006526:	461d      	mov	r5, r3
 8006528:	4643      	mov	r3, r8
 800652a:	18e3      	adds	r3, r4, r3
 800652c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006530:	464b      	mov	r3, r9
 8006532:	eb45 0303 	adc.w	r3, r5, r3
 8006536:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800653a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006546:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800654a:	f04f 0200 	mov.w	r2, #0
 800654e:	f04f 0300 	mov.w	r3, #0
 8006552:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006556:	4629      	mov	r1, r5
 8006558:	008b      	lsls	r3, r1, #2
 800655a:	4621      	mov	r1, r4
 800655c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006560:	4621      	mov	r1, r4
 8006562:	008a      	lsls	r2, r1, #2
 8006564:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006568:	f7fa fc9c 	bl	8000ea4 <__aeabi_uldivmod>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	4b60      	ldr	r3, [pc, #384]	@ (80066f4 <UART_SetConfig+0x4e4>)
 8006572:	fba3 2302 	umull	r2, r3, r3, r2
 8006576:	095b      	lsrs	r3, r3, #5
 8006578:	011c      	lsls	r4, r3, #4
 800657a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800657e:	2200      	movs	r2, #0
 8006580:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006584:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006588:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800658c:	4642      	mov	r2, r8
 800658e:	464b      	mov	r3, r9
 8006590:	1891      	adds	r1, r2, r2
 8006592:	61b9      	str	r1, [r7, #24]
 8006594:	415b      	adcs	r3, r3
 8006596:	61fb      	str	r3, [r7, #28]
 8006598:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800659c:	4641      	mov	r1, r8
 800659e:	1851      	adds	r1, r2, r1
 80065a0:	6139      	str	r1, [r7, #16]
 80065a2:	4649      	mov	r1, r9
 80065a4:	414b      	adcs	r3, r1
 80065a6:	617b      	str	r3, [r7, #20]
 80065a8:	f04f 0200 	mov.w	r2, #0
 80065ac:	f04f 0300 	mov.w	r3, #0
 80065b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065b4:	4659      	mov	r1, fp
 80065b6:	00cb      	lsls	r3, r1, #3
 80065b8:	4651      	mov	r1, sl
 80065ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065be:	4651      	mov	r1, sl
 80065c0:	00ca      	lsls	r2, r1, #3
 80065c2:	4610      	mov	r0, r2
 80065c4:	4619      	mov	r1, r3
 80065c6:	4603      	mov	r3, r0
 80065c8:	4642      	mov	r2, r8
 80065ca:	189b      	adds	r3, r3, r2
 80065cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80065d0:	464b      	mov	r3, r9
 80065d2:	460a      	mov	r2, r1
 80065d4:	eb42 0303 	adc.w	r3, r2, r3
 80065d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80065dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80065e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80065e8:	f04f 0200 	mov.w	r2, #0
 80065ec:	f04f 0300 	mov.w	r3, #0
 80065f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80065f4:	4649      	mov	r1, r9
 80065f6:	008b      	lsls	r3, r1, #2
 80065f8:	4641      	mov	r1, r8
 80065fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065fe:	4641      	mov	r1, r8
 8006600:	008a      	lsls	r2, r1, #2
 8006602:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006606:	f7fa fc4d 	bl	8000ea4 <__aeabi_uldivmod>
 800660a:	4602      	mov	r2, r0
 800660c:	460b      	mov	r3, r1
 800660e:	4611      	mov	r1, r2
 8006610:	4b38      	ldr	r3, [pc, #224]	@ (80066f4 <UART_SetConfig+0x4e4>)
 8006612:	fba3 2301 	umull	r2, r3, r3, r1
 8006616:	095b      	lsrs	r3, r3, #5
 8006618:	2264      	movs	r2, #100	@ 0x64
 800661a:	fb02 f303 	mul.w	r3, r2, r3
 800661e:	1acb      	subs	r3, r1, r3
 8006620:	011b      	lsls	r3, r3, #4
 8006622:	3332      	adds	r3, #50	@ 0x32
 8006624:	4a33      	ldr	r2, [pc, #204]	@ (80066f4 <UART_SetConfig+0x4e4>)
 8006626:	fba2 2303 	umull	r2, r3, r2, r3
 800662a:	095b      	lsrs	r3, r3, #5
 800662c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006630:	441c      	add	r4, r3
 8006632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006636:	2200      	movs	r2, #0
 8006638:	673b      	str	r3, [r7, #112]	@ 0x70
 800663a:	677a      	str	r2, [r7, #116]	@ 0x74
 800663c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006640:	4642      	mov	r2, r8
 8006642:	464b      	mov	r3, r9
 8006644:	1891      	adds	r1, r2, r2
 8006646:	60b9      	str	r1, [r7, #8]
 8006648:	415b      	adcs	r3, r3
 800664a:	60fb      	str	r3, [r7, #12]
 800664c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006650:	4641      	mov	r1, r8
 8006652:	1851      	adds	r1, r2, r1
 8006654:	6039      	str	r1, [r7, #0]
 8006656:	4649      	mov	r1, r9
 8006658:	414b      	adcs	r3, r1
 800665a:	607b      	str	r3, [r7, #4]
 800665c:	f04f 0200 	mov.w	r2, #0
 8006660:	f04f 0300 	mov.w	r3, #0
 8006664:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006668:	4659      	mov	r1, fp
 800666a:	00cb      	lsls	r3, r1, #3
 800666c:	4651      	mov	r1, sl
 800666e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006672:	4651      	mov	r1, sl
 8006674:	00ca      	lsls	r2, r1, #3
 8006676:	4610      	mov	r0, r2
 8006678:	4619      	mov	r1, r3
 800667a:	4603      	mov	r3, r0
 800667c:	4642      	mov	r2, r8
 800667e:	189b      	adds	r3, r3, r2
 8006680:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006682:	464b      	mov	r3, r9
 8006684:	460a      	mov	r2, r1
 8006686:	eb42 0303 	adc.w	r3, r2, r3
 800668a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800668c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	663b      	str	r3, [r7, #96]	@ 0x60
 8006696:	667a      	str	r2, [r7, #100]	@ 0x64
 8006698:	f04f 0200 	mov.w	r2, #0
 800669c:	f04f 0300 	mov.w	r3, #0
 80066a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80066a4:	4649      	mov	r1, r9
 80066a6:	008b      	lsls	r3, r1, #2
 80066a8:	4641      	mov	r1, r8
 80066aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066ae:	4641      	mov	r1, r8
 80066b0:	008a      	lsls	r2, r1, #2
 80066b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80066b6:	f7fa fbf5 	bl	8000ea4 <__aeabi_uldivmod>
 80066ba:	4602      	mov	r2, r0
 80066bc:	460b      	mov	r3, r1
 80066be:	4b0d      	ldr	r3, [pc, #52]	@ (80066f4 <UART_SetConfig+0x4e4>)
 80066c0:	fba3 1302 	umull	r1, r3, r3, r2
 80066c4:	095b      	lsrs	r3, r3, #5
 80066c6:	2164      	movs	r1, #100	@ 0x64
 80066c8:	fb01 f303 	mul.w	r3, r1, r3
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	011b      	lsls	r3, r3, #4
 80066d0:	3332      	adds	r3, #50	@ 0x32
 80066d2:	4a08      	ldr	r2, [pc, #32]	@ (80066f4 <UART_SetConfig+0x4e4>)
 80066d4:	fba2 2303 	umull	r2, r3, r2, r3
 80066d8:	095b      	lsrs	r3, r3, #5
 80066da:	f003 020f 	and.w	r2, r3, #15
 80066de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4422      	add	r2, r4
 80066e6:	609a      	str	r2, [r3, #8]
}
 80066e8:	bf00      	nop
 80066ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80066ee:	46bd      	mov	sp, r7
 80066f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066f4:	51eb851f 	.word	0x51eb851f

080066f8 <__cvt>:
 80066f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066fc:	ec57 6b10 	vmov	r6, r7, d0
 8006700:	2f00      	cmp	r7, #0
 8006702:	460c      	mov	r4, r1
 8006704:	4619      	mov	r1, r3
 8006706:	463b      	mov	r3, r7
 8006708:	bfbb      	ittet	lt
 800670a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800670e:	461f      	movlt	r7, r3
 8006710:	2300      	movge	r3, #0
 8006712:	232d      	movlt	r3, #45	@ 0x2d
 8006714:	700b      	strb	r3, [r1, #0]
 8006716:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006718:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800671c:	4691      	mov	r9, r2
 800671e:	f023 0820 	bic.w	r8, r3, #32
 8006722:	bfbc      	itt	lt
 8006724:	4632      	movlt	r2, r6
 8006726:	4616      	movlt	r6, r2
 8006728:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800672c:	d005      	beq.n	800673a <__cvt+0x42>
 800672e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006732:	d100      	bne.n	8006736 <__cvt+0x3e>
 8006734:	3401      	adds	r4, #1
 8006736:	2102      	movs	r1, #2
 8006738:	e000      	b.n	800673c <__cvt+0x44>
 800673a:	2103      	movs	r1, #3
 800673c:	ab03      	add	r3, sp, #12
 800673e:	9301      	str	r3, [sp, #4]
 8006740:	ab02      	add	r3, sp, #8
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	ec47 6b10 	vmov	d0, r6, r7
 8006748:	4653      	mov	r3, sl
 800674a:	4622      	mov	r2, r4
 800674c:	f000 fea4 	bl	8007498 <_dtoa_r>
 8006750:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006754:	4605      	mov	r5, r0
 8006756:	d119      	bne.n	800678c <__cvt+0x94>
 8006758:	f019 0f01 	tst.w	r9, #1
 800675c:	d00e      	beq.n	800677c <__cvt+0x84>
 800675e:	eb00 0904 	add.w	r9, r0, r4
 8006762:	2200      	movs	r2, #0
 8006764:	2300      	movs	r3, #0
 8006766:	4630      	mov	r0, r6
 8006768:	4639      	mov	r1, r7
 800676a:	f7fa f9cd 	bl	8000b08 <__aeabi_dcmpeq>
 800676e:	b108      	cbz	r0, 8006774 <__cvt+0x7c>
 8006770:	f8cd 900c 	str.w	r9, [sp, #12]
 8006774:	2230      	movs	r2, #48	@ 0x30
 8006776:	9b03      	ldr	r3, [sp, #12]
 8006778:	454b      	cmp	r3, r9
 800677a:	d31e      	bcc.n	80067ba <__cvt+0xc2>
 800677c:	9b03      	ldr	r3, [sp, #12]
 800677e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006780:	1b5b      	subs	r3, r3, r5
 8006782:	4628      	mov	r0, r5
 8006784:	6013      	str	r3, [r2, #0]
 8006786:	b004      	add	sp, #16
 8006788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800678c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006790:	eb00 0904 	add.w	r9, r0, r4
 8006794:	d1e5      	bne.n	8006762 <__cvt+0x6a>
 8006796:	7803      	ldrb	r3, [r0, #0]
 8006798:	2b30      	cmp	r3, #48	@ 0x30
 800679a:	d10a      	bne.n	80067b2 <__cvt+0xba>
 800679c:	2200      	movs	r2, #0
 800679e:	2300      	movs	r3, #0
 80067a0:	4630      	mov	r0, r6
 80067a2:	4639      	mov	r1, r7
 80067a4:	f7fa f9b0 	bl	8000b08 <__aeabi_dcmpeq>
 80067a8:	b918      	cbnz	r0, 80067b2 <__cvt+0xba>
 80067aa:	f1c4 0401 	rsb	r4, r4, #1
 80067ae:	f8ca 4000 	str.w	r4, [sl]
 80067b2:	f8da 3000 	ldr.w	r3, [sl]
 80067b6:	4499      	add	r9, r3
 80067b8:	e7d3      	b.n	8006762 <__cvt+0x6a>
 80067ba:	1c59      	adds	r1, r3, #1
 80067bc:	9103      	str	r1, [sp, #12]
 80067be:	701a      	strb	r2, [r3, #0]
 80067c0:	e7d9      	b.n	8006776 <__cvt+0x7e>

080067c2 <__exponent>:
 80067c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067c4:	2900      	cmp	r1, #0
 80067c6:	bfba      	itte	lt
 80067c8:	4249      	neglt	r1, r1
 80067ca:	232d      	movlt	r3, #45	@ 0x2d
 80067cc:	232b      	movge	r3, #43	@ 0x2b
 80067ce:	2909      	cmp	r1, #9
 80067d0:	7002      	strb	r2, [r0, #0]
 80067d2:	7043      	strb	r3, [r0, #1]
 80067d4:	dd29      	ble.n	800682a <__exponent+0x68>
 80067d6:	f10d 0307 	add.w	r3, sp, #7
 80067da:	461d      	mov	r5, r3
 80067dc:	270a      	movs	r7, #10
 80067de:	461a      	mov	r2, r3
 80067e0:	fbb1 f6f7 	udiv	r6, r1, r7
 80067e4:	fb07 1416 	mls	r4, r7, r6, r1
 80067e8:	3430      	adds	r4, #48	@ 0x30
 80067ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 80067ee:	460c      	mov	r4, r1
 80067f0:	2c63      	cmp	r4, #99	@ 0x63
 80067f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80067f6:	4631      	mov	r1, r6
 80067f8:	dcf1      	bgt.n	80067de <__exponent+0x1c>
 80067fa:	3130      	adds	r1, #48	@ 0x30
 80067fc:	1e94      	subs	r4, r2, #2
 80067fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006802:	1c41      	adds	r1, r0, #1
 8006804:	4623      	mov	r3, r4
 8006806:	42ab      	cmp	r3, r5
 8006808:	d30a      	bcc.n	8006820 <__exponent+0x5e>
 800680a:	f10d 0309 	add.w	r3, sp, #9
 800680e:	1a9b      	subs	r3, r3, r2
 8006810:	42ac      	cmp	r4, r5
 8006812:	bf88      	it	hi
 8006814:	2300      	movhi	r3, #0
 8006816:	3302      	adds	r3, #2
 8006818:	4403      	add	r3, r0
 800681a:	1a18      	subs	r0, r3, r0
 800681c:	b003      	add	sp, #12
 800681e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006820:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006824:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006828:	e7ed      	b.n	8006806 <__exponent+0x44>
 800682a:	2330      	movs	r3, #48	@ 0x30
 800682c:	3130      	adds	r1, #48	@ 0x30
 800682e:	7083      	strb	r3, [r0, #2]
 8006830:	70c1      	strb	r1, [r0, #3]
 8006832:	1d03      	adds	r3, r0, #4
 8006834:	e7f1      	b.n	800681a <__exponent+0x58>
	...

08006838 <_printf_float>:
 8006838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800683c:	b08d      	sub	sp, #52	@ 0x34
 800683e:	460c      	mov	r4, r1
 8006840:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006844:	4616      	mov	r6, r2
 8006846:	461f      	mov	r7, r3
 8006848:	4605      	mov	r5, r0
 800684a:	f000 fd23 	bl	8007294 <_localeconv_r>
 800684e:	6803      	ldr	r3, [r0, #0]
 8006850:	9304      	str	r3, [sp, #16]
 8006852:	4618      	mov	r0, r3
 8006854:	f7f9 fd2c 	bl	80002b0 <strlen>
 8006858:	2300      	movs	r3, #0
 800685a:	930a      	str	r3, [sp, #40]	@ 0x28
 800685c:	f8d8 3000 	ldr.w	r3, [r8]
 8006860:	9005      	str	r0, [sp, #20]
 8006862:	3307      	adds	r3, #7
 8006864:	f023 0307 	bic.w	r3, r3, #7
 8006868:	f103 0208 	add.w	r2, r3, #8
 800686c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006870:	f8d4 b000 	ldr.w	fp, [r4]
 8006874:	f8c8 2000 	str.w	r2, [r8]
 8006878:	e9d3 8900 	ldrd	r8, r9, [r3]
 800687c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006880:	9307      	str	r3, [sp, #28]
 8006882:	f8cd 8018 	str.w	r8, [sp, #24]
 8006886:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800688a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800688e:	4b9c      	ldr	r3, [pc, #624]	@ (8006b00 <_printf_float+0x2c8>)
 8006890:	f04f 32ff 	mov.w	r2, #4294967295
 8006894:	f7fa f96a 	bl	8000b6c <__aeabi_dcmpun>
 8006898:	bb70      	cbnz	r0, 80068f8 <_printf_float+0xc0>
 800689a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800689e:	4b98      	ldr	r3, [pc, #608]	@ (8006b00 <_printf_float+0x2c8>)
 80068a0:	f04f 32ff 	mov.w	r2, #4294967295
 80068a4:	f7fa f944 	bl	8000b30 <__aeabi_dcmple>
 80068a8:	bb30      	cbnz	r0, 80068f8 <_printf_float+0xc0>
 80068aa:	2200      	movs	r2, #0
 80068ac:	2300      	movs	r3, #0
 80068ae:	4640      	mov	r0, r8
 80068b0:	4649      	mov	r1, r9
 80068b2:	f7fa f933 	bl	8000b1c <__aeabi_dcmplt>
 80068b6:	b110      	cbz	r0, 80068be <_printf_float+0x86>
 80068b8:	232d      	movs	r3, #45	@ 0x2d
 80068ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068be:	4a91      	ldr	r2, [pc, #580]	@ (8006b04 <_printf_float+0x2cc>)
 80068c0:	4b91      	ldr	r3, [pc, #580]	@ (8006b08 <_printf_float+0x2d0>)
 80068c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80068c6:	bf8c      	ite	hi
 80068c8:	4690      	movhi	r8, r2
 80068ca:	4698      	movls	r8, r3
 80068cc:	2303      	movs	r3, #3
 80068ce:	6123      	str	r3, [r4, #16]
 80068d0:	f02b 0304 	bic.w	r3, fp, #4
 80068d4:	6023      	str	r3, [r4, #0]
 80068d6:	f04f 0900 	mov.w	r9, #0
 80068da:	9700      	str	r7, [sp, #0]
 80068dc:	4633      	mov	r3, r6
 80068de:	aa0b      	add	r2, sp, #44	@ 0x2c
 80068e0:	4621      	mov	r1, r4
 80068e2:	4628      	mov	r0, r5
 80068e4:	f000 f9d2 	bl	8006c8c <_printf_common>
 80068e8:	3001      	adds	r0, #1
 80068ea:	f040 808d 	bne.w	8006a08 <_printf_float+0x1d0>
 80068ee:	f04f 30ff 	mov.w	r0, #4294967295
 80068f2:	b00d      	add	sp, #52	@ 0x34
 80068f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f8:	4642      	mov	r2, r8
 80068fa:	464b      	mov	r3, r9
 80068fc:	4640      	mov	r0, r8
 80068fe:	4649      	mov	r1, r9
 8006900:	f7fa f934 	bl	8000b6c <__aeabi_dcmpun>
 8006904:	b140      	cbz	r0, 8006918 <_printf_float+0xe0>
 8006906:	464b      	mov	r3, r9
 8006908:	2b00      	cmp	r3, #0
 800690a:	bfbc      	itt	lt
 800690c:	232d      	movlt	r3, #45	@ 0x2d
 800690e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006912:	4a7e      	ldr	r2, [pc, #504]	@ (8006b0c <_printf_float+0x2d4>)
 8006914:	4b7e      	ldr	r3, [pc, #504]	@ (8006b10 <_printf_float+0x2d8>)
 8006916:	e7d4      	b.n	80068c2 <_printf_float+0x8a>
 8006918:	6863      	ldr	r3, [r4, #4]
 800691a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800691e:	9206      	str	r2, [sp, #24]
 8006920:	1c5a      	adds	r2, r3, #1
 8006922:	d13b      	bne.n	800699c <_printf_float+0x164>
 8006924:	2306      	movs	r3, #6
 8006926:	6063      	str	r3, [r4, #4]
 8006928:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800692c:	2300      	movs	r3, #0
 800692e:	6022      	str	r2, [r4, #0]
 8006930:	9303      	str	r3, [sp, #12]
 8006932:	ab0a      	add	r3, sp, #40	@ 0x28
 8006934:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006938:	ab09      	add	r3, sp, #36	@ 0x24
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	6861      	ldr	r1, [r4, #4]
 800693e:	ec49 8b10 	vmov	d0, r8, r9
 8006942:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006946:	4628      	mov	r0, r5
 8006948:	f7ff fed6 	bl	80066f8 <__cvt>
 800694c:	9b06      	ldr	r3, [sp, #24]
 800694e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006950:	2b47      	cmp	r3, #71	@ 0x47
 8006952:	4680      	mov	r8, r0
 8006954:	d129      	bne.n	80069aa <_printf_float+0x172>
 8006956:	1cc8      	adds	r0, r1, #3
 8006958:	db02      	blt.n	8006960 <_printf_float+0x128>
 800695a:	6863      	ldr	r3, [r4, #4]
 800695c:	4299      	cmp	r1, r3
 800695e:	dd41      	ble.n	80069e4 <_printf_float+0x1ac>
 8006960:	f1aa 0a02 	sub.w	sl, sl, #2
 8006964:	fa5f fa8a 	uxtb.w	sl, sl
 8006968:	3901      	subs	r1, #1
 800696a:	4652      	mov	r2, sl
 800696c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006970:	9109      	str	r1, [sp, #36]	@ 0x24
 8006972:	f7ff ff26 	bl	80067c2 <__exponent>
 8006976:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006978:	1813      	adds	r3, r2, r0
 800697a:	2a01      	cmp	r2, #1
 800697c:	4681      	mov	r9, r0
 800697e:	6123      	str	r3, [r4, #16]
 8006980:	dc02      	bgt.n	8006988 <_printf_float+0x150>
 8006982:	6822      	ldr	r2, [r4, #0]
 8006984:	07d2      	lsls	r2, r2, #31
 8006986:	d501      	bpl.n	800698c <_printf_float+0x154>
 8006988:	3301      	adds	r3, #1
 800698a:	6123      	str	r3, [r4, #16]
 800698c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006990:	2b00      	cmp	r3, #0
 8006992:	d0a2      	beq.n	80068da <_printf_float+0xa2>
 8006994:	232d      	movs	r3, #45	@ 0x2d
 8006996:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800699a:	e79e      	b.n	80068da <_printf_float+0xa2>
 800699c:	9a06      	ldr	r2, [sp, #24]
 800699e:	2a47      	cmp	r2, #71	@ 0x47
 80069a0:	d1c2      	bne.n	8006928 <_printf_float+0xf0>
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1c0      	bne.n	8006928 <_printf_float+0xf0>
 80069a6:	2301      	movs	r3, #1
 80069a8:	e7bd      	b.n	8006926 <_printf_float+0xee>
 80069aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80069ae:	d9db      	bls.n	8006968 <_printf_float+0x130>
 80069b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80069b4:	d118      	bne.n	80069e8 <_printf_float+0x1b0>
 80069b6:	2900      	cmp	r1, #0
 80069b8:	6863      	ldr	r3, [r4, #4]
 80069ba:	dd0b      	ble.n	80069d4 <_printf_float+0x19c>
 80069bc:	6121      	str	r1, [r4, #16]
 80069be:	b913      	cbnz	r3, 80069c6 <_printf_float+0x18e>
 80069c0:	6822      	ldr	r2, [r4, #0]
 80069c2:	07d0      	lsls	r0, r2, #31
 80069c4:	d502      	bpl.n	80069cc <_printf_float+0x194>
 80069c6:	3301      	adds	r3, #1
 80069c8:	440b      	add	r3, r1
 80069ca:	6123      	str	r3, [r4, #16]
 80069cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80069ce:	f04f 0900 	mov.w	r9, #0
 80069d2:	e7db      	b.n	800698c <_printf_float+0x154>
 80069d4:	b913      	cbnz	r3, 80069dc <_printf_float+0x1a4>
 80069d6:	6822      	ldr	r2, [r4, #0]
 80069d8:	07d2      	lsls	r2, r2, #31
 80069da:	d501      	bpl.n	80069e0 <_printf_float+0x1a8>
 80069dc:	3302      	adds	r3, #2
 80069de:	e7f4      	b.n	80069ca <_printf_float+0x192>
 80069e0:	2301      	movs	r3, #1
 80069e2:	e7f2      	b.n	80069ca <_printf_float+0x192>
 80069e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80069e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069ea:	4299      	cmp	r1, r3
 80069ec:	db05      	blt.n	80069fa <_printf_float+0x1c2>
 80069ee:	6823      	ldr	r3, [r4, #0]
 80069f0:	6121      	str	r1, [r4, #16]
 80069f2:	07d8      	lsls	r0, r3, #31
 80069f4:	d5ea      	bpl.n	80069cc <_printf_float+0x194>
 80069f6:	1c4b      	adds	r3, r1, #1
 80069f8:	e7e7      	b.n	80069ca <_printf_float+0x192>
 80069fa:	2900      	cmp	r1, #0
 80069fc:	bfd4      	ite	le
 80069fe:	f1c1 0202 	rsble	r2, r1, #2
 8006a02:	2201      	movgt	r2, #1
 8006a04:	4413      	add	r3, r2
 8006a06:	e7e0      	b.n	80069ca <_printf_float+0x192>
 8006a08:	6823      	ldr	r3, [r4, #0]
 8006a0a:	055a      	lsls	r2, r3, #21
 8006a0c:	d407      	bmi.n	8006a1e <_printf_float+0x1e6>
 8006a0e:	6923      	ldr	r3, [r4, #16]
 8006a10:	4642      	mov	r2, r8
 8006a12:	4631      	mov	r1, r6
 8006a14:	4628      	mov	r0, r5
 8006a16:	47b8      	blx	r7
 8006a18:	3001      	adds	r0, #1
 8006a1a:	d12b      	bne.n	8006a74 <_printf_float+0x23c>
 8006a1c:	e767      	b.n	80068ee <_printf_float+0xb6>
 8006a1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006a22:	f240 80dd 	bls.w	8006be0 <_printf_float+0x3a8>
 8006a26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	f7fa f86b 	bl	8000b08 <__aeabi_dcmpeq>
 8006a32:	2800      	cmp	r0, #0
 8006a34:	d033      	beq.n	8006a9e <_printf_float+0x266>
 8006a36:	4a37      	ldr	r2, [pc, #220]	@ (8006b14 <_printf_float+0x2dc>)
 8006a38:	2301      	movs	r3, #1
 8006a3a:	4631      	mov	r1, r6
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	47b8      	blx	r7
 8006a40:	3001      	adds	r0, #1
 8006a42:	f43f af54 	beq.w	80068ee <_printf_float+0xb6>
 8006a46:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006a4a:	4543      	cmp	r3, r8
 8006a4c:	db02      	blt.n	8006a54 <_printf_float+0x21c>
 8006a4e:	6823      	ldr	r3, [r4, #0]
 8006a50:	07d8      	lsls	r0, r3, #31
 8006a52:	d50f      	bpl.n	8006a74 <_printf_float+0x23c>
 8006a54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a58:	4631      	mov	r1, r6
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	47b8      	blx	r7
 8006a5e:	3001      	adds	r0, #1
 8006a60:	f43f af45 	beq.w	80068ee <_printf_float+0xb6>
 8006a64:	f04f 0900 	mov.w	r9, #0
 8006a68:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a6c:	f104 0a1a 	add.w	sl, r4, #26
 8006a70:	45c8      	cmp	r8, r9
 8006a72:	dc09      	bgt.n	8006a88 <_printf_float+0x250>
 8006a74:	6823      	ldr	r3, [r4, #0]
 8006a76:	079b      	lsls	r3, r3, #30
 8006a78:	f100 8103 	bmi.w	8006c82 <_printf_float+0x44a>
 8006a7c:	68e0      	ldr	r0, [r4, #12]
 8006a7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a80:	4298      	cmp	r0, r3
 8006a82:	bfb8      	it	lt
 8006a84:	4618      	movlt	r0, r3
 8006a86:	e734      	b.n	80068f2 <_printf_float+0xba>
 8006a88:	2301      	movs	r3, #1
 8006a8a:	4652      	mov	r2, sl
 8006a8c:	4631      	mov	r1, r6
 8006a8e:	4628      	mov	r0, r5
 8006a90:	47b8      	blx	r7
 8006a92:	3001      	adds	r0, #1
 8006a94:	f43f af2b 	beq.w	80068ee <_printf_float+0xb6>
 8006a98:	f109 0901 	add.w	r9, r9, #1
 8006a9c:	e7e8      	b.n	8006a70 <_printf_float+0x238>
 8006a9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	dc39      	bgt.n	8006b18 <_printf_float+0x2e0>
 8006aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8006b14 <_printf_float+0x2dc>)
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	4631      	mov	r1, r6
 8006aaa:	4628      	mov	r0, r5
 8006aac:	47b8      	blx	r7
 8006aae:	3001      	adds	r0, #1
 8006ab0:	f43f af1d 	beq.w	80068ee <_printf_float+0xb6>
 8006ab4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006ab8:	ea59 0303 	orrs.w	r3, r9, r3
 8006abc:	d102      	bne.n	8006ac4 <_printf_float+0x28c>
 8006abe:	6823      	ldr	r3, [r4, #0]
 8006ac0:	07d9      	lsls	r1, r3, #31
 8006ac2:	d5d7      	bpl.n	8006a74 <_printf_float+0x23c>
 8006ac4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ac8:	4631      	mov	r1, r6
 8006aca:	4628      	mov	r0, r5
 8006acc:	47b8      	blx	r7
 8006ace:	3001      	adds	r0, #1
 8006ad0:	f43f af0d 	beq.w	80068ee <_printf_float+0xb6>
 8006ad4:	f04f 0a00 	mov.w	sl, #0
 8006ad8:	f104 0b1a 	add.w	fp, r4, #26
 8006adc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ade:	425b      	negs	r3, r3
 8006ae0:	4553      	cmp	r3, sl
 8006ae2:	dc01      	bgt.n	8006ae8 <_printf_float+0x2b0>
 8006ae4:	464b      	mov	r3, r9
 8006ae6:	e793      	b.n	8006a10 <_printf_float+0x1d8>
 8006ae8:	2301      	movs	r3, #1
 8006aea:	465a      	mov	r2, fp
 8006aec:	4631      	mov	r1, r6
 8006aee:	4628      	mov	r0, r5
 8006af0:	47b8      	blx	r7
 8006af2:	3001      	adds	r0, #1
 8006af4:	f43f aefb 	beq.w	80068ee <_printf_float+0xb6>
 8006af8:	f10a 0a01 	add.w	sl, sl, #1
 8006afc:	e7ee      	b.n	8006adc <_printf_float+0x2a4>
 8006afe:	bf00      	nop
 8006b00:	7fefffff 	.word	0x7fefffff
 8006b04:	08009d28 	.word	0x08009d28
 8006b08:	08009d24 	.word	0x08009d24
 8006b0c:	08009d30 	.word	0x08009d30
 8006b10:	08009d2c 	.word	0x08009d2c
 8006b14:	08009d34 	.word	0x08009d34
 8006b18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006b1a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006b1e:	4553      	cmp	r3, sl
 8006b20:	bfa8      	it	ge
 8006b22:	4653      	movge	r3, sl
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	4699      	mov	r9, r3
 8006b28:	dc36      	bgt.n	8006b98 <_printf_float+0x360>
 8006b2a:	f04f 0b00 	mov.w	fp, #0
 8006b2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b32:	f104 021a 	add.w	r2, r4, #26
 8006b36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006b38:	9306      	str	r3, [sp, #24]
 8006b3a:	eba3 0309 	sub.w	r3, r3, r9
 8006b3e:	455b      	cmp	r3, fp
 8006b40:	dc31      	bgt.n	8006ba6 <_printf_float+0x36e>
 8006b42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b44:	459a      	cmp	sl, r3
 8006b46:	dc3a      	bgt.n	8006bbe <_printf_float+0x386>
 8006b48:	6823      	ldr	r3, [r4, #0]
 8006b4a:	07da      	lsls	r2, r3, #31
 8006b4c:	d437      	bmi.n	8006bbe <_printf_float+0x386>
 8006b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b50:	ebaa 0903 	sub.w	r9, sl, r3
 8006b54:	9b06      	ldr	r3, [sp, #24]
 8006b56:	ebaa 0303 	sub.w	r3, sl, r3
 8006b5a:	4599      	cmp	r9, r3
 8006b5c:	bfa8      	it	ge
 8006b5e:	4699      	movge	r9, r3
 8006b60:	f1b9 0f00 	cmp.w	r9, #0
 8006b64:	dc33      	bgt.n	8006bce <_printf_float+0x396>
 8006b66:	f04f 0800 	mov.w	r8, #0
 8006b6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b6e:	f104 0b1a 	add.w	fp, r4, #26
 8006b72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b74:	ebaa 0303 	sub.w	r3, sl, r3
 8006b78:	eba3 0309 	sub.w	r3, r3, r9
 8006b7c:	4543      	cmp	r3, r8
 8006b7e:	f77f af79 	ble.w	8006a74 <_printf_float+0x23c>
 8006b82:	2301      	movs	r3, #1
 8006b84:	465a      	mov	r2, fp
 8006b86:	4631      	mov	r1, r6
 8006b88:	4628      	mov	r0, r5
 8006b8a:	47b8      	blx	r7
 8006b8c:	3001      	adds	r0, #1
 8006b8e:	f43f aeae 	beq.w	80068ee <_printf_float+0xb6>
 8006b92:	f108 0801 	add.w	r8, r8, #1
 8006b96:	e7ec      	b.n	8006b72 <_printf_float+0x33a>
 8006b98:	4642      	mov	r2, r8
 8006b9a:	4631      	mov	r1, r6
 8006b9c:	4628      	mov	r0, r5
 8006b9e:	47b8      	blx	r7
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	d1c2      	bne.n	8006b2a <_printf_float+0x2f2>
 8006ba4:	e6a3      	b.n	80068ee <_printf_float+0xb6>
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	4631      	mov	r1, r6
 8006baa:	4628      	mov	r0, r5
 8006bac:	9206      	str	r2, [sp, #24]
 8006bae:	47b8      	blx	r7
 8006bb0:	3001      	adds	r0, #1
 8006bb2:	f43f ae9c 	beq.w	80068ee <_printf_float+0xb6>
 8006bb6:	9a06      	ldr	r2, [sp, #24]
 8006bb8:	f10b 0b01 	add.w	fp, fp, #1
 8006bbc:	e7bb      	b.n	8006b36 <_printf_float+0x2fe>
 8006bbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bc2:	4631      	mov	r1, r6
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	47b8      	blx	r7
 8006bc8:	3001      	adds	r0, #1
 8006bca:	d1c0      	bne.n	8006b4e <_printf_float+0x316>
 8006bcc:	e68f      	b.n	80068ee <_printf_float+0xb6>
 8006bce:	9a06      	ldr	r2, [sp, #24]
 8006bd0:	464b      	mov	r3, r9
 8006bd2:	4442      	add	r2, r8
 8006bd4:	4631      	mov	r1, r6
 8006bd6:	4628      	mov	r0, r5
 8006bd8:	47b8      	blx	r7
 8006bda:	3001      	adds	r0, #1
 8006bdc:	d1c3      	bne.n	8006b66 <_printf_float+0x32e>
 8006bde:	e686      	b.n	80068ee <_printf_float+0xb6>
 8006be0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006be4:	f1ba 0f01 	cmp.w	sl, #1
 8006be8:	dc01      	bgt.n	8006bee <_printf_float+0x3b6>
 8006bea:	07db      	lsls	r3, r3, #31
 8006bec:	d536      	bpl.n	8006c5c <_printf_float+0x424>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	4642      	mov	r2, r8
 8006bf2:	4631      	mov	r1, r6
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	47b8      	blx	r7
 8006bf8:	3001      	adds	r0, #1
 8006bfa:	f43f ae78 	beq.w	80068ee <_printf_float+0xb6>
 8006bfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c02:	4631      	mov	r1, r6
 8006c04:	4628      	mov	r0, r5
 8006c06:	47b8      	blx	r7
 8006c08:	3001      	adds	r0, #1
 8006c0a:	f43f ae70 	beq.w	80068ee <_printf_float+0xb6>
 8006c0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006c12:	2200      	movs	r2, #0
 8006c14:	2300      	movs	r3, #0
 8006c16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c1a:	f7f9 ff75 	bl	8000b08 <__aeabi_dcmpeq>
 8006c1e:	b9c0      	cbnz	r0, 8006c52 <_printf_float+0x41a>
 8006c20:	4653      	mov	r3, sl
 8006c22:	f108 0201 	add.w	r2, r8, #1
 8006c26:	4631      	mov	r1, r6
 8006c28:	4628      	mov	r0, r5
 8006c2a:	47b8      	blx	r7
 8006c2c:	3001      	adds	r0, #1
 8006c2e:	d10c      	bne.n	8006c4a <_printf_float+0x412>
 8006c30:	e65d      	b.n	80068ee <_printf_float+0xb6>
 8006c32:	2301      	movs	r3, #1
 8006c34:	465a      	mov	r2, fp
 8006c36:	4631      	mov	r1, r6
 8006c38:	4628      	mov	r0, r5
 8006c3a:	47b8      	blx	r7
 8006c3c:	3001      	adds	r0, #1
 8006c3e:	f43f ae56 	beq.w	80068ee <_printf_float+0xb6>
 8006c42:	f108 0801 	add.w	r8, r8, #1
 8006c46:	45d0      	cmp	r8, sl
 8006c48:	dbf3      	blt.n	8006c32 <_printf_float+0x3fa>
 8006c4a:	464b      	mov	r3, r9
 8006c4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006c50:	e6df      	b.n	8006a12 <_printf_float+0x1da>
 8006c52:	f04f 0800 	mov.w	r8, #0
 8006c56:	f104 0b1a 	add.w	fp, r4, #26
 8006c5a:	e7f4      	b.n	8006c46 <_printf_float+0x40e>
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	4642      	mov	r2, r8
 8006c60:	e7e1      	b.n	8006c26 <_printf_float+0x3ee>
 8006c62:	2301      	movs	r3, #1
 8006c64:	464a      	mov	r2, r9
 8006c66:	4631      	mov	r1, r6
 8006c68:	4628      	mov	r0, r5
 8006c6a:	47b8      	blx	r7
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	f43f ae3e 	beq.w	80068ee <_printf_float+0xb6>
 8006c72:	f108 0801 	add.w	r8, r8, #1
 8006c76:	68e3      	ldr	r3, [r4, #12]
 8006c78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006c7a:	1a5b      	subs	r3, r3, r1
 8006c7c:	4543      	cmp	r3, r8
 8006c7e:	dcf0      	bgt.n	8006c62 <_printf_float+0x42a>
 8006c80:	e6fc      	b.n	8006a7c <_printf_float+0x244>
 8006c82:	f04f 0800 	mov.w	r8, #0
 8006c86:	f104 0919 	add.w	r9, r4, #25
 8006c8a:	e7f4      	b.n	8006c76 <_printf_float+0x43e>

08006c8c <_printf_common>:
 8006c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c90:	4616      	mov	r6, r2
 8006c92:	4698      	mov	r8, r3
 8006c94:	688a      	ldr	r2, [r1, #8]
 8006c96:	690b      	ldr	r3, [r1, #16]
 8006c98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	bfb8      	it	lt
 8006ca0:	4613      	movlt	r3, r2
 8006ca2:	6033      	str	r3, [r6, #0]
 8006ca4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ca8:	4607      	mov	r7, r0
 8006caa:	460c      	mov	r4, r1
 8006cac:	b10a      	cbz	r2, 8006cb2 <_printf_common+0x26>
 8006cae:	3301      	adds	r3, #1
 8006cb0:	6033      	str	r3, [r6, #0]
 8006cb2:	6823      	ldr	r3, [r4, #0]
 8006cb4:	0699      	lsls	r1, r3, #26
 8006cb6:	bf42      	ittt	mi
 8006cb8:	6833      	ldrmi	r3, [r6, #0]
 8006cba:	3302      	addmi	r3, #2
 8006cbc:	6033      	strmi	r3, [r6, #0]
 8006cbe:	6825      	ldr	r5, [r4, #0]
 8006cc0:	f015 0506 	ands.w	r5, r5, #6
 8006cc4:	d106      	bne.n	8006cd4 <_printf_common+0x48>
 8006cc6:	f104 0a19 	add.w	sl, r4, #25
 8006cca:	68e3      	ldr	r3, [r4, #12]
 8006ccc:	6832      	ldr	r2, [r6, #0]
 8006cce:	1a9b      	subs	r3, r3, r2
 8006cd0:	42ab      	cmp	r3, r5
 8006cd2:	dc26      	bgt.n	8006d22 <_printf_common+0x96>
 8006cd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006cd8:	6822      	ldr	r2, [r4, #0]
 8006cda:	3b00      	subs	r3, #0
 8006cdc:	bf18      	it	ne
 8006cde:	2301      	movne	r3, #1
 8006ce0:	0692      	lsls	r2, r2, #26
 8006ce2:	d42b      	bmi.n	8006d3c <_printf_common+0xb0>
 8006ce4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ce8:	4641      	mov	r1, r8
 8006cea:	4638      	mov	r0, r7
 8006cec:	47c8      	blx	r9
 8006cee:	3001      	adds	r0, #1
 8006cf0:	d01e      	beq.n	8006d30 <_printf_common+0xa4>
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	6922      	ldr	r2, [r4, #16]
 8006cf6:	f003 0306 	and.w	r3, r3, #6
 8006cfa:	2b04      	cmp	r3, #4
 8006cfc:	bf02      	ittt	eq
 8006cfe:	68e5      	ldreq	r5, [r4, #12]
 8006d00:	6833      	ldreq	r3, [r6, #0]
 8006d02:	1aed      	subeq	r5, r5, r3
 8006d04:	68a3      	ldr	r3, [r4, #8]
 8006d06:	bf0c      	ite	eq
 8006d08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d0c:	2500      	movne	r5, #0
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	bfc4      	itt	gt
 8006d12:	1a9b      	subgt	r3, r3, r2
 8006d14:	18ed      	addgt	r5, r5, r3
 8006d16:	2600      	movs	r6, #0
 8006d18:	341a      	adds	r4, #26
 8006d1a:	42b5      	cmp	r5, r6
 8006d1c:	d11a      	bne.n	8006d54 <_printf_common+0xc8>
 8006d1e:	2000      	movs	r0, #0
 8006d20:	e008      	b.n	8006d34 <_printf_common+0xa8>
 8006d22:	2301      	movs	r3, #1
 8006d24:	4652      	mov	r2, sl
 8006d26:	4641      	mov	r1, r8
 8006d28:	4638      	mov	r0, r7
 8006d2a:	47c8      	blx	r9
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	d103      	bne.n	8006d38 <_printf_common+0xac>
 8006d30:	f04f 30ff 	mov.w	r0, #4294967295
 8006d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d38:	3501      	adds	r5, #1
 8006d3a:	e7c6      	b.n	8006cca <_printf_common+0x3e>
 8006d3c:	18e1      	adds	r1, r4, r3
 8006d3e:	1c5a      	adds	r2, r3, #1
 8006d40:	2030      	movs	r0, #48	@ 0x30
 8006d42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006d46:	4422      	add	r2, r4
 8006d48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006d4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006d50:	3302      	adds	r3, #2
 8006d52:	e7c7      	b.n	8006ce4 <_printf_common+0x58>
 8006d54:	2301      	movs	r3, #1
 8006d56:	4622      	mov	r2, r4
 8006d58:	4641      	mov	r1, r8
 8006d5a:	4638      	mov	r0, r7
 8006d5c:	47c8      	blx	r9
 8006d5e:	3001      	adds	r0, #1
 8006d60:	d0e6      	beq.n	8006d30 <_printf_common+0xa4>
 8006d62:	3601      	adds	r6, #1
 8006d64:	e7d9      	b.n	8006d1a <_printf_common+0x8e>
	...

08006d68 <_printf_i>:
 8006d68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d6c:	7e0f      	ldrb	r7, [r1, #24]
 8006d6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006d70:	2f78      	cmp	r7, #120	@ 0x78
 8006d72:	4691      	mov	r9, r2
 8006d74:	4680      	mov	r8, r0
 8006d76:	460c      	mov	r4, r1
 8006d78:	469a      	mov	sl, r3
 8006d7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006d7e:	d807      	bhi.n	8006d90 <_printf_i+0x28>
 8006d80:	2f62      	cmp	r7, #98	@ 0x62
 8006d82:	d80a      	bhi.n	8006d9a <_printf_i+0x32>
 8006d84:	2f00      	cmp	r7, #0
 8006d86:	f000 80d1 	beq.w	8006f2c <_printf_i+0x1c4>
 8006d8a:	2f58      	cmp	r7, #88	@ 0x58
 8006d8c:	f000 80b8 	beq.w	8006f00 <_printf_i+0x198>
 8006d90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006d98:	e03a      	b.n	8006e10 <_printf_i+0xa8>
 8006d9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006d9e:	2b15      	cmp	r3, #21
 8006da0:	d8f6      	bhi.n	8006d90 <_printf_i+0x28>
 8006da2:	a101      	add	r1, pc, #4	@ (adr r1, 8006da8 <_printf_i+0x40>)
 8006da4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006da8:	08006e01 	.word	0x08006e01
 8006dac:	08006e15 	.word	0x08006e15
 8006db0:	08006d91 	.word	0x08006d91
 8006db4:	08006d91 	.word	0x08006d91
 8006db8:	08006d91 	.word	0x08006d91
 8006dbc:	08006d91 	.word	0x08006d91
 8006dc0:	08006e15 	.word	0x08006e15
 8006dc4:	08006d91 	.word	0x08006d91
 8006dc8:	08006d91 	.word	0x08006d91
 8006dcc:	08006d91 	.word	0x08006d91
 8006dd0:	08006d91 	.word	0x08006d91
 8006dd4:	08006f13 	.word	0x08006f13
 8006dd8:	08006e3f 	.word	0x08006e3f
 8006ddc:	08006ecd 	.word	0x08006ecd
 8006de0:	08006d91 	.word	0x08006d91
 8006de4:	08006d91 	.word	0x08006d91
 8006de8:	08006f35 	.word	0x08006f35
 8006dec:	08006d91 	.word	0x08006d91
 8006df0:	08006e3f 	.word	0x08006e3f
 8006df4:	08006d91 	.word	0x08006d91
 8006df8:	08006d91 	.word	0x08006d91
 8006dfc:	08006ed5 	.word	0x08006ed5
 8006e00:	6833      	ldr	r3, [r6, #0]
 8006e02:	1d1a      	adds	r2, r3, #4
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	6032      	str	r2, [r6, #0]
 8006e08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e10:	2301      	movs	r3, #1
 8006e12:	e09c      	b.n	8006f4e <_printf_i+0x1e6>
 8006e14:	6833      	ldr	r3, [r6, #0]
 8006e16:	6820      	ldr	r0, [r4, #0]
 8006e18:	1d19      	adds	r1, r3, #4
 8006e1a:	6031      	str	r1, [r6, #0]
 8006e1c:	0606      	lsls	r6, r0, #24
 8006e1e:	d501      	bpl.n	8006e24 <_printf_i+0xbc>
 8006e20:	681d      	ldr	r5, [r3, #0]
 8006e22:	e003      	b.n	8006e2c <_printf_i+0xc4>
 8006e24:	0645      	lsls	r5, r0, #25
 8006e26:	d5fb      	bpl.n	8006e20 <_printf_i+0xb8>
 8006e28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006e2c:	2d00      	cmp	r5, #0
 8006e2e:	da03      	bge.n	8006e38 <_printf_i+0xd0>
 8006e30:	232d      	movs	r3, #45	@ 0x2d
 8006e32:	426d      	negs	r5, r5
 8006e34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e38:	4858      	ldr	r0, [pc, #352]	@ (8006f9c <_printf_i+0x234>)
 8006e3a:	230a      	movs	r3, #10
 8006e3c:	e011      	b.n	8006e62 <_printf_i+0xfa>
 8006e3e:	6821      	ldr	r1, [r4, #0]
 8006e40:	6833      	ldr	r3, [r6, #0]
 8006e42:	0608      	lsls	r0, r1, #24
 8006e44:	f853 5b04 	ldr.w	r5, [r3], #4
 8006e48:	d402      	bmi.n	8006e50 <_printf_i+0xe8>
 8006e4a:	0649      	lsls	r1, r1, #25
 8006e4c:	bf48      	it	mi
 8006e4e:	b2ad      	uxthmi	r5, r5
 8006e50:	2f6f      	cmp	r7, #111	@ 0x6f
 8006e52:	4852      	ldr	r0, [pc, #328]	@ (8006f9c <_printf_i+0x234>)
 8006e54:	6033      	str	r3, [r6, #0]
 8006e56:	bf14      	ite	ne
 8006e58:	230a      	movne	r3, #10
 8006e5a:	2308      	moveq	r3, #8
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e62:	6866      	ldr	r6, [r4, #4]
 8006e64:	60a6      	str	r6, [r4, #8]
 8006e66:	2e00      	cmp	r6, #0
 8006e68:	db05      	blt.n	8006e76 <_printf_i+0x10e>
 8006e6a:	6821      	ldr	r1, [r4, #0]
 8006e6c:	432e      	orrs	r6, r5
 8006e6e:	f021 0104 	bic.w	r1, r1, #4
 8006e72:	6021      	str	r1, [r4, #0]
 8006e74:	d04b      	beq.n	8006f0e <_printf_i+0x1a6>
 8006e76:	4616      	mov	r6, r2
 8006e78:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e7c:	fb03 5711 	mls	r7, r3, r1, r5
 8006e80:	5dc7      	ldrb	r7, [r0, r7]
 8006e82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e86:	462f      	mov	r7, r5
 8006e88:	42bb      	cmp	r3, r7
 8006e8a:	460d      	mov	r5, r1
 8006e8c:	d9f4      	bls.n	8006e78 <_printf_i+0x110>
 8006e8e:	2b08      	cmp	r3, #8
 8006e90:	d10b      	bne.n	8006eaa <_printf_i+0x142>
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	07df      	lsls	r7, r3, #31
 8006e96:	d508      	bpl.n	8006eaa <_printf_i+0x142>
 8006e98:	6923      	ldr	r3, [r4, #16]
 8006e9a:	6861      	ldr	r1, [r4, #4]
 8006e9c:	4299      	cmp	r1, r3
 8006e9e:	bfde      	ittt	le
 8006ea0:	2330      	movle	r3, #48	@ 0x30
 8006ea2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ea6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006eaa:	1b92      	subs	r2, r2, r6
 8006eac:	6122      	str	r2, [r4, #16]
 8006eae:	f8cd a000 	str.w	sl, [sp]
 8006eb2:	464b      	mov	r3, r9
 8006eb4:	aa03      	add	r2, sp, #12
 8006eb6:	4621      	mov	r1, r4
 8006eb8:	4640      	mov	r0, r8
 8006eba:	f7ff fee7 	bl	8006c8c <_printf_common>
 8006ebe:	3001      	adds	r0, #1
 8006ec0:	d14a      	bne.n	8006f58 <_printf_i+0x1f0>
 8006ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec6:	b004      	add	sp, #16
 8006ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	f043 0320 	orr.w	r3, r3, #32
 8006ed2:	6023      	str	r3, [r4, #0]
 8006ed4:	4832      	ldr	r0, [pc, #200]	@ (8006fa0 <_printf_i+0x238>)
 8006ed6:	2778      	movs	r7, #120	@ 0x78
 8006ed8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006edc:	6823      	ldr	r3, [r4, #0]
 8006ede:	6831      	ldr	r1, [r6, #0]
 8006ee0:	061f      	lsls	r7, r3, #24
 8006ee2:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ee6:	d402      	bmi.n	8006eee <_printf_i+0x186>
 8006ee8:	065f      	lsls	r7, r3, #25
 8006eea:	bf48      	it	mi
 8006eec:	b2ad      	uxthmi	r5, r5
 8006eee:	6031      	str	r1, [r6, #0]
 8006ef0:	07d9      	lsls	r1, r3, #31
 8006ef2:	bf44      	itt	mi
 8006ef4:	f043 0320 	orrmi.w	r3, r3, #32
 8006ef8:	6023      	strmi	r3, [r4, #0]
 8006efa:	b11d      	cbz	r5, 8006f04 <_printf_i+0x19c>
 8006efc:	2310      	movs	r3, #16
 8006efe:	e7ad      	b.n	8006e5c <_printf_i+0xf4>
 8006f00:	4826      	ldr	r0, [pc, #152]	@ (8006f9c <_printf_i+0x234>)
 8006f02:	e7e9      	b.n	8006ed8 <_printf_i+0x170>
 8006f04:	6823      	ldr	r3, [r4, #0]
 8006f06:	f023 0320 	bic.w	r3, r3, #32
 8006f0a:	6023      	str	r3, [r4, #0]
 8006f0c:	e7f6      	b.n	8006efc <_printf_i+0x194>
 8006f0e:	4616      	mov	r6, r2
 8006f10:	e7bd      	b.n	8006e8e <_printf_i+0x126>
 8006f12:	6833      	ldr	r3, [r6, #0]
 8006f14:	6825      	ldr	r5, [r4, #0]
 8006f16:	6961      	ldr	r1, [r4, #20]
 8006f18:	1d18      	adds	r0, r3, #4
 8006f1a:	6030      	str	r0, [r6, #0]
 8006f1c:	062e      	lsls	r6, r5, #24
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	d501      	bpl.n	8006f26 <_printf_i+0x1be>
 8006f22:	6019      	str	r1, [r3, #0]
 8006f24:	e002      	b.n	8006f2c <_printf_i+0x1c4>
 8006f26:	0668      	lsls	r0, r5, #25
 8006f28:	d5fb      	bpl.n	8006f22 <_printf_i+0x1ba>
 8006f2a:	8019      	strh	r1, [r3, #0]
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	6123      	str	r3, [r4, #16]
 8006f30:	4616      	mov	r6, r2
 8006f32:	e7bc      	b.n	8006eae <_printf_i+0x146>
 8006f34:	6833      	ldr	r3, [r6, #0]
 8006f36:	1d1a      	adds	r2, r3, #4
 8006f38:	6032      	str	r2, [r6, #0]
 8006f3a:	681e      	ldr	r6, [r3, #0]
 8006f3c:	6862      	ldr	r2, [r4, #4]
 8006f3e:	2100      	movs	r1, #0
 8006f40:	4630      	mov	r0, r6
 8006f42:	f7f9 f965 	bl	8000210 <memchr>
 8006f46:	b108      	cbz	r0, 8006f4c <_printf_i+0x1e4>
 8006f48:	1b80      	subs	r0, r0, r6
 8006f4a:	6060      	str	r0, [r4, #4]
 8006f4c:	6863      	ldr	r3, [r4, #4]
 8006f4e:	6123      	str	r3, [r4, #16]
 8006f50:	2300      	movs	r3, #0
 8006f52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f56:	e7aa      	b.n	8006eae <_printf_i+0x146>
 8006f58:	6923      	ldr	r3, [r4, #16]
 8006f5a:	4632      	mov	r2, r6
 8006f5c:	4649      	mov	r1, r9
 8006f5e:	4640      	mov	r0, r8
 8006f60:	47d0      	blx	sl
 8006f62:	3001      	adds	r0, #1
 8006f64:	d0ad      	beq.n	8006ec2 <_printf_i+0x15a>
 8006f66:	6823      	ldr	r3, [r4, #0]
 8006f68:	079b      	lsls	r3, r3, #30
 8006f6a:	d413      	bmi.n	8006f94 <_printf_i+0x22c>
 8006f6c:	68e0      	ldr	r0, [r4, #12]
 8006f6e:	9b03      	ldr	r3, [sp, #12]
 8006f70:	4298      	cmp	r0, r3
 8006f72:	bfb8      	it	lt
 8006f74:	4618      	movlt	r0, r3
 8006f76:	e7a6      	b.n	8006ec6 <_printf_i+0x15e>
 8006f78:	2301      	movs	r3, #1
 8006f7a:	4632      	mov	r2, r6
 8006f7c:	4649      	mov	r1, r9
 8006f7e:	4640      	mov	r0, r8
 8006f80:	47d0      	blx	sl
 8006f82:	3001      	adds	r0, #1
 8006f84:	d09d      	beq.n	8006ec2 <_printf_i+0x15a>
 8006f86:	3501      	adds	r5, #1
 8006f88:	68e3      	ldr	r3, [r4, #12]
 8006f8a:	9903      	ldr	r1, [sp, #12]
 8006f8c:	1a5b      	subs	r3, r3, r1
 8006f8e:	42ab      	cmp	r3, r5
 8006f90:	dcf2      	bgt.n	8006f78 <_printf_i+0x210>
 8006f92:	e7eb      	b.n	8006f6c <_printf_i+0x204>
 8006f94:	2500      	movs	r5, #0
 8006f96:	f104 0619 	add.w	r6, r4, #25
 8006f9a:	e7f5      	b.n	8006f88 <_printf_i+0x220>
 8006f9c:	08009d36 	.word	0x08009d36
 8006fa0:	08009d47 	.word	0x08009d47

08006fa4 <std>:
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	b510      	push	{r4, lr}
 8006fa8:	4604      	mov	r4, r0
 8006faa:	e9c0 3300 	strd	r3, r3, [r0]
 8006fae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fb2:	6083      	str	r3, [r0, #8]
 8006fb4:	8181      	strh	r1, [r0, #12]
 8006fb6:	6643      	str	r3, [r0, #100]	@ 0x64
 8006fb8:	81c2      	strh	r2, [r0, #14]
 8006fba:	6183      	str	r3, [r0, #24]
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	2208      	movs	r2, #8
 8006fc0:	305c      	adds	r0, #92	@ 0x5c
 8006fc2:	f000 f94c 	bl	800725e <memset>
 8006fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8006ffc <std+0x58>)
 8006fc8:	6263      	str	r3, [r4, #36]	@ 0x24
 8006fca:	4b0d      	ldr	r3, [pc, #52]	@ (8007000 <std+0x5c>)
 8006fcc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006fce:	4b0d      	ldr	r3, [pc, #52]	@ (8007004 <std+0x60>)
 8006fd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8007008 <std+0x64>)
 8006fd4:	6323      	str	r3, [r4, #48]	@ 0x30
 8006fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800700c <std+0x68>)
 8006fd8:	6224      	str	r4, [r4, #32]
 8006fda:	429c      	cmp	r4, r3
 8006fdc:	d006      	beq.n	8006fec <std+0x48>
 8006fde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006fe2:	4294      	cmp	r4, r2
 8006fe4:	d002      	beq.n	8006fec <std+0x48>
 8006fe6:	33d0      	adds	r3, #208	@ 0xd0
 8006fe8:	429c      	cmp	r4, r3
 8006fea:	d105      	bne.n	8006ff8 <std+0x54>
 8006fec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ff4:	f000 b9c2 	b.w	800737c <__retarget_lock_init_recursive>
 8006ff8:	bd10      	pop	{r4, pc}
 8006ffa:	bf00      	nop
 8006ffc:	080071d9 	.word	0x080071d9
 8007000:	080071fb 	.word	0x080071fb
 8007004:	08007233 	.word	0x08007233
 8007008:	08007257 	.word	0x08007257
 800700c:	20000370 	.word	0x20000370

08007010 <stdio_exit_handler>:
 8007010:	4a02      	ldr	r2, [pc, #8]	@ (800701c <stdio_exit_handler+0xc>)
 8007012:	4903      	ldr	r1, [pc, #12]	@ (8007020 <stdio_exit_handler+0x10>)
 8007014:	4803      	ldr	r0, [pc, #12]	@ (8007024 <stdio_exit_handler+0x14>)
 8007016:	f000 b869 	b.w	80070ec <_fwalk_sglue>
 800701a:	bf00      	nop
 800701c:	2000000c 	.word	0x2000000c
 8007020:	08008ce5 	.word	0x08008ce5
 8007024:	2000001c 	.word	0x2000001c

08007028 <cleanup_stdio>:
 8007028:	6841      	ldr	r1, [r0, #4]
 800702a:	4b0c      	ldr	r3, [pc, #48]	@ (800705c <cleanup_stdio+0x34>)
 800702c:	4299      	cmp	r1, r3
 800702e:	b510      	push	{r4, lr}
 8007030:	4604      	mov	r4, r0
 8007032:	d001      	beq.n	8007038 <cleanup_stdio+0x10>
 8007034:	f001 fe56 	bl	8008ce4 <_fflush_r>
 8007038:	68a1      	ldr	r1, [r4, #8]
 800703a:	4b09      	ldr	r3, [pc, #36]	@ (8007060 <cleanup_stdio+0x38>)
 800703c:	4299      	cmp	r1, r3
 800703e:	d002      	beq.n	8007046 <cleanup_stdio+0x1e>
 8007040:	4620      	mov	r0, r4
 8007042:	f001 fe4f 	bl	8008ce4 <_fflush_r>
 8007046:	68e1      	ldr	r1, [r4, #12]
 8007048:	4b06      	ldr	r3, [pc, #24]	@ (8007064 <cleanup_stdio+0x3c>)
 800704a:	4299      	cmp	r1, r3
 800704c:	d004      	beq.n	8007058 <cleanup_stdio+0x30>
 800704e:	4620      	mov	r0, r4
 8007050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007054:	f001 be46 	b.w	8008ce4 <_fflush_r>
 8007058:	bd10      	pop	{r4, pc}
 800705a:	bf00      	nop
 800705c:	20000370 	.word	0x20000370
 8007060:	200003d8 	.word	0x200003d8
 8007064:	20000440 	.word	0x20000440

08007068 <global_stdio_init.part.0>:
 8007068:	b510      	push	{r4, lr}
 800706a:	4b0b      	ldr	r3, [pc, #44]	@ (8007098 <global_stdio_init.part.0+0x30>)
 800706c:	4c0b      	ldr	r4, [pc, #44]	@ (800709c <global_stdio_init.part.0+0x34>)
 800706e:	4a0c      	ldr	r2, [pc, #48]	@ (80070a0 <global_stdio_init.part.0+0x38>)
 8007070:	601a      	str	r2, [r3, #0]
 8007072:	4620      	mov	r0, r4
 8007074:	2200      	movs	r2, #0
 8007076:	2104      	movs	r1, #4
 8007078:	f7ff ff94 	bl	8006fa4 <std>
 800707c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007080:	2201      	movs	r2, #1
 8007082:	2109      	movs	r1, #9
 8007084:	f7ff ff8e 	bl	8006fa4 <std>
 8007088:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800708c:	2202      	movs	r2, #2
 800708e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007092:	2112      	movs	r1, #18
 8007094:	f7ff bf86 	b.w	8006fa4 <std>
 8007098:	200004a8 	.word	0x200004a8
 800709c:	20000370 	.word	0x20000370
 80070a0:	08007011 	.word	0x08007011

080070a4 <__sfp_lock_acquire>:
 80070a4:	4801      	ldr	r0, [pc, #4]	@ (80070ac <__sfp_lock_acquire+0x8>)
 80070a6:	f000 b96a 	b.w	800737e <__retarget_lock_acquire_recursive>
 80070aa:	bf00      	nop
 80070ac:	200004b1 	.word	0x200004b1

080070b0 <__sfp_lock_release>:
 80070b0:	4801      	ldr	r0, [pc, #4]	@ (80070b8 <__sfp_lock_release+0x8>)
 80070b2:	f000 b965 	b.w	8007380 <__retarget_lock_release_recursive>
 80070b6:	bf00      	nop
 80070b8:	200004b1 	.word	0x200004b1

080070bc <__sinit>:
 80070bc:	b510      	push	{r4, lr}
 80070be:	4604      	mov	r4, r0
 80070c0:	f7ff fff0 	bl	80070a4 <__sfp_lock_acquire>
 80070c4:	6a23      	ldr	r3, [r4, #32]
 80070c6:	b11b      	cbz	r3, 80070d0 <__sinit+0x14>
 80070c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070cc:	f7ff bff0 	b.w	80070b0 <__sfp_lock_release>
 80070d0:	4b04      	ldr	r3, [pc, #16]	@ (80070e4 <__sinit+0x28>)
 80070d2:	6223      	str	r3, [r4, #32]
 80070d4:	4b04      	ldr	r3, [pc, #16]	@ (80070e8 <__sinit+0x2c>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1f5      	bne.n	80070c8 <__sinit+0xc>
 80070dc:	f7ff ffc4 	bl	8007068 <global_stdio_init.part.0>
 80070e0:	e7f2      	b.n	80070c8 <__sinit+0xc>
 80070e2:	bf00      	nop
 80070e4:	08007029 	.word	0x08007029
 80070e8:	200004a8 	.word	0x200004a8

080070ec <_fwalk_sglue>:
 80070ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070f0:	4607      	mov	r7, r0
 80070f2:	4688      	mov	r8, r1
 80070f4:	4614      	mov	r4, r2
 80070f6:	2600      	movs	r6, #0
 80070f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070fc:	f1b9 0901 	subs.w	r9, r9, #1
 8007100:	d505      	bpl.n	800710e <_fwalk_sglue+0x22>
 8007102:	6824      	ldr	r4, [r4, #0]
 8007104:	2c00      	cmp	r4, #0
 8007106:	d1f7      	bne.n	80070f8 <_fwalk_sglue+0xc>
 8007108:	4630      	mov	r0, r6
 800710a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800710e:	89ab      	ldrh	r3, [r5, #12]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d907      	bls.n	8007124 <_fwalk_sglue+0x38>
 8007114:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007118:	3301      	adds	r3, #1
 800711a:	d003      	beq.n	8007124 <_fwalk_sglue+0x38>
 800711c:	4629      	mov	r1, r5
 800711e:	4638      	mov	r0, r7
 8007120:	47c0      	blx	r8
 8007122:	4306      	orrs	r6, r0
 8007124:	3568      	adds	r5, #104	@ 0x68
 8007126:	e7e9      	b.n	80070fc <_fwalk_sglue+0x10>

08007128 <sniprintf>:
 8007128:	b40c      	push	{r2, r3}
 800712a:	b530      	push	{r4, r5, lr}
 800712c:	4b18      	ldr	r3, [pc, #96]	@ (8007190 <sniprintf+0x68>)
 800712e:	1e0c      	subs	r4, r1, #0
 8007130:	681d      	ldr	r5, [r3, #0]
 8007132:	b09d      	sub	sp, #116	@ 0x74
 8007134:	da08      	bge.n	8007148 <sniprintf+0x20>
 8007136:	238b      	movs	r3, #139	@ 0x8b
 8007138:	602b      	str	r3, [r5, #0]
 800713a:	f04f 30ff 	mov.w	r0, #4294967295
 800713e:	b01d      	add	sp, #116	@ 0x74
 8007140:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007144:	b002      	add	sp, #8
 8007146:	4770      	bx	lr
 8007148:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800714c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007150:	f04f 0300 	mov.w	r3, #0
 8007154:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007156:	bf14      	ite	ne
 8007158:	f104 33ff 	addne.w	r3, r4, #4294967295
 800715c:	4623      	moveq	r3, r4
 800715e:	9304      	str	r3, [sp, #16]
 8007160:	9307      	str	r3, [sp, #28]
 8007162:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007166:	9002      	str	r0, [sp, #8]
 8007168:	9006      	str	r0, [sp, #24]
 800716a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800716e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007170:	ab21      	add	r3, sp, #132	@ 0x84
 8007172:	a902      	add	r1, sp, #8
 8007174:	4628      	mov	r0, r5
 8007176:	9301      	str	r3, [sp, #4]
 8007178:	f001 fc34 	bl	80089e4 <_svfiprintf_r>
 800717c:	1c43      	adds	r3, r0, #1
 800717e:	bfbc      	itt	lt
 8007180:	238b      	movlt	r3, #139	@ 0x8b
 8007182:	602b      	strlt	r3, [r5, #0]
 8007184:	2c00      	cmp	r4, #0
 8007186:	d0da      	beq.n	800713e <sniprintf+0x16>
 8007188:	9b02      	ldr	r3, [sp, #8]
 800718a:	2200      	movs	r2, #0
 800718c:	701a      	strb	r2, [r3, #0]
 800718e:	e7d6      	b.n	800713e <sniprintf+0x16>
 8007190:	20000018 	.word	0x20000018

08007194 <siprintf>:
 8007194:	b40e      	push	{r1, r2, r3}
 8007196:	b510      	push	{r4, lr}
 8007198:	b09d      	sub	sp, #116	@ 0x74
 800719a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800719c:	9002      	str	r0, [sp, #8]
 800719e:	9006      	str	r0, [sp, #24]
 80071a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80071a4:	480a      	ldr	r0, [pc, #40]	@ (80071d0 <siprintf+0x3c>)
 80071a6:	9107      	str	r1, [sp, #28]
 80071a8:	9104      	str	r1, [sp, #16]
 80071aa:	490a      	ldr	r1, [pc, #40]	@ (80071d4 <siprintf+0x40>)
 80071ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80071b0:	9105      	str	r1, [sp, #20]
 80071b2:	2400      	movs	r4, #0
 80071b4:	a902      	add	r1, sp, #8
 80071b6:	6800      	ldr	r0, [r0, #0]
 80071b8:	9301      	str	r3, [sp, #4]
 80071ba:	941b      	str	r4, [sp, #108]	@ 0x6c
 80071bc:	f001 fc12 	bl	80089e4 <_svfiprintf_r>
 80071c0:	9b02      	ldr	r3, [sp, #8]
 80071c2:	701c      	strb	r4, [r3, #0]
 80071c4:	b01d      	add	sp, #116	@ 0x74
 80071c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071ca:	b003      	add	sp, #12
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	20000018 	.word	0x20000018
 80071d4:	ffff0208 	.word	0xffff0208

080071d8 <__sread>:
 80071d8:	b510      	push	{r4, lr}
 80071da:	460c      	mov	r4, r1
 80071dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071e0:	f000 f87e 	bl	80072e0 <_read_r>
 80071e4:	2800      	cmp	r0, #0
 80071e6:	bfab      	itete	ge
 80071e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80071ea:	89a3      	ldrhlt	r3, [r4, #12]
 80071ec:	181b      	addge	r3, r3, r0
 80071ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80071f2:	bfac      	ite	ge
 80071f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80071f6:	81a3      	strhlt	r3, [r4, #12]
 80071f8:	bd10      	pop	{r4, pc}

080071fa <__swrite>:
 80071fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071fe:	461f      	mov	r7, r3
 8007200:	898b      	ldrh	r3, [r1, #12]
 8007202:	05db      	lsls	r3, r3, #23
 8007204:	4605      	mov	r5, r0
 8007206:	460c      	mov	r4, r1
 8007208:	4616      	mov	r6, r2
 800720a:	d505      	bpl.n	8007218 <__swrite+0x1e>
 800720c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007210:	2302      	movs	r3, #2
 8007212:	2200      	movs	r2, #0
 8007214:	f000 f852 	bl	80072bc <_lseek_r>
 8007218:	89a3      	ldrh	r3, [r4, #12]
 800721a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800721e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007222:	81a3      	strh	r3, [r4, #12]
 8007224:	4632      	mov	r2, r6
 8007226:	463b      	mov	r3, r7
 8007228:	4628      	mov	r0, r5
 800722a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800722e:	f000 b869 	b.w	8007304 <_write_r>

08007232 <__sseek>:
 8007232:	b510      	push	{r4, lr}
 8007234:	460c      	mov	r4, r1
 8007236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800723a:	f000 f83f 	bl	80072bc <_lseek_r>
 800723e:	1c43      	adds	r3, r0, #1
 8007240:	89a3      	ldrh	r3, [r4, #12]
 8007242:	bf15      	itete	ne
 8007244:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007246:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800724a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800724e:	81a3      	strheq	r3, [r4, #12]
 8007250:	bf18      	it	ne
 8007252:	81a3      	strhne	r3, [r4, #12]
 8007254:	bd10      	pop	{r4, pc}

08007256 <__sclose>:
 8007256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800725a:	f000 b81f 	b.w	800729c <_close_r>

0800725e <memset>:
 800725e:	4402      	add	r2, r0
 8007260:	4603      	mov	r3, r0
 8007262:	4293      	cmp	r3, r2
 8007264:	d100      	bne.n	8007268 <memset+0xa>
 8007266:	4770      	bx	lr
 8007268:	f803 1b01 	strb.w	r1, [r3], #1
 800726c:	e7f9      	b.n	8007262 <memset+0x4>

0800726e <strncpy>:
 800726e:	b510      	push	{r4, lr}
 8007270:	3901      	subs	r1, #1
 8007272:	4603      	mov	r3, r0
 8007274:	b132      	cbz	r2, 8007284 <strncpy+0x16>
 8007276:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800727a:	f803 4b01 	strb.w	r4, [r3], #1
 800727e:	3a01      	subs	r2, #1
 8007280:	2c00      	cmp	r4, #0
 8007282:	d1f7      	bne.n	8007274 <strncpy+0x6>
 8007284:	441a      	add	r2, r3
 8007286:	2100      	movs	r1, #0
 8007288:	4293      	cmp	r3, r2
 800728a:	d100      	bne.n	800728e <strncpy+0x20>
 800728c:	bd10      	pop	{r4, pc}
 800728e:	f803 1b01 	strb.w	r1, [r3], #1
 8007292:	e7f9      	b.n	8007288 <strncpy+0x1a>

08007294 <_localeconv_r>:
 8007294:	4800      	ldr	r0, [pc, #0]	@ (8007298 <_localeconv_r+0x4>)
 8007296:	4770      	bx	lr
 8007298:	20000158 	.word	0x20000158

0800729c <_close_r>:
 800729c:	b538      	push	{r3, r4, r5, lr}
 800729e:	4d06      	ldr	r5, [pc, #24]	@ (80072b8 <_close_r+0x1c>)
 80072a0:	2300      	movs	r3, #0
 80072a2:	4604      	mov	r4, r0
 80072a4:	4608      	mov	r0, r1
 80072a6:	602b      	str	r3, [r5, #0]
 80072a8:	f7fa fb03 	bl	80018b2 <_close>
 80072ac:	1c43      	adds	r3, r0, #1
 80072ae:	d102      	bne.n	80072b6 <_close_r+0x1a>
 80072b0:	682b      	ldr	r3, [r5, #0]
 80072b2:	b103      	cbz	r3, 80072b6 <_close_r+0x1a>
 80072b4:	6023      	str	r3, [r4, #0]
 80072b6:	bd38      	pop	{r3, r4, r5, pc}
 80072b8:	200004ac 	.word	0x200004ac

080072bc <_lseek_r>:
 80072bc:	b538      	push	{r3, r4, r5, lr}
 80072be:	4d07      	ldr	r5, [pc, #28]	@ (80072dc <_lseek_r+0x20>)
 80072c0:	4604      	mov	r4, r0
 80072c2:	4608      	mov	r0, r1
 80072c4:	4611      	mov	r1, r2
 80072c6:	2200      	movs	r2, #0
 80072c8:	602a      	str	r2, [r5, #0]
 80072ca:	461a      	mov	r2, r3
 80072cc:	f7fa fb18 	bl	8001900 <_lseek>
 80072d0:	1c43      	adds	r3, r0, #1
 80072d2:	d102      	bne.n	80072da <_lseek_r+0x1e>
 80072d4:	682b      	ldr	r3, [r5, #0]
 80072d6:	b103      	cbz	r3, 80072da <_lseek_r+0x1e>
 80072d8:	6023      	str	r3, [r4, #0]
 80072da:	bd38      	pop	{r3, r4, r5, pc}
 80072dc:	200004ac 	.word	0x200004ac

080072e0 <_read_r>:
 80072e0:	b538      	push	{r3, r4, r5, lr}
 80072e2:	4d07      	ldr	r5, [pc, #28]	@ (8007300 <_read_r+0x20>)
 80072e4:	4604      	mov	r4, r0
 80072e6:	4608      	mov	r0, r1
 80072e8:	4611      	mov	r1, r2
 80072ea:	2200      	movs	r2, #0
 80072ec:	602a      	str	r2, [r5, #0]
 80072ee:	461a      	mov	r2, r3
 80072f0:	f7fa faa6 	bl	8001840 <_read>
 80072f4:	1c43      	adds	r3, r0, #1
 80072f6:	d102      	bne.n	80072fe <_read_r+0x1e>
 80072f8:	682b      	ldr	r3, [r5, #0]
 80072fa:	b103      	cbz	r3, 80072fe <_read_r+0x1e>
 80072fc:	6023      	str	r3, [r4, #0]
 80072fe:	bd38      	pop	{r3, r4, r5, pc}
 8007300:	200004ac 	.word	0x200004ac

08007304 <_write_r>:
 8007304:	b538      	push	{r3, r4, r5, lr}
 8007306:	4d07      	ldr	r5, [pc, #28]	@ (8007324 <_write_r+0x20>)
 8007308:	4604      	mov	r4, r0
 800730a:	4608      	mov	r0, r1
 800730c:	4611      	mov	r1, r2
 800730e:	2200      	movs	r2, #0
 8007310:	602a      	str	r2, [r5, #0]
 8007312:	461a      	mov	r2, r3
 8007314:	f7fa fab1 	bl	800187a <_write>
 8007318:	1c43      	adds	r3, r0, #1
 800731a:	d102      	bne.n	8007322 <_write_r+0x1e>
 800731c:	682b      	ldr	r3, [r5, #0]
 800731e:	b103      	cbz	r3, 8007322 <_write_r+0x1e>
 8007320:	6023      	str	r3, [r4, #0]
 8007322:	bd38      	pop	{r3, r4, r5, pc}
 8007324:	200004ac 	.word	0x200004ac

08007328 <__errno>:
 8007328:	4b01      	ldr	r3, [pc, #4]	@ (8007330 <__errno+0x8>)
 800732a:	6818      	ldr	r0, [r3, #0]
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	20000018 	.word	0x20000018

08007334 <__libc_init_array>:
 8007334:	b570      	push	{r4, r5, r6, lr}
 8007336:	4d0d      	ldr	r5, [pc, #52]	@ (800736c <__libc_init_array+0x38>)
 8007338:	4c0d      	ldr	r4, [pc, #52]	@ (8007370 <__libc_init_array+0x3c>)
 800733a:	1b64      	subs	r4, r4, r5
 800733c:	10a4      	asrs	r4, r4, #2
 800733e:	2600      	movs	r6, #0
 8007340:	42a6      	cmp	r6, r4
 8007342:	d109      	bne.n	8007358 <__libc_init_array+0x24>
 8007344:	4d0b      	ldr	r5, [pc, #44]	@ (8007374 <__libc_init_array+0x40>)
 8007346:	4c0c      	ldr	r4, [pc, #48]	@ (8007378 <__libc_init_array+0x44>)
 8007348:	f002 fc32 	bl	8009bb0 <_init>
 800734c:	1b64      	subs	r4, r4, r5
 800734e:	10a4      	asrs	r4, r4, #2
 8007350:	2600      	movs	r6, #0
 8007352:	42a6      	cmp	r6, r4
 8007354:	d105      	bne.n	8007362 <__libc_init_array+0x2e>
 8007356:	bd70      	pop	{r4, r5, r6, pc}
 8007358:	f855 3b04 	ldr.w	r3, [r5], #4
 800735c:	4798      	blx	r3
 800735e:	3601      	adds	r6, #1
 8007360:	e7ee      	b.n	8007340 <__libc_init_array+0xc>
 8007362:	f855 3b04 	ldr.w	r3, [r5], #4
 8007366:	4798      	blx	r3
 8007368:	3601      	adds	r6, #1
 800736a:	e7f2      	b.n	8007352 <__libc_init_array+0x1e>
 800736c:	0800a0bc 	.word	0x0800a0bc
 8007370:	0800a0bc 	.word	0x0800a0bc
 8007374:	0800a0bc 	.word	0x0800a0bc
 8007378:	0800a0c0 	.word	0x0800a0c0

0800737c <__retarget_lock_init_recursive>:
 800737c:	4770      	bx	lr

0800737e <__retarget_lock_acquire_recursive>:
 800737e:	4770      	bx	lr

08007380 <__retarget_lock_release_recursive>:
 8007380:	4770      	bx	lr

08007382 <quorem>:
 8007382:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007386:	6903      	ldr	r3, [r0, #16]
 8007388:	690c      	ldr	r4, [r1, #16]
 800738a:	42a3      	cmp	r3, r4
 800738c:	4607      	mov	r7, r0
 800738e:	db7e      	blt.n	800748e <quorem+0x10c>
 8007390:	3c01      	subs	r4, #1
 8007392:	f101 0814 	add.w	r8, r1, #20
 8007396:	00a3      	lsls	r3, r4, #2
 8007398:	f100 0514 	add.w	r5, r0, #20
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073a2:	9301      	str	r3, [sp, #4]
 80073a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80073a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073ac:	3301      	adds	r3, #1
 80073ae:	429a      	cmp	r2, r3
 80073b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80073b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80073b8:	d32e      	bcc.n	8007418 <quorem+0x96>
 80073ba:	f04f 0a00 	mov.w	sl, #0
 80073be:	46c4      	mov	ip, r8
 80073c0:	46ae      	mov	lr, r5
 80073c2:	46d3      	mov	fp, sl
 80073c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80073c8:	b298      	uxth	r0, r3
 80073ca:	fb06 a000 	mla	r0, r6, r0, sl
 80073ce:	0c02      	lsrs	r2, r0, #16
 80073d0:	0c1b      	lsrs	r3, r3, #16
 80073d2:	fb06 2303 	mla	r3, r6, r3, r2
 80073d6:	f8de 2000 	ldr.w	r2, [lr]
 80073da:	b280      	uxth	r0, r0
 80073dc:	b292      	uxth	r2, r2
 80073de:	1a12      	subs	r2, r2, r0
 80073e0:	445a      	add	r2, fp
 80073e2:	f8de 0000 	ldr.w	r0, [lr]
 80073e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80073f0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80073f4:	b292      	uxth	r2, r2
 80073f6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80073fa:	45e1      	cmp	r9, ip
 80073fc:	f84e 2b04 	str.w	r2, [lr], #4
 8007400:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007404:	d2de      	bcs.n	80073c4 <quorem+0x42>
 8007406:	9b00      	ldr	r3, [sp, #0]
 8007408:	58eb      	ldr	r3, [r5, r3]
 800740a:	b92b      	cbnz	r3, 8007418 <quorem+0x96>
 800740c:	9b01      	ldr	r3, [sp, #4]
 800740e:	3b04      	subs	r3, #4
 8007410:	429d      	cmp	r5, r3
 8007412:	461a      	mov	r2, r3
 8007414:	d32f      	bcc.n	8007476 <quorem+0xf4>
 8007416:	613c      	str	r4, [r7, #16]
 8007418:	4638      	mov	r0, r7
 800741a:	f001 f97f 	bl	800871c <__mcmp>
 800741e:	2800      	cmp	r0, #0
 8007420:	db25      	blt.n	800746e <quorem+0xec>
 8007422:	4629      	mov	r1, r5
 8007424:	2000      	movs	r0, #0
 8007426:	f858 2b04 	ldr.w	r2, [r8], #4
 800742a:	f8d1 c000 	ldr.w	ip, [r1]
 800742e:	fa1f fe82 	uxth.w	lr, r2
 8007432:	fa1f f38c 	uxth.w	r3, ip
 8007436:	eba3 030e 	sub.w	r3, r3, lr
 800743a:	4403      	add	r3, r0
 800743c:	0c12      	lsrs	r2, r2, #16
 800743e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007442:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007446:	b29b      	uxth	r3, r3
 8007448:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800744c:	45c1      	cmp	r9, r8
 800744e:	f841 3b04 	str.w	r3, [r1], #4
 8007452:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007456:	d2e6      	bcs.n	8007426 <quorem+0xa4>
 8007458:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800745c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007460:	b922      	cbnz	r2, 800746c <quorem+0xea>
 8007462:	3b04      	subs	r3, #4
 8007464:	429d      	cmp	r5, r3
 8007466:	461a      	mov	r2, r3
 8007468:	d30b      	bcc.n	8007482 <quorem+0x100>
 800746a:	613c      	str	r4, [r7, #16]
 800746c:	3601      	adds	r6, #1
 800746e:	4630      	mov	r0, r6
 8007470:	b003      	add	sp, #12
 8007472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007476:	6812      	ldr	r2, [r2, #0]
 8007478:	3b04      	subs	r3, #4
 800747a:	2a00      	cmp	r2, #0
 800747c:	d1cb      	bne.n	8007416 <quorem+0x94>
 800747e:	3c01      	subs	r4, #1
 8007480:	e7c6      	b.n	8007410 <quorem+0x8e>
 8007482:	6812      	ldr	r2, [r2, #0]
 8007484:	3b04      	subs	r3, #4
 8007486:	2a00      	cmp	r2, #0
 8007488:	d1ef      	bne.n	800746a <quorem+0xe8>
 800748a:	3c01      	subs	r4, #1
 800748c:	e7ea      	b.n	8007464 <quorem+0xe2>
 800748e:	2000      	movs	r0, #0
 8007490:	e7ee      	b.n	8007470 <quorem+0xee>
 8007492:	0000      	movs	r0, r0
 8007494:	0000      	movs	r0, r0
	...

08007498 <_dtoa_r>:
 8007498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800749c:	69c7      	ldr	r7, [r0, #28]
 800749e:	b097      	sub	sp, #92	@ 0x5c
 80074a0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80074a4:	ec55 4b10 	vmov	r4, r5, d0
 80074a8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80074aa:	9107      	str	r1, [sp, #28]
 80074ac:	4681      	mov	r9, r0
 80074ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80074b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80074b2:	b97f      	cbnz	r7, 80074d4 <_dtoa_r+0x3c>
 80074b4:	2010      	movs	r0, #16
 80074b6:	f000 fe09 	bl	80080cc <malloc>
 80074ba:	4602      	mov	r2, r0
 80074bc:	f8c9 001c 	str.w	r0, [r9, #28]
 80074c0:	b920      	cbnz	r0, 80074cc <_dtoa_r+0x34>
 80074c2:	4ba9      	ldr	r3, [pc, #676]	@ (8007768 <_dtoa_r+0x2d0>)
 80074c4:	21ef      	movs	r1, #239	@ 0xef
 80074c6:	48a9      	ldr	r0, [pc, #676]	@ (800776c <_dtoa_r+0x2d4>)
 80074c8:	f001 fc6c 	bl	8008da4 <__assert_func>
 80074cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80074d0:	6007      	str	r7, [r0, #0]
 80074d2:	60c7      	str	r7, [r0, #12]
 80074d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80074d8:	6819      	ldr	r1, [r3, #0]
 80074da:	b159      	cbz	r1, 80074f4 <_dtoa_r+0x5c>
 80074dc:	685a      	ldr	r2, [r3, #4]
 80074de:	604a      	str	r2, [r1, #4]
 80074e0:	2301      	movs	r3, #1
 80074e2:	4093      	lsls	r3, r2
 80074e4:	608b      	str	r3, [r1, #8]
 80074e6:	4648      	mov	r0, r9
 80074e8:	f000 fee6 	bl	80082b8 <_Bfree>
 80074ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80074f0:	2200      	movs	r2, #0
 80074f2:	601a      	str	r2, [r3, #0]
 80074f4:	1e2b      	subs	r3, r5, #0
 80074f6:	bfb9      	ittee	lt
 80074f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80074fc:	9305      	strlt	r3, [sp, #20]
 80074fe:	2300      	movge	r3, #0
 8007500:	6033      	strge	r3, [r6, #0]
 8007502:	9f05      	ldr	r7, [sp, #20]
 8007504:	4b9a      	ldr	r3, [pc, #616]	@ (8007770 <_dtoa_r+0x2d8>)
 8007506:	bfbc      	itt	lt
 8007508:	2201      	movlt	r2, #1
 800750a:	6032      	strlt	r2, [r6, #0]
 800750c:	43bb      	bics	r3, r7
 800750e:	d112      	bne.n	8007536 <_dtoa_r+0x9e>
 8007510:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007512:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007516:	6013      	str	r3, [r2, #0]
 8007518:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800751c:	4323      	orrs	r3, r4
 800751e:	f000 855a 	beq.w	8007fd6 <_dtoa_r+0xb3e>
 8007522:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007524:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007784 <_dtoa_r+0x2ec>
 8007528:	2b00      	cmp	r3, #0
 800752a:	f000 855c 	beq.w	8007fe6 <_dtoa_r+0xb4e>
 800752e:	f10a 0303 	add.w	r3, sl, #3
 8007532:	f000 bd56 	b.w	8007fe2 <_dtoa_r+0xb4a>
 8007536:	ed9d 7b04 	vldr	d7, [sp, #16]
 800753a:	2200      	movs	r2, #0
 800753c:	ec51 0b17 	vmov	r0, r1, d7
 8007540:	2300      	movs	r3, #0
 8007542:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007546:	f7f9 fadf 	bl	8000b08 <__aeabi_dcmpeq>
 800754a:	4680      	mov	r8, r0
 800754c:	b158      	cbz	r0, 8007566 <_dtoa_r+0xce>
 800754e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007550:	2301      	movs	r3, #1
 8007552:	6013      	str	r3, [r2, #0]
 8007554:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007556:	b113      	cbz	r3, 800755e <_dtoa_r+0xc6>
 8007558:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800755a:	4b86      	ldr	r3, [pc, #536]	@ (8007774 <_dtoa_r+0x2dc>)
 800755c:	6013      	str	r3, [r2, #0]
 800755e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007788 <_dtoa_r+0x2f0>
 8007562:	f000 bd40 	b.w	8007fe6 <_dtoa_r+0xb4e>
 8007566:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800756a:	aa14      	add	r2, sp, #80	@ 0x50
 800756c:	a915      	add	r1, sp, #84	@ 0x54
 800756e:	4648      	mov	r0, r9
 8007570:	f001 f984 	bl	800887c <__d2b>
 8007574:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007578:	9002      	str	r0, [sp, #8]
 800757a:	2e00      	cmp	r6, #0
 800757c:	d078      	beq.n	8007670 <_dtoa_r+0x1d8>
 800757e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007580:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007584:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007588:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800758c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007590:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007594:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007598:	4619      	mov	r1, r3
 800759a:	2200      	movs	r2, #0
 800759c:	4b76      	ldr	r3, [pc, #472]	@ (8007778 <_dtoa_r+0x2e0>)
 800759e:	f7f8 fe93 	bl	80002c8 <__aeabi_dsub>
 80075a2:	a36b      	add	r3, pc, #428	@ (adr r3, 8007750 <_dtoa_r+0x2b8>)
 80075a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a8:	f7f9 f846 	bl	8000638 <__aeabi_dmul>
 80075ac:	a36a      	add	r3, pc, #424	@ (adr r3, 8007758 <_dtoa_r+0x2c0>)
 80075ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b2:	f7f8 fe8b 	bl	80002cc <__adddf3>
 80075b6:	4604      	mov	r4, r0
 80075b8:	4630      	mov	r0, r6
 80075ba:	460d      	mov	r5, r1
 80075bc:	f7f8 ffd2 	bl	8000564 <__aeabi_i2d>
 80075c0:	a367      	add	r3, pc, #412	@ (adr r3, 8007760 <_dtoa_r+0x2c8>)
 80075c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c6:	f7f9 f837 	bl	8000638 <__aeabi_dmul>
 80075ca:	4602      	mov	r2, r0
 80075cc:	460b      	mov	r3, r1
 80075ce:	4620      	mov	r0, r4
 80075d0:	4629      	mov	r1, r5
 80075d2:	f7f8 fe7b 	bl	80002cc <__adddf3>
 80075d6:	4604      	mov	r4, r0
 80075d8:	460d      	mov	r5, r1
 80075da:	f7f9 fadd 	bl	8000b98 <__aeabi_d2iz>
 80075de:	2200      	movs	r2, #0
 80075e0:	4607      	mov	r7, r0
 80075e2:	2300      	movs	r3, #0
 80075e4:	4620      	mov	r0, r4
 80075e6:	4629      	mov	r1, r5
 80075e8:	f7f9 fa98 	bl	8000b1c <__aeabi_dcmplt>
 80075ec:	b140      	cbz	r0, 8007600 <_dtoa_r+0x168>
 80075ee:	4638      	mov	r0, r7
 80075f0:	f7f8 ffb8 	bl	8000564 <__aeabi_i2d>
 80075f4:	4622      	mov	r2, r4
 80075f6:	462b      	mov	r3, r5
 80075f8:	f7f9 fa86 	bl	8000b08 <__aeabi_dcmpeq>
 80075fc:	b900      	cbnz	r0, 8007600 <_dtoa_r+0x168>
 80075fe:	3f01      	subs	r7, #1
 8007600:	2f16      	cmp	r7, #22
 8007602:	d852      	bhi.n	80076aa <_dtoa_r+0x212>
 8007604:	4b5d      	ldr	r3, [pc, #372]	@ (800777c <_dtoa_r+0x2e4>)
 8007606:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800760a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007612:	f7f9 fa83 	bl	8000b1c <__aeabi_dcmplt>
 8007616:	2800      	cmp	r0, #0
 8007618:	d049      	beq.n	80076ae <_dtoa_r+0x216>
 800761a:	3f01      	subs	r7, #1
 800761c:	2300      	movs	r3, #0
 800761e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007620:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007622:	1b9b      	subs	r3, r3, r6
 8007624:	1e5a      	subs	r2, r3, #1
 8007626:	bf45      	ittet	mi
 8007628:	f1c3 0301 	rsbmi	r3, r3, #1
 800762c:	9300      	strmi	r3, [sp, #0]
 800762e:	2300      	movpl	r3, #0
 8007630:	2300      	movmi	r3, #0
 8007632:	9206      	str	r2, [sp, #24]
 8007634:	bf54      	ite	pl
 8007636:	9300      	strpl	r3, [sp, #0]
 8007638:	9306      	strmi	r3, [sp, #24]
 800763a:	2f00      	cmp	r7, #0
 800763c:	db39      	blt.n	80076b2 <_dtoa_r+0x21a>
 800763e:	9b06      	ldr	r3, [sp, #24]
 8007640:	970d      	str	r7, [sp, #52]	@ 0x34
 8007642:	443b      	add	r3, r7
 8007644:	9306      	str	r3, [sp, #24]
 8007646:	2300      	movs	r3, #0
 8007648:	9308      	str	r3, [sp, #32]
 800764a:	9b07      	ldr	r3, [sp, #28]
 800764c:	2b09      	cmp	r3, #9
 800764e:	d863      	bhi.n	8007718 <_dtoa_r+0x280>
 8007650:	2b05      	cmp	r3, #5
 8007652:	bfc4      	itt	gt
 8007654:	3b04      	subgt	r3, #4
 8007656:	9307      	strgt	r3, [sp, #28]
 8007658:	9b07      	ldr	r3, [sp, #28]
 800765a:	f1a3 0302 	sub.w	r3, r3, #2
 800765e:	bfcc      	ite	gt
 8007660:	2400      	movgt	r4, #0
 8007662:	2401      	movle	r4, #1
 8007664:	2b03      	cmp	r3, #3
 8007666:	d863      	bhi.n	8007730 <_dtoa_r+0x298>
 8007668:	e8df f003 	tbb	[pc, r3]
 800766c:	2b375452 	.word	0x2b375452
 8007670:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007674:	441e      	add	r6, r3
 8007676:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800767a:	2b20      	cmp	r3, #32
 800767c:	bfc1      	itttt	gt
 800767e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007682:	409f      	lslgt	r7, r3
 8007684:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007688:	fa24 f303 	lsrgt.w	r3, r4, r3
 800768c:	bfd6      	itet	le
 800768e:	f1c3 0320 	rsble	r3, r3, #32
 8007692:	ea47 0003 	orrgt.w	r0, r7, r3
 8007696:	fa04 f003 	lslle.w	r0, r4, r3
 800769a:	f7f8 ff53 	bl	8000544 <__aeabi_ui2d>
 800769e:	2201      	movs	r2, #1
 80076a0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80076a4:	3e01      	subs	r6, #1
 80076a6:	9212      	str	r2, [sp, #72]	@ 0x48
 80076a8:	e776      	b.n	8007598 <_dtoa_r+0x100>
 80076aa:	2301      	movs	r3, #1
 80076ac:	e7b7      	b.n	800761e <_dtoa_r+0x186>
 80076ae:	9010      	str	r0, [sp, #64]	@ 0x40
 80076b0:	e7b6      	b.n	8007620 <_dtoa_r+0x188>
 80076b2:	9b00      	ldr	r3, [sp, #0]
 80076b4:	1bdb      	subs	r3, r3, r7
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	427b      	negs	r3, r7
 80076ba:	9308      	str	r3, [sp, #32]
 80076bc:	2300      	movs	r3, #0
 80076be:	930d      	str	r3, [sp, #52]	@ 0x34
 80076c0:	e7c3      	b.n	800764a <_dtoa_r+0x1b2>
 80076c2:	2301      	movs	r3, #1
 80076c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80076c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80076c8:	eb07 0b03 	add.w	fp, r7, r3
 80076cc:	f10b 0301 	add.w	r3, fp, #1
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	9303      	str	r3, [sp, #12]
 80076d4:	bfb8      	it	lt
 80076d6:	2301      	movlt	r3, #1
 80076d8:	e006      	b.n	80076e8 <_dtoa_r+0x250>
 80076da:	2301      	movs	r3, #1
 80076dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80076de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	dd28      	ble.n	8007736 <_dtoa_r+0x29e>
 80076e4:	469b      	mov	fp, r3
 80076e6:	9303      	str	r3, [sp, #12]
 80076e8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80076ec:	2100      	movs	r1, #0
 80076ee:	2204      	movs	r2, #4
 80076f0:	f102 0514 	add.w	r5, r2, #20
 80076f4:	429d      	cmp	r5, r3
 80076f6:	d926      	bls.n	8007746 <_dtoa_r+0x2ae>
 80076f8:	6041      	str	r1, [r0, #4]
 80076fa:	4648      	mov	r0, r9
 80076fc:	f000 fd9c 	bl	8008238 <_Balloc>
 8007700:	4682      	mov	sl, r0
 8007702:	2800      	cmp	r0, #0
 8007704:	d142      	bne.n	800778c <_dtoa_r+0x2f4>
 8007706:	4b1e      	ldr	r3, [pc, #120]	@ (8007780 <_dtoa_r+0x2e8>)
 8007708:	4602      	mov	r2, r0
 800770a:	f240 11af 	movw	r1, #431	@ 0x1af
 800770e:	e6da      	b.n	80074c6 <_dtoa_r+0x2e>
 8007710:	2300      	movs	r3, #0
 8007712:	e7e3      	b.n	80076dc <_dtoa_r+0x244>
 8007714:	2300      	movs	r3, #0
 8007716:	e7d5      	b.n	80076c4 <_dtoa_r+0x22c>
 8007718:	2401      	movs	r4, #1
 800771a:	2300      	movs	r3, #0
 800771c:	9307      	str	r3, [sp, #28]
 800771e:	9409      	str	r4, [sp, #36]	@ 0x24
 8007720:	f04f 3bff 	mov.w	fp, #4294967295
 8007724:	2200      	movs	r2, #0
 8007726:	f8cd b00c 	str.w	fp, [sp, #12]
 800772a:	2312      	movs	r3, #18
 800772c:	920c      	str	r2, [sp, #48]	@ 0x30
 800772e:	e7db      	b.n	80076e8 <_dtoa_r+0x250>
 8007730:	2301      	movs	r3, #1
 8007732:	9309      	str	r3, [sp, #36]	@ 0x24
 8007734:	e7f4      	b.n	8007720 <_dtoa_r+0x288>
 8007736:	f04f 0b01 	mov.w	fp, #1
 800773a:	f8cd b00c 	str.w	fp, [sp, #12]
 800773e:	465b      	mov	r3, fp
 8007740:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007744:	e7d0      	b.n	80076e8 <_dtoa_r+0x250>
 8007746:	3101      	adds	r1, #1
 8007748:	0052      	lsls	r2, r2, #1
 800774a:	e7d1      	b.n	80076f0 <_dtoa_r+0x258>
 800774c:	f3af 8000 	nop.w
 8007750:	636f4361 	.word	0x636f4361
 8007754:	3fd287a7 	.word	0x3fd287a7
 8007758:	8b60c8b3 	.word	0x8b60c8b3
 800775c:	3fc68a28 	.word	0x3fc68a28
 8007760:	509f79fb 	.word	0x509f79fb
 8007764:	3fd34413 	.word	0x3fd34413
 8007768:	08009d65 	.word	0x08009d65
 800776c:	08009d7c 	.word	0x08009d7c
 8007770:	7ff00000 	.word	0x7ff00000
 8007774:	08009d35 	.word	0x08009d35
 8007778:	3ff80000 	.word	0x3ff80000
 800777c:	08009ed0 	.word	0x08009ed0
 8007780:	08009dd4 	.word	0x08009dd4
 8007784:	08009d61 	.word	0x08009d61
 8007788:	08009d34 	.word	0x08009d34
 800778c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007790:	6018      	str	r0, [r3, #0]
 8007792:	9b03      	ldr	r3, [sp, #12]
 8007794:	2b0e      	cmp	r3, #14
 8007796:	f200 80a1 	bhi.w	80078dc <_dtoa_r+0x444>
 800779a:	2c00      	cmp	r4, #0
 800779c:	f000 809e 	beq.w	80078dc <_dtoa_r+0x444>
 80077a0:	2f00      	cmp	r7, #0
 80077a2:	dd33      	ble.n	800780c <_dtoa_r+0x374>
 80077a4:	4b9c      	ldr	r3, [pc, #624]	@ (8007a18 <_dtoa_r+0x580>)
 80077a6:	f007 020f 	and.w	r2, r7, #15
 80077aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077ae:	ed93 7b00 	vldr	d7, [r3]
 80077b2:	05f8      	lsls	r0, r7, #23
 80077b4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80077b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80077bc:	d516      	bpl.n	80077ec <_dtoa_r+0x354>
 80077be:	4b97      	ldr	r3, [pc, #604]	@ (8007a1c <_dtoa_r+0x584>)
 80077c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80077c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80077c8:	f7f9 f860 	bl	800088c <__aeabi_ddiv>
 80077cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077d0:	f004 040f 	and.w	r4, r4, #15
 80077d4:	2603      	movs	r6, #3
 80077d6:	4d91      	ldr	r5, [pc, #580]	@ (8007a1c <_dtoa_r+0x584>)
 80077d8:	b954      	cbnz	r4, 80077f0 <_dtoa_r+0x358>
 80077da:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80077de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077e2:	f7f9 f853 	bl	800088c <__aeabi_ddiv>
 80077e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077ea:	e028      	b.n	800783e <_dtoa_r+0x3a6>
 80077ec:	2602      	movs	r6, #2
 80077ee:	e7f2      	b.n	80077d6 <_dtoa_r+0x33e>
 80077f0:	07e1      	lsls	r1, r4, #31
 80077f2:	d508      	bpl.n	8007806 <_dtoa_r+0x36e>
 80077f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80077f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80077fc:	f7f8 ff1c 	bl	8000638 <__aeabi_dmul>
 8007800:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007804:	3601      	adds	r6, #1
 8007806:	1064      	asrs	r4, r4, #1
 8007808:	3508      	adds	r5, #8
 800780a:	e7e5      	b.n	80077d8 <_dtoa_r+0x340>
 800780c:	f000 80af 	beq.w	800796e <_dtoa_r+0x4d6>
 8007810:	427c      	negs	r4, r7
 8007812:	4b81      	ldr	r3, [pc, #516]	@ (8007a18 <_dtoa_r+0x580>)
 8007814:	4d81      	ldr	r5, [pc, #516]	@ (8007a1c <_dtoa_r+0x584>)
 8007816:	f004 020f 	and.w	r2, r4, #15
 800781a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800781e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007822:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007826:	f7f8 ff07 	bl	8000638 <__aeabi_dmul>
 800782a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800782e:	1124      	asrs	r4, r4, #4
 8007830:	2300      	movs	r3, #0
 8007832:	2602      	movs	r6, #2
 8007834:	2c00      	cmp	r4, #0
 8007836:	f040 808f 	bne.w	8007958 <_dtoa_r+0x4c0>
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1d3      	bne.n	80077e6 <_dtoa_r+0x34e>
 800783e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007840:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007844:	2b00      	cmp	r3, #0
 8007846:	f000 8094 	beq.w	8007972 <_dtoa_r+0x4da>
 800784a:	4b75      	ldr	r3, [pc, #468]	@ (8007a20 <_dtoa_r+0x588>)
 800784c:	2200      	movs	r2, #0
 800784e:	4620      	mov	r0, r4
 8007850:	4629      	mov	r1, r5
 8007852:	f7f9 f963 	bl	8000b1c <__aeabi_dcmplt>
 8007856:	2800      	cmp	r0, #0
 8007858:	f000 808b 	beq.w	8007972 <_dtoa_r+0x4da>
 800785c:	9b03      	ldr	r3, [sp, #12]
 800785e:	2b00      	cmp	r3, #0
 8007860:	f000 8087 	beq.w	8007972 <_dtoa_r+0x4da>
 8007864:	f1bb 0f00 	cmp.w	fp, #0
 8007868:	dd34      	ble.n	80078d4 <_dtoa_r+0x43c>
 800786a:	4620      	mov	r0, r4
 800786c:	4b6d      	ldr	r3, [pc, #436]	@ (8007a24 <_dtoa_r+0x58c>)
 800786e:	2200      	movs	r2, #0
 8007870:	4629      	mov	r1, r5
 8007872:	f7f8 fee1 	bl	8000638 <__aeabi_dmul>
 8007876:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800787a:	f107 38ff 	add.w	r8, r7, #4294967295
 800787e:	3601      	adds	r6, #1
 8007880:	465c      	mov	r4, fp
 8007882:	4630      	mov	r0, r6
 8007884:	f7f8 fe6e 	bl	8000564 <__aeabi_i2d>
 8007888:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800788c:	f7f8 fed4 	bl	8000638 <__aeabi_dmul>
 8007890:	4b65      	ldr	r3, [pc, #404]	@ (8007a28 <_dtoa_r+0x590>)
 8007892:	2200      	movs	r2, #0
 8007894:	f7f8 fd1a 	bl	80002cc <__adddf3>
 8007898:	4605      	mov	r5, r0
 800789a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800789e:	2c00      	cmp	r4, #0
 80078a0:	d16a      	bne.n	8007978 <_dtoa_r+0x4e0>
 80078a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078a6:	4b61      	ldr	r3, [pc, #388]	@ (8007a2c <_dtoa_r+0x594>)
 80078a8:	2200      	movs	r2, #0
 80078aa:	f7f8 fd0d 	bl	80002c8 <__aeabi_dsub>
 80078ae:	4602      	mov	r2, r0
 80078b0:	460b      	mov	r3, r1
 80078b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80078b6:	462a      	mov	r2, r5
 80078b8:	4633      	mov	r3, r6
 80078ba:	f7f9 f94d 	bl	8000b58 <__aeabi_dcmpgt>
 80078be:	2800      	cmp	r0, #0
 80078c0:	f040 8298 	bne.w	8007df4 <_dtoa_r+0x95c>
 80078c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078c8:	462a      	mov	r2, r5
 80078ca:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80078ce:	f7f9 f925 	bl	8000b1c <__aeabi_dcmplt>
 80078d2:	bb38      	cbnz	r0, 8007924 <_dtoa_r+0x48c>
 80078d4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80078d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80078dc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f2c0 8157 	blt.w	8007b92 <_dtoa_r+0x6fa>
 80078e4:	2f0e      	cmp	r7, #14
 80078e6:	f300 8154 	bgt.w	8007b92 <_dtoa_r+0x6fa>
 80078ea:	4b4b      	ldr	r3, [pc, #300]	@ (8007a18 <_dtoa_r+0x580>)
 80078ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80078f0:	ed93 7b00 	vldr	d7, [r3]
 80078f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	ed8d 7b00 	vstr	d7, [sp]
 80078fc:	f280 80e5 	bge.w	8007aca <_dtoa_r+0x632>
 8007900:	9b03      	ldr	r3, [sp, #12]
 8007902:	2b00      	cmp	r3, #0
 8007904:	f300 80e1 	bgt.w	8007aca <_dtoa_r+0x632>
 8007908:	d10c      	bne.n	8007924 <_dtoa_r+0x48c>
 800790a:	4b48      	ldr	r3, [pc, #288]	@ (8007a2c <_dtoa_r+0x594>)
 800790c:	2200      	movs	r2, #0
 800790e:	ec51 0b17 	vmov	r0, r1, d7
 8007912:	f7f8 fe91 	bl	8000638 <__aeabi_dmul>
 8007916:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800791a:	f7f9 f913 	bl	8000b44 <__aeabi_dcmpge>
 800791e:	2800      	cmp	r0, #0
 8007920:	f000 8266 	beq.w	8007df0 <_dtoa_r+0x958>
 8007924:	2400      	movs	r4, #0
 8007926:	4625      	mov	r5, r4
 8007928:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800792a:	4656      	mov	r6, sl
 800792c:	ea6f 0803 	mvn.w	r8, r3
 8007930:	2700      	movs	r7, #0
 8007932:	4621      	mov	r1, r4
 8007934:	4648      	mov	r0, r9
 8007936:	f000 fcbf 	bl	80082b8 <_Bfree>
 800793a:	2d00      	cmp	r5, #0
 800793c:	f000 80bd 	beq.w	8007aba <_dtoa_r+0x622>
 8007940:	b12f      	cbz	r7, 800794e <_dtoa_r+0x4b6>
 8007942:	42af      	cmp	r7, r5
 8007944:	d003      	beq.n	800794e <_dtoa_r+0x4b6>
 8007946:	4639      	mov	r1, r7
 8007948:	4648      	mov	r0, r9
 800794a:	f000 fcb5 	bl	80082b8 <_Bfree>
 800794e:	4629      	mov	r1, r5
 8007950:	4648      	mov	r0, r9
 8007952:	f000 fcb1 	bl	80082b8 <_Bfree>
 8007956:	e0b0      	b.n	8007aba <_dtoa_r+0x622>
 8007958:	07e2      	lsls	r2, r4, #31
 800795a:	d505      	bpl.n	8007968 <_dtoa_r+0x4d0>
 800795c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007960:	f7f8 fe6a 	bl	8000638 <__aeabi_dmul>
 8007964:	3601      	adds	r6, #1
 8007966:	2301      	movs	r3, #1
 8007968:	1064      	asrs	r4, r4, #1
 800796a:	3508      	adds	r5, #8
 800796c:	e762      	b.n	8007834 <_dtoa_r+0x39c>
 800796e:	2602      	movs	r6, #2
 8007970:	e765      	b.n	800783e <_dtoa_r+0x3a6>
 8007972:	9c03      	ldr	r4, [sp, #12]
 8007974:	46b8      	mov	r8, r7
 8007976:	e784      	b.n	8007882 <_dtoa_r+0x3ea>
 8007978:	4b27      	ldr	r3, [pc, #156]	@ (8007a18 <_dtoa_r+0x580>)
 800797a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800797c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007980:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007984:	4454      	add	r4, sl
 8007986:	2900      	cmp	r1, #0
 8007988:	d054      	beq.n	8007a34 <_dtoa_r+0x59c>
 800798a:	4929      	ldr	r1, [pc, #164]	@ (8007a30 <_dtoa_r+0x598>)
 800798c:	2000      	movs	r0, #0
 800798e:	f7f8 ff7d 	bl	800088c <__aeabi_ddiv>
 8007992:	4633      	mov	r3, r6
 8007994:	462a      	mov	r2, r5
 8007996:	f7f8 fc97 	bl	80002c8 <__aeabi_dsub>
 800799a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800799e:	4656      	mov	r6, sl
 80079a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079a4:	f7f9 f8f8 	bl	8000b98 <__aeabi_d2iz>
 80079a8:	4605      	mov	r5, r0
 80079aa:	f7f8 fddb 	bl	8000564 <__aeabi_i2d>
 80079ae:	4602      	mov	r2, r0
 80079b0:	460b      	mov	r3, r1
 80079b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079b6:	f7f8 fc87 	bl	80002c8 <__aeabi_dsub>
 80079ba:	3530      	adds	r5, #48	@ 0x30
 80079bc:	4602      	mov	r2, r0
 80079be:	460b      	mov	r3, r1
 80079c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80079c4:	f806 5b01 	strb.w	r5, [r6], #1
 80079c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80079cc:	f7f9 f8a6 	bl	8000b1c <__aeabi_dcmplt>
 80079d0:	2800      	cmp	r0, #0
 80079d2:	d172      	bne.n	8007aba <_dtoa_r+0x622>
 80079d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079d8:	4911      	ldr	r1, [pc, #68]	@ (8007a20 <_dtoa_r+0x588>)
 80079da:	2000      	movs	r0, #0
 80079dc:	f7f8 fc74 	bl	80002c8 <__aeabi_dsub>
 80079e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80079e4:	f7f9 f89a 	bl	8000b1c <__aeabi_dcmplt>
 80079e8:	2800      	cmp	r0, #0
 80079ea:	f040 80b4 	bne.w	8007b56 <_dtoa_r+0x6be>
 80079ee:	42a6      	cmp	r6, r4
 80079f0:	f43f af70 	beq.w	80078d4 <_dtoa_r+0x43c>
 80079f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80079f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007a24 <_dtoa_r+0x58c>)
 80079fa:	2200      	movs	r2, #0
 80079fc:	f7f8 fe1c 	bl	8000638 <__aeabi_dmul>
 8007a00:	4b08      	ldr	r3, [pc, #32]	@ (8007a24 <_dtoa_r+0x58c>)
 8007a02:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007a06:	2200      	movs	r2, #0
 8007a08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a0c:	f7f8 fe14 	bl	8000638 <__aeabi_dmul>
 8007a10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a14:	e7c4      	b.n	80079a0 <_dtoa_r+0x508>
 8007a16:	bf00      	nop
 8007a18:	08009ed0 	.word	0x08009ed0
 8007a1c:	08009ea8 	.word	0x08009ea8
 8007a20:	3ff00000 	.word	0x3ff00000
 8007a24:	40240000 	.word	0x40240000
 8007a28:	401c0000 	.word	0x401c0000
 8007a2c:	40140000 	.word	0x40140000
 8007a30:	3fe00000 	.word	0x3fe00000
 8007a34:	4631      	mov	r1, r6
 8007a36:	4628      	mov	r0, r5
 8007a38:	f7f8 fdfe 	bl	8000638 <__aeabi_dmul>
 8007a3c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007a40:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007a42:	4656      	mov	r6, sl
 8007a44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a48:	f7f9 f8a6 	bl	8000b98 <__aeabi_d2iz>
 8007a4c:	4605      	mov	r5, r0
 8007a4e:	f7f8 fd89 	bl	8000564 <__aeabi_i2d>
 8007a52:	4602      	mov	r2, r0
 8007a54:	460b      	mov	r3, r1
 8007a56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a5a:	f7f8 fc35 	bl	80002c8 <__aeabi_dsub>
 8007a5e:	3530      	adds	r5, #48	@ 0x30
 8007a60:	f806 5b01 	strb.w	r5, [r6], #1
 8007a64:	4602      	mov	r2, r0
 8007a66:	460b      	mov	r3, r1
 8007a68:	42a6      	cmp	r6, r4
 8007a6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007a6e:	f04f 0200 	mov.w	r2, #0
 8007a72:	d124      	bne.n	8007abe <_dtoa_r+0x626>
 8007a74:	4baf      	ldr	r3, [pc, #700]	@ (8007d34 <_dtoa_r+0x89c>)
 8007a76:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007a7a:	f7f8 fc27 	bl	80002cc <__adddf3>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	460b      	mov	r3, r1
 8007a82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a86:	f7f9 f867 	bl	8000b58 <__aeabi_dcmpgt>
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	d163      	bne.n	8007b56 <_dtoa_r+0x6be>
 8007a8e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007a92:	49a8      	ldr	r1, [pc, #672]	@ (8007d34 <_dtoa_r+0x89c>)
 8007a94:	2000      	movs	r0, #0
 8007a96:	f7f8 fc17 	bl	80002c8 <__aeabi_dsub>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007aa2:	f7f9 f83b 	bl	8000b1c <__aeabi_dcmplt>
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	f43f af14 	beq.w	80078d4 <_dtoa_r+0x43c>
 8007aac:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007aae:	1e73      	subs	r3, r6, #1
 8007ab0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007ab2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007ab6:	2b30      	cmp	r3, #48	@ 0x30
 8007ab8:	d0f8      	beq.n	8007aac <_dtoa_r+0x614>
 8007aba:	4647      	mov	r7, r8
 8007abc:	e03b      	b.n	8007b36 <_dtoa_r+0x69e>
 8007abe:	4b9e      	ldr	r3, [pc, #632]	@ (8007d38 <_dtoa_r+0x8a0>)
 8007ac0:	f7f8 fdba 	bl	8000638 <__aeabi_dmul>
 8007ac4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ac8:	e7bc      	b.n	8007a44 <_dtoa_r+0x5ac>
 8007aca:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007ace:	4656      	mov	r6, sl
 8007ad0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	4629      	mov	r1, r5
 8007ad8:	f7f8 fed8 	bl	800088c <__aeabi_ddiv>
 8007adc:	f7f9 f85c 	bl	8000b98 <__aeabi_d2iz>
 8007ae0:	4680      	mov	r8, r0
 8007ae2:	f7f8 fd3f 	bl	8000564 <__aeabi_i2d>
 8007ae6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007aea:	f7f8 fda5 	bl	8000638 <__aeabi_dmul>
 8007aee:	4602      	mov	r2, r0
 8007af0:	460b      	mov	r3, r1
 8007af2:	4620      	mov	r0, r4
 8007af4:	4629      	mov	r1, r5
 8007af6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007afa:	f7f8 fbe5 	bl	80002c8 <__aeabi_dsub>
 8007afe:	f806 4b01 	strb.w	r4, [r6], #1
 8007b02:	9d03      	ldr	r5, [sp, #12]
 8007b04:	eba6 040a 	sub.w	r4, r6, sl
 8007b08:	42a5      	cmp	r5, r4
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	d133      	bne.n	8007b78 <_dtoa_r+0x6e0>
 8007b10:	f7f8 fbdc 	bl	80002cc <__adddf3>
 8007b14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b18:	4604      	mov	r4, r0
 8007b1a:	460d      	mov	r5, r1
 8007b1c:	f7f9 f81c 	bl	8000b58 <__aeabi_dcmpgt>
 8007b20:	b9c0      	cbnz	r0, 8007b54 <_dtoa_r+0x6bc>
 8007b22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b26:	4620      	mov	r0, r4
 8007b28:	4629      	mov	r1, r5
 8007b2a:	f7f8 ffed 	bl	8000b08 <__aeabi_dcmpeq>
 8007b2e:	b110      	cbz	r0, 8007b36 <_dtoa_r+0x69e>
 8007b30:	f018 0f01 	tst.w	r8, #1
 8007b34:	d10e      	bne.n	8007b54 <_dtoa_r+0x6bc>
 8007b36:	9902      	ldr	r1, [sp, #8]
 8007b38:	4648      	mov	r0, r9
 8007b3a:	f000 fbbd 	bl	80082b8 <_Bfree>
 8007b3e:	2300      	movs	r3, #0
 8007b40:	7033      	strb	r3, [r6, #0]
 8007b42:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007b44:	3701      	adds	r7, #1
 8007b46:	601f      	str	r7, [r3, #0]
 8007b48:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	f000 824b 	beq.w	8007fe6 <_dtoa_r+0xb4e>
 8007b50:	601e      	str	r6, [r3, #0]
 8007b52:	e248      	b.n	8007fe6 <_dtoa_r+0xb4e>
 8007b54:	46b8      	mov	r8, r7
 8007b56:	4633      	mov	r3, r6
 8007b58:	461e      	mov	r6, r3
 8007b5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b5e:	2a39      	cmp	r2, #57	@ 0x39
 8007b60:	d106      	bne.n	8007b70 <_dtoa_r+0x6d8>
 8007b62:	459a      	cmp	sl, r3
 8007b64:	d1f8      	bne.n	8007b58 <_dtoa_r+0x6c0>
 8007b66:	2230      	movs	r2, #48	@ 0x30
 8007b68:	f108 0801 	add.w	r8, r8, #1
 8007b6c:	f88a 2000 	strb.w	r2, [sl]
 8007b70:	781a      	ldrb	r2, [r3, #0]
 8007b72:	3201      	adds	r2, #1
 8007b74:	701a      	strb	r2, [r3, #0]
 8007b76:	e7a0      	b.n	8007aba <_dtoa_r+0x622>
 8007b78:	4b6f      	ldr	r3, [pc, #444]	@ (8007d38 <_dtoa_r+0x8a0>)
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f7f8 fd5c 	bl	8000638 <__aeabi_dmul>
 8007b80:	2200      	movs	r2, #0
 8007b82:	2300      	movs	r3, #0
 8007b84:	4604      	mov	r4, r0
 8007b86:	460d      	mov	r5, r1
 8007b88:	f7f8 ffbe 	bl	8000b08 <__aeabi_dcmpeq>
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	d09f      	beq.n	8007ad0 <_dtoa_r+0x638>
 8007b90:	e7d1      	b.n	8007b36 <_dtoa_r+0x69e>
 8007b92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b94:	2a00      	cmp	r2, #0
 8007b96:	f000 80ea 	beq.w	8007d6e <_dtoa_r+0x8d6>
 8007b9a:	9a07      	ldr	r2, [sp, #28]
 8007b9c:	2a01      	cmp	r2, #1
 8007b9e:	f300 80cd 	bgt.w	8007d3c <_dtoa_r+0x8a4>
 8007ba2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007ba4:	2a00      	cmp	r2, #0
 8007ba6:	f000 80c1 	beq.w	8007d2c <_dtoa_r+0x894>
 8007baa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007bae:	9c08      	ldr	r4, [sp, #32]
 8007bb0:	9e00      	ldr	r6, [sp, #0]
 8007bb2:	9a00      	ldr	r2, [sp, #0]
 8007bb4:	441a      	add	r2, r3
 8007bb6:	9200      	str	r2, [sp, #0]
 8007bb8:	9a06      	ldr	r2, [sp, #24]
 8007bba:	2101      	movs	r1, #1
 8007bbc:	441a      	add	r2, r3
 8007bbe:	4648      	mov	r0, r9
 8007bc0:	9206      	str	r2, [sp, #24]
 8007bc2:	f000 fc2d 	bl	8008420 <__i2b>
 8007bc6:	4605      	mov	r5, r0
 8007bc8:	b166      	cbz	r6, 8007be4 <_dtoa_r+0x74c>
 8007bca:	9b06      	ldr	r3, [sp, #24]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	dd09      	ble.n	8007be4 <_dtoa_r+0x74c>
 8007bd0:	42b3      	cmp	r3, r6
 8007bd2:	9a00      	ldr	r2, [sp, #0]
 8007bd4:	bfa8      	it	ge
 8007bd6:	4633      	movge	r3, r6
 8007bd8:	1ad2      	subs	r2, r2, r3
 8007bda:	9200      	str	r2, [sp, #0]
 8007bdc:	9a06      	ldr	r2, [sp, #24]
 8007bde:	1af6      	subs	r6, r6, r3
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	9306      	str	r3, [sp, #24]
 8007be4:	9b08      	ldr	r3, [sp, #32]
 8007be6:	b30b      	cbz	r3, 8007c2c <_dtoa_r+0x794>
 8007be8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	f000 80c6 	beq.w	8007d7c <_dtoa_r+0x8e4>
 8007bf0:	2c00      	cmp	r4, #0
 8007bf2:	f000 80c0 	beq.w	8007d76 <_dtoa_r+0x8de>
 8007bf6:	4629      	mov	r1, r5
 8007bf8:	4622      	mov	r2, r4
 8007bfa:	4648      	mov	r0, r9
 8007bfc:	f000 fcc8 	bl	8008590 <__pow5mult>
 8007c00:	9a02      	ldr	r2, [sp, #8]
 8007c02:	4601      	mov	r1, r0
 8007c04:	4605      	mov	r5, r0
 8007c06:	4648      	mov	r0, r9
 8007c08:	f000 fc20 	bl	800844c <__multiply>
 8007c0c:	9902      	ldr	r1, [sp, #8]
 8007c0e:	4680      	mov	r8, r0
 8007c10:	4648      	mov	r0, r9
 8007c12:	f000 fb51 	bl	80082b8 <_Bfree>
 8007c16:	9b08      	ldr	r3, [sp, #32]
 8007c18:	1b1b      	subs	r3, r3, r4
 8007c1a:	9308      	str	r3, [sp, #32]
 8007c1c:	f000 80b1 	beq.w	8007d82 <_dtoa_r+0x8ea>
 8007c20:	9a08      	ldr	r2, [sp, #32]
 8007c22:	4641      	mov	r1, r8
 8007c24:	4648      	mov	r0, r9
 8007c26:	f000 fcb3 	bl	8008590 <__pow5mult>
 8007c2a:	9002      	str	r0, [sp, #8]
 8007c2c:	2101      	movs	r1, #1
 8007c2e:	4648      	mov	r0, r9
 8007c30:	f000 fbf6 	bl	8008420 <__i2b>
 8007c34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c36:	4604      	mov	r4, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f000 81d8 	beq.w	8007fee <_dtoa_r+0xb56>
 8007c3e:	461a      	mov	r2, r3
 8007c40:	4601      	mov	r1, r0
 8007c42:	4648      	mov	r0, r9
 8007c44:	f000 fca4 	bl	8008590 <__pow5mult>
 8007c48:	9b07      	ldr	r3, [sp, #28]
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	4604      	mov	r4, r0
 8007c4e:	f300 809f 	bgt.w	8007d90 <_dtoa_r+0x8f8>
 8007c52:	9b04      	ldr	r3, [sp, #16]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f040 8097 	bne.w	8007d88 <_dtoa_r+0x8f0>
 8007c5a:	9b05      	ldr	r3, [sp, #20]
 8007c5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f040 8093 	bne.w	8007d8c <_dtoa_r+0x8f4>
 8007c66:	9b05      	ldr	r3, [sp, #20]
 8007c68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007c6c:	0d1b      	lsrs	r3, r3, #20
 8007c6e:	051b      	lsls	r3, r3, #20
 8007c70:	b133      	cbz	r3, 8007c80 <_dtoa_r+0x7e8>
 8007c72:	9b00      	ldr	r3, [sp, #0]
 8007c74:	3301      	adds	r3, #1
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	9b06      	ldr	r3, [sp, #24]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	9306      	str	r3, [sp, #24]
 8007c7e:	2301      	movs	r3, #1
 8007c80:	9308      	str	r3, [sp, #32]
 8007c82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f000 81b8 	beq.w	8007ffa <_dtoa_r+0xb62>
 8007c8a:	6923      	ldr	r3, [r4, #16]
 8007c8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007c90:	6918      	ldr	r0, [r3, #16]
 8007c92:	f000 fb79 	bl	8008388 <__hi0bits>
 8007c96:	f1c0 0020 	rsb	r0, r0, #32
 8007c9a:	9b06      	ldr	r3, [sp, #24]
 8007c9c:	4418      	add	r0, r3
 8007c9e:	f010 001f 	ands.w	r0, r0, #31
 8007ca2:	f000 8082 	beq.w	8007daa <_dtoa_r+0x912>
 8007ca6:	f1c0 0320 	rsb	r3, r0, #32
 8007caa:	2b04      	cmp	r3, #4
 8007cac:	dd73      	ble.n	8007d96 <_dtoa_r+0x8fe>
 8007cae:	9b00      	ldr	r3, [sp, #0]
 8007cb0:	f1c0 001c 	rsb	r0, r0, #28
 8007cb4:	4403      	add	r3, r0
 8007cb6:	9300      	str	r3, [sp, #0]
 8007cb8:	9b06      	ldr	r3, [sp, #24]
 8007cba:	4403      	add	r3, r0
 8007cbc:	4406      	add	r6, r0
 8007cbe:	9306      	str	r3, [sp, #24]
 8007cc0:	9b00      	ldr	r3, [sp, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	dd05      	ble.n	8007cd2 <_dtoa_r+0x83a>
 8007cc6:	9902      	ldr	r1, [sp, #8]
 8007cc8:	461a      	mov	r2, r3
 8007cca:	4648      	mov	r0, r9
 8007ccc:	f000 fcba 	bl	8008644 <__lshift>
 8007cd0:	9002      	str	r0, [sp, #8]
 8007cd2:	9b06      	ldr	r3, [sp, #24]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	dd05      	ble.n	8007ce4 <_dtoa_r+0x84c>
 8007cd8:	4621      	mov	r1, r4
 8007cda:	461a      	mov	r2, r3
 8007cdc:	4648      	mov	r0, r9
 8007cde:	f000 fcb1 	bl	8008644 <__lshift>
 8007ce2:	4604      	mov	r4, r0
 8007ce4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d061      	beq.n	8007dae <_dtoa_r+0x916>
 8007cea:	9802      	ldr	r0, [sp, #8]
 8007cec:	4621      	mov	r1, r4
 8007cee:	f000 fd15 	bl	800871c <__mcmp>
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	da5b      	bge.n	8007dae <_dtoa_r+0x916>
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	9902      	ldr	r1, [sp, #8]
 8007cfa:	220a      	movs	r2, #10
 8007cfc:	4648      	mov	r0, r9
 8007cfe:	f000 fafd 	bl	80082fc <__multadd>
 8007d02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d04:	9002      	str	r0, [sp, #8]
 8007d06:	f107 38ff 	add.w	r8, r7, #4294967295
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	f000 8177 	beq.w	8007ffe <_dtoa_r+0xb66>
 8007d10:	4629      	mov	r1, r5
 8007d12:	2300      	movs	r3, #0
 8007d14:	220a      	movs	r2, #10
 8007d16:	4648      	mov	r0, r9
 8007d18:	f000 faf0 	bl	80082fc <__multadd>
 8007d1c:	f1bb 0f00 	cmp.w	fp, #0
 8007d20:	4605      	mov	r5, r0
 8007d22:	dc6f      	bgt.n	8007e04 <_dtoa_r+0x96c>
 8007d24:	9b07      	ldr	r3, [sp, #28]
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	dc49      	bgt.n	8007dbe <_dtoa_r+0x926>
 8007d2a:	e06b      	b.n	8007e04 <_dtoa_r+0x96c>
 8007d2c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007d2e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007d32:	e73c      	b.n	8007bae <_dtoa_r+0x716>
 8007d34:	3fe00000 	.word	0x3fe00000
 8007d38:	40240000 	.word	0x40240000
 8007d3c:	9b03      	ldr	r3, [sp, #12]
 8007d3e:	1e5c      	subs	r4, r3, #1
 8007d40:	9b08      	ldr	r3, [sp, #32]
 8007d42:	42a3      	cmp	r3, r4
 8007d44:	db09      	blt.n	8007d5a <_dtoa_r+0x8c2>
 8007d46:	1b1c      	subs	r4, r3, r4
 8007d48:	9b03      	ldr	r3, [sp, #12]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f6bf af30 	bge.w	8007bb0 <_dtoa_r+0x718>
 8007d50:	9b00      	ldr	r3, [sp, #0]
 8007d52:	9a03      	ldr	r2, [sp, #12]
 8007d54:	1a9e      	subs	r6, r3, r2
 8007d56:	2300      	movs	r3, #0
 8007d58:	e72b      	b.n	8007bb2 <_dtoa_r+0x71a>
 8007d5a:	9b08      	ldr	r3, [sp, #32]
 8007d5c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007d5e:	9408      	str	r4, [sp, #32]
 8007d60:	1ae3      	subs	r3, r4, r3
 8007d62:	441a      	add	r2, r3
 8007d64:	9e00      	ldr	r6, [sp, #0]
 8007d66:	9b03      	ldr	r3, [sp, #12]
 8007d68:	920d      	str	r2, [sp, #52]	@ 0x34
 8007d6a:	2400      	movs	r4, #0
 8007d6c:	e721      	b.n	8007bb2 <_dtoa_r+0x71a>
 8007d6e:	9c08      	ldr	r4, [sp, #32]
 8007d70:	9e00      	ldr	r6, [sp, #0]
 8007d72:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007d74:	e728      	b.n	8007bc8 <_dtoa_r+0x730>
 8007d76:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007d7a:	e751      	b.n	8007c20 <_dtoa_r+0x788>
 8007d7c:	9a08      	ldr	r2, [sp, #32]
 8007d7e:	9902      	ldr	r1, [sp, #8]
 8007d80:	e750      	b.n	8007c24 <_dtoa_r+0x78c>
 8007d82:	f8cd 8008 	str.w	r8, [sp, #8]
 8007d86:	e751      	b.n	8007c2c <_dtoa_r+0x794>
 8007d88:	2300      	movs	r3, #0
 8007d8a:	e779      	b.n	8007c80 <_dtoa_r+0x7e8>
 8007d8c:	9b04      	ldr	r3, [sp, #16]
 8007d8e:	e777      	b.n	8007c80 <_dtoa_r+0x7e8>
 8007d90:	2300      	movs	r3, #0
 8007d92:	9308      	str	r3, [sp, #32]
 8007d94:	e779      	b.n	8007c8a <_dtoa_r+0x7f2>
 8007d96:	d093      	beq.n	8007cc0 <_dtoa_r+0x828>
 8007d98:	9a00      	ldr	r2, [sp, #0]
 8007d9a:	331c      	adds	r3, #28
 8007d9c:	441a      	add	r2, r3
 8007d9e:	9200      	str	r2, [sp, #0]
 8007da0:	9a06      	ldr	r2, [sp, #24]
 8007da2:	441a      	add	r2, r3
 8007da4:	441e      	add	r6, r3
 8007da6:	9206      	str	r2, [sp, #24]
 8007da8:	e78a      	b.n	8007cc0 <_dtoa_r+0x828>
 8007daa:	4603      	mov	r3, r0
 8007dac:	e7f4      	b.n	8007d98 <_dtoa_r+0x900>
 8007dae:	9b03      	ldr	r3, [sp, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	46b8      	mov	r8, r7
 8007db4:	dc20      	bgt.n	8007df8 <_dtoa_r+0x960>
 8007db6:	469b      	mov	fp, r3
 8007db8:	9b07      	ldr	r3, [sp, #28]
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	dd1e      	ble.n	8007dfc <_dtoa_r+0x964>
 8007dbe:	f1bb 0f00 	cmp.w	fp, #0
 8007dc2:	f47f adb1 	bne.w	8007928 <_dtoa_r+0x490>
 8007dc6:	4621      	mov	r1, r4
 8007dc8:	465b      	mov	r3, fp
 8007dca:	2205      	movs	r2, #5
 8007dcc:	4648      	mov	r0, r9
 8007dce:	f000 fa95 	bl	80082fc <__multadd>
 8007dd2:	4601      	mov	r1, r0
 8007dd4:	4604      	mov	r4, r0
 8007dd6:	9802      	ldr	r0, [sp, #8]
 8007dd8:	f000 fca0 	bl	800871c <__mcmp>
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	f77f ada3 	ble.w	8007928 <_dtoa_r+0x490>
 8007de2:	4656      	mov	r6, sl
 8007de4:	2331      	movs	r3, #49	@ 0x31
 8007de6:	f806 3b01 	strb.w	r3, [r6], #1
 8007dea:	f108 0801 	add.w	r8, r8, #1
 8007dee:	e59f      	b.n	8007930 <_dtoa_r+0x498>
 8007df0:	9c03      	ldr	r4, [sp, #12]
 8007df2:	46b8      	mov	r8, r7
 8007df4:	4625      	mov	r5, r4
 8007df6:	e7f4      	b.n	8007de2 <_dtoa_r+0x94a>
 8007df8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007dfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f000 8101 	beq.w	8008006 <_dtoa_r+0xb6e>
 8007e04:	2e00      	cmp	r6, #0
 8007e06:	dd05      	ble.n	8007e14 <_dtoa_r+0x97c>
 8007e08:	4629      	mov	r1, r5
 8007e0a:	4632      	mov	r2, r6
 8007e0c:	4648      	mov	r0, r9
 8007e0e:	f000 fc19 	bl	8008644 <__lshift>
 8007e12:	4605      	mov	r5, r0
 8007e14:	9b08      	ldr	r3, [sp, #32]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d05c      	beq.n	8007ed4 <_dtoa_r+0xa3c>
 8007e1a:	6869      	ldr	r1, [r5, #4]
 8007e1c:	4648      	mov	r0, r9
 8007e1e:	f000 fa0b 	bl	8008238 <_Balloc>
 8007e22:	4606      	mov	r6, r0
 8007e24:	b928      	cbnz	r0, 8007e32 <_dtoa_r+0x99a>
 8007e26:	4b82      	ldr	r3, [pc, #520]	@ (8008030 <_dtoa_r+0xb98>)
 8007e28:	4602      	mov	r2, r0
 8007e2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007e2e:	f7ff bb4a 	b.w	80074c6 <_dtoa_r+0x2e>
 8007e32:	692a      	ldr	r2, [r5, #16]
 8007e34:	3202      	adds	r2, #2
 8007e36:	0092      	lsls	r2, r2, #2
 8007e38:	f105 010c 	add.w	r1, r5, #12
 8007e3c:	300c      	adds	r0, #12
 8007e3e:	f000 ffa3 	bl	8008d88 <memcpy>
 8007e42:	2201      	movs	r2, #1
 8007e44:	4631      	mov	r1, r6
 8007e46:	4648      	mov	r0, r9
 8007e48:	f000 fbfc 	bl	8008644 <__lshift>
 8007e4c:	f10a 0301 	add.w	r3, sl, #1
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	eb0a 030b 	add.w	r3, sl, fp
 8007e56:	9308      	str	r3, [sp, #32]
 8007e58:	9b04      	ldr	r3, [sp, #16]
 8007e5a:	f003 0301 	and.w	r3, r3, #1
 8007e5e:	462f      	mov	r7, r5
 8007e60:	9306      	str	r3, [sp, #24]
 8007e62:	4605      	mov	r5, r0
 8007e64:	9b00      	ldr	r3, [sp, #0]
 8007e66:	9802      	ldr	r0, [sp, #8]
 8007e68:	4621      	mov	r1, r4
 8007e6a:	f103 3bff 	add.w	fp, r3, #4294967295
 8007e6e:	f7ff fa88 	bl	8007382 <quorem>
 8007e72:	4603      	mov	r3, r0
 8007e74:	3330      	adds	r3, #48	@ 0x30
 8007e76:	9003      	str	r0, [sp, #12]
 8007e78:	4639      	mov	r1, r7
 8007e7a:	9802      	ldr	r0, [sp, #8]
 8007e7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e7e:	f000 fc4d 	bl	800871c <__mcmp>
 8007e82:	462a      	mov	r2, r5
 8007e84:	9004      	str	r0, [sp, #16]
 8007e86:	4621      	mov	r1, r4
 8007e88:	4648      	mov	r0, r9
 8007e8a:	f000 fc63 	bl	8008754 <__mdiff>
 8007e8e:	68c2      	ldr	r2, [r0, #12]
 8007e90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e92:	4606      	mov	r6, r0
 8007e94:	bb02      	cbnz	r2, 8007ed8 <_dtoa_r+0xa40>
 8007e96:	4601      	mov	r1, r0
 8007e98:	9802      	ldr	r0, [sp, #8]
 8007e9a:	f000 fc3f 	bl	800871c <__mcmp>
 8007e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	4631      	mov	r1, r6
 8007ea4:	4648      	mov	r0, r9
 8007ea6:	920c      	str	r2, [sp, #48]	@ 0x30
 8007ea8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007eaa:	f000 fa05 	bl	80082b8 <_Bfree>
 8007eae:	9b07      	ldr	r3, [sp, #28]
 8007eb0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007eb2:	9e00      	ldr	r6, [sp, #0]
 8007eb4:	ea42 0103 	orr.w	r1, r2, r3
 8007eb8:	9b06      	ldr	r3, [sp, #24]
 8007eba:	4319      	orrs	r1, r3
 8007ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ebe:	d10d      	bne.n	8007edc <_dtoa_r+0xa44>
 8007ec0:	2b39      	cmp	r3, #57	@ 0x39
 8007ec2:	d027      	beq.n	8007f14 <_dtoa_r+0xa7c>
 8007ec4:	9a04      	ldr	r2, [sp, #16]
 8007ec6:	2a00      	cmp	r2, #0
 8007ec8:	dd01      	ble.n	8007ece <_dtoa_r+0xa36>
 8007eca:	9b03      	ldr	r3, [sp, #12]
 8007ecc:	3331      	adds	r3, #49	@ 0x31
 8007ece:	f88b 3000 	strb.w	r3, [fp]
 8007ed2:	e52e      	b.n	8007932 <_dtoa_r+0x49a>
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	e7b9      	b.n	8007e4c <_dtoa_r+0x9b4>
 8007ed8:	2201      	movs	r2, #1
 8007eda:	e7e2      	b.n	8007ea2 <_dtoa_r+0xa0a>
 8007edc:	9904      	ldr	r1, [sp, #16]
 8007ede:	2900      	cmp	r1, #0
 8007ee0:	db04      	blt.n	8007eec <_dtoa_r+0xa54>
 8007ee2:	9807      	ldr	r0, [sp, #28]
 8007ee4:	4301      	orrs	r1, r0
 8007ee6:	9806      	ldr	r0, [sp, #24]
 8007ee8:	4301      	orrs	r1, r0
 8007eea:	d120      	bne.n	8007f2e <_dtoa_r+0xa96>
 8007eec:	2a00      	cmp	r2, #0
 8007eee:	ddee      	ble.n	8007ece <_dtoa_r+0xa36>
 8007ef0:	9902      	ldr	r1, [sp, #8]
 8007ef2:	9300      	str	r3, [sp, #0]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	4648      	mov	r0, r9
 8007ef8:	f000 fba4 	bl	8008644 <__lshift>
 8007efc:	4621      	mov	r1, r4
 8007efe:	9002      	str	r0, [sp, #8]
 8007f00:	f000 fc0c 	bl	800871c <__mcmp>
 8007f04:	2800      	cmp	r0, #0
 8007f06:	9b00      	ldr	r3, [sp, #0]
 8007f08:	dc02      	bgt.n	8007f10 <_dtoa_r+0xa78>
 8007f0a:	d1e0      	bne.n	8007ece <_dtoa_r+0xa36>
 8007f0c:	07da      	lsls	r2, r3, #31
 8007f0e:	d5de      	bpl.n	8007ece <_dtoa_r+0xa36>
 8007f10:	2b39      	cmp	r3, #57	@ 0x39
 8007f12:	d1da      	bne.n	8007eca <_dtoa_r+0xa32>
 8007f14:	2339      	movs	r3, #57	@ 0x39
 8007f16:	f88b 3000 	strb.w	r3, [fp]
 8007f1a:	4633      	mov	r3, r6
 8007f1c:	461e      	mov	r6, r3
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007f24:	2a39      	cmp	r2, #57	@ 0x39
 8007f26:	d04e      	beq.n	8007fc6 <_dtoa_r+0xb2e>
 8007f28:	3201      	adds	r2, #1
 8007f2a:	701a      	strb	r2, [r3, #0]
 8007f2c:	e501      	b.n	8007932 <_dtoa_r+0x49a>
 8007f2e:	2a00      	cmp	r2, #0
 8007f30:	dd03      	ble.n	8007f3a <_dtoa_r+0xaa2>
 8007f32:	2b39      	cmp	r3, #57	@ 0x39
 8007f34:	d0ee      	beq.n	8007f14 <_dtoa_r+0xa7c>
 8007f36:	3301      	adds	r3, #1
 8007f38:	e7c9      	b.n	8007ece <_dtoa_r+0xa36>
 8007f3a:	9a00      	ldr	r2, [sp, #0]
 8007f3c:	9908      	ldr	r1, [sp, #32]
 8007f3e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007f42:	428a      	cmp	r2, r1
 8007f44:	d028      	beq.n	8007f98 <_dtoa_r+0xb00>
 8007f46:	9902      	ldr	r1, [sp, #8]
 8007f48:	2300      	movs	r3, #0
 8007f4a:	220a      	movs	r2, #10
 8007f4c:	4648      	mov	r0, r9
 8007f4e:	f000 f9d5 	bl	80082fc <__multadd>
 8007f52:	42af      	cmp	r7, r5
 8007f54:	9002      	str	r0, [sp, #8]
 8007f56:	f04f 0300 	mov.w	r3, #0
 8007f5a:	f04f 020a 	mov.w	r2, #10
 8007f5e:	4639      	mov	r1, r7
 8007f60:	4648      	mov	r0, r9
 8007f62:	d107      	bne.n	8007f74 <_dtoa_r+0xadc>
 8007f64:	f000 f9ca 	bl	80082fc <__multadd>
 8007f68:	4607      	mov	r7, r0
 8007f6a:	4605      	mov	r5, r0
 8007f6c:	9b00      	ldr	r3, [sp, #0]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	e777      	b.n	8007e64 <_dtoa_r+0x9cc>
 8007f74:	f000 f9c2 	bl	80082fc <__multadd>
 8007f78:	4629      	mov	r1, r5
 8007f7a:	4607      	mov	r7, r0
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	220a      	movs	r2, #10
 8007f80:	4648      	mov	r0, r9
 8007f82:	f000 f9bb 	bl	80082fc <__multadd>
 8007f86:	4605      	mov	r5, r0
 8007f88:	e7f0      	b.n	8007f6c <_dtoa_r+0xad4>
 8007f8a:	f1bb 0f00 	cmp.w	fp, #0
 8007f8e:	bfcc      	ite	gt
 8007f90:	465e      	movgt	r6, fp
 8007f92:	2601      	movle	r6, #1
 8007f94:	4456      	add	r6, sl
 8007f96:	2700      	movs	r7, #0
 8007f98:	9902      	ldr	r1, [sp, #8]
 8007f9a:	9300      	str	r3, [sp, #0]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	4648      	mov	r0, r9
 8007fa0:	f000 fb50 	bl	8008644 <__lshift>
 8007fa4:	4621      	mov	r1, r4
 8007fa6:	9002      	str	r0, [sp, #8]
 8007fa8:	f000 fbb8 	bl	800871c <__mcmp>
 8007fac:	2800      	cmp	r0, #0
 8007fae:	dcb4      	bgt.n	8007f1a <_dtoa_r+0xa82>
 8007fb0:	d102      	bne.n	8007fb8 <_dtoa_r+0xb20>
 8007fb2:	9b00      	ldr	r3, [sp, #0]
 8007fb4:	07db      	lsls	r3, r3, #31
 8007fb6:	d4b0      	bmi.n	8007f1a <_dtoa_r+0xa82>
 8007fb8:	4633      	mov	r3, r6
 8007fba:	461e      	mov	r6, r3
 8007fbc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fc0:	2a30      	cmp	r2, #48	@ 0x30
 8007fc2:	d0fa      	beq.n	8007fba <_dtoa_r+0xb22>
 8007fc4:	e4b5      	b.n	8007932 <_dtoa_r+0x49a>
 8007fc6:	459a      	cmp	sl, r3
 8007fc8:	d1a8      	bne.n	8007f1c <_dtoa_r+0xa84>
 8007fca:	2331      	movs	r3, #49	@ 0x31
 8007fcc:	f108 0801 	add.w	r8, r8, #1
 8007fd0:	f88a 3000 	strb.w	r3, [sl]
 8007fd4:	e4ad      	b.n	8007932 <_dtoa_r+0x49a>
 8007fd6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007fd8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008034 <_dtoa_r+0xb9c>
 8007fdc:	b11b      	cbz	r3, 8007fe6 <_dtoa_r+0xb4e>
 8007fde:	f10a 0308 	add.w	r3, sl, #8
 8007fe2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007fe4:	6013      	str	r3, [r2, #0]
 8007fe6:	4650      	mov	r0, sl
 8007fe8:	b017      	add	sp, #92	@ 0x5c
 8007fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fee:	9b07      	ldr	r3, [sp, #28]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	f77f ae2e 	ble.w	8007c52 <_dtoa_r+0x7ba>
 8007ff6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ff8:	9308      	str	r3, [sp, #32]
 8007ffa:	2001      	movs	r0, #1
 8007ffc:	e64d      	b.n	8007c9a <_dtoa_r+0x802>
 8007ffe:	f1bb 0f00 	cmp.w	fp, #0
 8008002:	f77f aed9 	ble.w	8007db8 <_dtoa_r+0x920>
 8008006:	4656      	mov	r6, sl
 8008008:	9802      	ldr	r0, [sp, #8]
 800800a:	4621      	mov	r1, r4
 800800c:	f7ff f9b9 	bl	8007382 <quorem>
 8008010:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008014:	f806 3b01 	strb.w	r3, [r6], #1
 8008018:	eba6 020a 	sub.w	r2, r6, sl
 800801c:	4593      	cmp	fp, r2
 800801e:	ddb4      	ble.n	8007f8a <_dtoa_r+0xaf2>
 8008020:	9902      	ldr	r1, [sp, #8]
 8008022:	2300      	movs	r3, #0
 8008024:	220a      	movs	r2, #10
 8008026:	4648      	mov	r0, r9
 8008028:	f000 f968 	bl	80082fc <__multadd>
 800802c:	9002      	str	r0, [sp, #8]
 800802e:	e7eb      	b.n	8008008 <_dtoa_r+0xb70>
 8008030:	08009dd4 	.word	0x08009dd4
 8008034:	08009d58 	.word	0x08009d58

08008038 <_free_r>:
 8008038:	b538      	push	{r3, r4, r5, lr}
 800803a:	4605      	mov	r5, r0
 800803c:	2900      	cmp	r1, #0
 800803e:	d041      	beq.n	80080c4 <_free_r+0x8c>
 8008040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008044:	1f0c      	subs	r4, r1, #4
 8008046:	2b00      	cmp	r3, #0
 8008048:	bfb8      	it	lt
 800804a:	18e4      	addlt	r4, r4, r3
 800804c:	f000 f8e8 	bl	8008220 <__malloc_lock>
 8008050:	4a1d      	ldr	r2, [pc, #116]	@ (80080c8 <_free_r+0x90>)
 8008052:	6813      	ldr	r3, [r2, #0]
 8008054:	b933      	cbnz	r3, 8008064 <_free_r+0x2c>
 8008056:	6063      	str	r3, [r4, #4]
 8008058:	6014      	str	r4, [r2, #0]
 800805a:	4628      	mov	r0, r5
 800805c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008060:	f000 b8e4 	b.w	800822c <__malloc_unlock>
 8008064:	42a3      	cmp	r3, r4
 8008066:	d908      	bls.n	800807a <_free_r+0x42>
 8008068:	6820      	ldr	r0, [r4, #0]
 800806a:	1821      	adds	r1, r4, r0
 800806c:	428b      	cmp	r3, r1
 800806e:	bf01      	itttt	eq
 8008070:	6819      	ldreq	r1, [r3, #0]
 8008072:	685b      	ldreq	r3, [r3, #4]
 8008074:	1809      	addeq	r1, r1, r0
 8008076:	6021      	streq	r1, [r4, #0]
 8008078:	e7ed      	b.n	8008056 <_free_r+0x1e>
 800807a:	461a      	mov	r2, r3
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	b10b      	cbz	r3, 8008084 <_free_r+0x4c>
 8008080:	42a3      	cmp	r3, r4
 8008082:	d9fa      	bls.n	800807a <_free_r+0x42>
 8008084:	6811      	ldr	r1, [r2, #0]
 8008086:	1850      	adds	r0, r2, r1
 8008088:	42a0      	cmp	r0, r4
 800808a:	d10b      	bne.n	80080a4 <_free_r+0x6c>
 800808c:	6820      	ldr	r0, [r4, #0]
 800808e:	4401      	add	r1, r0
 8008090:	1850      	adds	r0, r2, r1
 8008092:	4283      	cmp	r3, r0
 8008094:	6011      	str	r1, [r2, #0]
 8008096:	d1e0      	bne.n	800805a <_free_r+0x22>
 8008098:	6818      	ldr	r0, [r3, #0]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	6053      	str	r3, [r2, #4]
 800809e:	4408      	add	r0, r1
 80080a0:	6010      	str	r0, [r2, #0]
 80080a2:	e7da      	b.n	800805a <_free_r+0x22>
 80080a4:	d902      	bls.n	80080ac <_free_r+0x74>
 80080a6:	230c      	movs	r3, #12
 80080a8:	602b      	str	r3, [r5, #0]
 80080aa:	e7d6      	b.n	800805a <_free_r+0x22>
 80080ac:	6820      	ldr	r0, [r4, #0]
 80080ae:	1821      	adds	r1, r4, r0
 80080b0:	428b      	cmp	r3, r1
 80080b2:	bf04      	itt	eq
 80080b4:	6819      	ldreq	r1, [r3, #0]
 80080b6:	685b      	ldreq	r3, [r3, #4]
 80080b8:	6063      	str	r3, [r4, #4]
 80080ba:	bf04      	itt	eq
 80080bc:	1809      	addeq	r1, r1, r0
 80080be:	6021      	streq	r1, [r4, #0]
 80080c0:	6054      	str	r4, [r2, #4]
 80080c2:	e7ca      	b.n	800805a <_free_r+0x22>
 80080c4:	bd38      	pop	{r3, r4, r5, pc}
 80080c6:	bf00      	nop
 80080c8:	200004b8 	.word	0x200004b8

080080cc <malloc>:
 80080cc:	4b02      	ldr	r3, [pc, #8]	@ (80080d8 <malloc+0xc>)
 80080ce:	4601      	mov	r1, r0
 80080d0:	6818      	ldr	r0, [r3, #0]
 80080d2:	f000 b825 	b.w	8008120 <_malloc_r>
 80080d6:	bf00      	nop
 80080d8:	20000018 	.word	0x20000018

080080dc <sbrk_aligned>:
 80080dc:	b570      	push	{r4, r5, r6, lr}
 80080de:	4e0f      	ldr	r6, [pc, #60]	@ (800811c <sbrk_aligned+0x40>)
 80080e0:	460c      	mov	r4, r1
 80080e2:	6831      	ldr	r1, [r6, #0]
 80080e4:	4605      	mov	r5, r0
 80080e6:	b911      	cbnz	r1, 80080ee <sbrk_aligned+0x12>
 80080e8:	f000 fe3e 	bl	8008d68 <_sbrk_r>
 80080ec:	6030      	str	r0, [r6, #0]
 80080ee:	4621      	mov	r1, r4
 80080f0:	4628      	mov	r0, r5
 80080f2:	f000 fe39 	bl	8008d68 <_sbrk_r>
 80080f6:	1c43      	adds	r3, r0, #1
 80080f8:	d103      	bne.n	8008102 <sbrk_aligned+0x26>
 80080fa:	f04f 34ff 	mov.w	r4, #4294967295
 80080fe:	4620      	mov	r0, r4
 8008100:	bd70      	pop	{r4, r5, r6, pc}
 8008102:	1cc4      	adds	r4, r0, #3
 8008104:	f024 0403 	bic.w	r4, r4, #3
 8008108:	42a0      	cmp	r0, r4
 800810a:	d0f8      	beq.n	80080fe <sbrk_aligned+0x22>
 800810c:	1a21      	subs	r1, r4, r0
 800810e:	4628      	mov	r0, r5
 8008110:	f000 fe2a 	bl	8008d68 <_sbrk_r>
 8008114:	3001      	adds	r0, #1
 8008116:	d1f2      	bne.n	80080fe <sbrk_aligned+0x22>
 8008118:	e7ef      	b.n	80080fa <sbrk_aligned+0x1e>
 800811a:	bf00      	nop
 800811c:	200004b4 	.word	0x200004b4

08008120 <_malloc_r>:
 8008120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008124:	1ccd      	adds	r5, r1, #3
 8008126:	f025 0503 	bic.w	r5, r5, #3
 800812a:	3508      	adds	r5, #8
 800812c:	2d0c      	cmp	r5, #12
 800812e:	bf38      	it	cc
 8008130:	250c      	movcc	r5, #12
 8008132:	2d00      	cmp	r5, #0
 8008134:	4606      	mov	r6, r0
 8008136:	db01      	blt.n	800813c <_malloc_r+0x1c>
 8008138:	42a9      	cmp	r1, r5
 800813a:	d904      	bls.n	8008146 <_malloc_r+0x26>
 800813c:	230c      	movs	r3, #12
 800813e:	6033      	str	r3, [r6, #0]
 8008140:	2000      	movs	r0, #0
 8008142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008146:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800821c <_malloc_r+0xfc>
 800814a:	f000 f869 	bl	8008220 <__malloc_lock>
 800814e:	f8d8 3000 	ldr.w	r3, [r8]
 8008152:	461c      	mov	r4, r3
 8008154:	bb44      	cbnz	r4, 80081a8 <_malloc_r+0x88>
 8008156:	4629      	mov	r1, r5
 8008158:	4630      	mov	r0, r6
 800815a:	f7ff ffbf 	bl	80080dc <sbrk_aligned>
 800815e:	1c43      	adds	r3, r0, #1
 8008160:	4604      	mov	r4, r0
 8008162:	d158      	bne.n	8008216 <_malloc_r+0xf6>
 8008164:	f8d8 4000 	ldr.w	r4, [r8]
 8008168:	4627      	mov	r7, r4
 800816a:	2f00      	cmp	r7, #0
 800816c:	d143      	bne.n	80081f6 <_malloc_r+0xd6>
 800816e:	2c00      	cmp	r4, #0
 8008170:	d04b      	beq.n	800820a <_malloc_r+0xea>
 8008172:	6823      	ldr	r3, [r4, #0]
 8008174:	4639      	mov	r1, r7
 8008176:	4630      	mov	r0, r6
 8008178:	eb04 0903 	add.w	r9, r4, r3
 800817c:	f000 fdf4 	bl	8008d68 <_sbrk_r>
 8008180:	4581      	cmp	r9, r0
 8008182:	d142      	bne.n	800820a <_malloc_r+0xea>
 8008184:	6821      	ldr	r1, [r4, #0]
 8008186:	1a6d      	subs	r5, r5, r1
 8008188:	4629      	mov	r1, r5
 800818a:	4630      	mov	r0, r6
 800818c:	f7ff ffa6 	bl	80080dc <sbrk_aligned>
 8008190:	3001      	adds	r0, #1
 8008192:	d03a      	beq.n	800820a <_malloc_r+0xea>
 8008194:	6823      	ldr	r3, [r4, #0]
 8008196:	442b      	add	r3, r5
 8008198:	6023      	str	r3, [r4, #0]
 800819a:	f8d8 3000 	ldr.w	r3, [r8]
 800819e:	685a      	ldr	r2, [r3, #4]
 80081a0:	bb62      	cbnz	r2, 80081fc <_malloc_r+0xdc>
 80081a2:	f8c8 7000 	str.w	r7, [r8]
 80081a6:	e00f      	b.n	80081c8 <_malloc_r+0xa8>
 80081a8:	6822      	ldr	r2, [r4, #0]
 80081aa:	1b52      	subs	r2, r2, r5
 80081ac:	d420      	bmi.n	80081f0 <_malloc_r+0xd0>
 80081ae:	2a0b      	cmp	r2, #11
 80081b0:	d917      	bls.n	80081e2 <_malloc_r+0xc2>
 80081b2:	1961      	adds	r1, r4, r5
 80081b4:	42a3      	cmp	r3, r4
 80081b6:	6025      	str	r5, [r4, #0]
 80081b8:	bf18      	it	ne
 80081ba:	6059      	strne	r1, [r3, #4]
 80081bc:	6863      	ldr	r3, [r4, #4]
 80081be:	bf08      	it	eq
 80081c0:	f8c8 1000 	streq.w	r1, [r8]
 80081c4:	5162      	str	r2, [r4, r5]
 80081c6:	604b      	str	r3, [r1, #4]
 80081c8:	4630      	mov	r0, r6
 80081ca:	f000 f82f 	bl	800822c <__malloc_unlock>
 80081ce:	f104 000b 	add.w	r0, r4, #11
 80081d2:	1d23      	adds	r3, r4, #4
 80081d4:	f020 0007 	bic.w	r0, r0, #7
 80081d8:	1ac2      	subs	r2, r0, r3
 80081da:	bf1c      	itt	ne
 80081dc:	1a1b      	subne	r3, r3, r0
 80081de:	50a3      	strne	r3, [r4, r2]
 80081e0:	e7af      	b.n	8008142 <_malloc_r+0x22>
 80081e2:	6862      	ldr	r2, [r4, #4]
 80081e4:	42a3      	cmp	r3, r4
 80081e6:	bf0c      	ite	eq
 80081e8:	f8c8 2000 	streq.w	r2, [r8]
 80081ec:	605a      	strne	r2, [r3, #4]
 80081ee:	e7eb      	b.n	80081c8 <_malloc_r+0xa8>
 80081f0:	4623      	mov	r3, r4
 80081f2:	6864      	ldr	r4, [r4, #4]
 80081f4:	e7ae      	b.n	8008154 <_malloc_r+0x34>
 80081f6:	463c      	mov	r4, r7
 80081f8:	687f      	ldr	r7, [r7, #4]
 80081fa:	e7b6      	b.n	800816a <_malloc_r+0x4a>
 80081fc:	461a      	mov	r2, r3
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	42a3      	cmp	r3, r4
 8008202:	d1fb      	bne.n	80081fc <_malloc_r+0xdc>
 8008204:	2300      	movs	r3, #0
 8008206:	6053      	str	r3, [r2, #4]
 8008208:	e7de      	b.n	80081c8 <_malloc_r+0xa8>
 800820a:	230c      	movs	r3, #12
 800820c:	6033      	str	r3, [r6, #0]
 800820e:	4630      	mov	r0, r6
 8008210:	f000 f80c 	bl	800822c <__malloc_unlock>
 8008214:	e794      	b.n	8008140 <_malloc_r+0x20>
 8008216:	6005      	str	r5, [r0, #0]
 8008218:	e7d6      	b.n	80081c8 <_malloc_r+0xa8>
 800821a:	bf00      	nop
 800821c:	200004b8 	.word	0x200004b8

08008220 <__malloc_lock>:
 8008220:	4801      	ldr	r0, [pc, #4]	@ (8008228 <__malloc_lock+0x8>)
 8008222:	f7ff b8ac 	b.w	800737e <__retarget_lock_acquire_recursive>
 8008226:	bf00      	nop
 8008228:	200004b0 	.word	0x200004b0

0800822c <__malloc_unlock>:
 800822c:	4801      	ldr	r0, [pc, #4]	@ (8008234 <__malloc_unlock+0x8>)
 800822e:	f7ff b8a7 	b.w	8007380 <__retarget_lock_release_recursive>
 8008232:	bf00      	nop
 8008234:	200004b0 	.word	0x200004b0

08008238 <_Balloc>:
 8008238:	b570      	push	{r4, r5, r6, lr}
 800823a:	69c6      	ldr	r6, [r0, #28]
 800823c:	4604      	mov	r4, r0
 800823e:	460d      	mov	r5, r1
 8008240:	b976      	cbnz	r6, 8008260 <_Balloc+0x28>
 8008242:	2010      	movs	r0, #16
 8008244:	f7ff ff42 	bl	80080cc <malloc>
 8008248:	4602      	mov	r2, r0
 800824a:	61e0      	str	r0, [r4, #28]
 800824c:	b920      	cbnz	r0, 8008258 <_Balloc+0x20>
 800824e:	4b18      	ldr	r3, [pc, #96]	@ (80082b0 <_Balloc+0x78>)
 8008250:	4818      	ldr	r0, [pc, #96]	@ (80082b4 <_Balloc+0x7c>)
 8008252:	216b      	movs	r1, #107	@ 0x6b
 8008254:	f000 fda6 	bl	8008da4 <__assert_func>
 8008258:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800825c:	6006      	str	r6, [r0, #0]
 800825e:	60c6      	str	r6, [r0, #12]
 8008260:	69e6      	ldr	r6, [r4, #28]
 8008262:	68f3      	ldr	r3, [r6, #12]
 8008264:	b183      	cbz	r3, 8008288 <_Balloc+0x50>
 8008266:	69e3      	ldr	r3, [r4, #28]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800826e:	b9b8      	cbnz	r0, 80082a0 <_Balloc+0x68>
 8008270:	2101      	movs	r1, #1
 8008272:	fa01 f605 	lsl.w	r6, r1, r5
 8008276:	1d72      	adds	r2, r6, #5
 8008278:	0092      	lsls	r2, r2, #2
 800827a:	4620      	mov	r0, r4
 800827c:	f000 fdb0 	bl	8008de0 <_calloc_r>
 8008280:	b160      	cbz	r0, 800829c <_Balloc+0x64>
 8008282:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008286:	e00e      	b.n	80082a6 <_Balloc+0x6e>
 8008288:	2221      	movs	r2, #33	@ 0x21
 800828a:	2104      	movs	r1, #4
 800828c:	4620      	mov	r0, r4
 800828e:	f000 fda7 	bl	8008de0 <_calloc_r>
 8008292:	69e3      	ldr	r3, [r4, #28]
 8008294:	60f0      	str	r0, [r6, #12]
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1e4      	bne.n	8008266 <_Balloc+0x2e>
 800829c:	2000      	movs	r0, #0
 800829e:	bd70      	pop	{r4, r5, r6, pc}
 80082a0:	6802      	ldr	r2, [r0, #0]
 80082a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80082a6:	2300      	movs	r3, #0
 80082a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80082ac:	e7f7      	b.n	800829e <_Balloc+0x66>
 80082ae:	bf00      	nop
 80082b0:	08009d65 	.word	0x08009d65
 80082b4:	08009de5 	.word	0x08009de5

080082b8 <_Bfree>:
 80082b8:	b570      	push	{r4, r5, r6, lr}
 80082ba:	69c6      	ldr	r6, [r0, #28]
 80082bc:	4605      	mov	r5, r0
 80082be:	460c      	mov	r4, r1
 80082c0:	b976      	cbnz	r6, 80082e0 <_Bfree+0x28>
 80082c2:	2010      	movs	r0, #16
 80082c4:	f7ff ff02 	bl	80080cc <malloc>
 80082c8:	4602      	mov	r2, r0
 80082ca:	61e8      	str	r0, [r5, #28]
 80082cc:	b920      	cbnz	r0, 80082d8 <_Bfree+0x20>
 80082ce:	4b09      	ldr	r3, [pc, #36]	@ (80082f4 <_Bfree+0x3c>)
 80082d0:	4809      	ldr	r0, [pc, #36]	@ (80082f8 <_Bfree+0x40>)
 80082d2:	218f      	movs	r1, #143	@ 0x8f
 80082d4:	f000 fd66 	bl	8008da4 <__assert_func>
 80082d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082dc:	6006      	str	r6, [r0, #0]
 80082de:	60c6      	str	r6, [r0, #12]
 80082e0:	b13c      	cbz	r4, 80082f2 <_Bfree+0x3a>
 80082e2:	69eb      	ldr	r3, [r5, #28]
 80082e4:	6862      	ldr	r2, [r4, #4]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082ec:	6021      	str	r1, [r4, #0]
 80082ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80082f2:	bd70      	pop	{r4, r5, r6, pc}
 80082f4:	08009d65 	.word	0x08009d65
 80082f8:	08009de5 	.word	0x08009de5

080082fc <__multadd>:
 80082fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008300:	690d      	ldr	r5, [r1, #16]
 8008302:	4607      	mov	r7, r0
 8008304:	460c      	mov	r4, r1
 8008306:	461e      	mov	r6, r3
 8008308:	f101 0c14 	add.w	ip, r1, #20
 800830c:	2000      	movs	r0, #0
 800830e:	f8dc 3000 	ldr.w	r3, [ip]
 8008312:	b299      	uxth	r1, r3
 8008314:	fb02 6101 	mla	r1, r2, r1, r6
 8008318:	0c1e      	lsrs	r6, r3, #16
 800831a:	0c0b      	lsrs	r3, r1, #16
 800831c:	fb02 3306 	mla	r3, r2, r6, r3
 8008320:	b289      	uxth	r1, r1
 8008322:	3001      	adds	r0, #1
 8008324:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008328:	4285      	cmp	r5, r0
 800832a:	f84c 1b04 	str.w	r1, [ip], #4
 800832e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008332:	dcec      	bgt.n	800830e <__multadd+0x12>
 8008334:	b30e      	cbz	r6, 800837a <__multadd+0x7e>
 8008336:	68a3      	ldr	r3, [r4, #8]
 8008338:	42ab      	cmp	r3, r5
 800833a:	dc19      	bgt.n	8008370 <__multadd+0x74>
 800833c:	6861      	ldr	r1, [r4, #4]
 800833e:	4638      	mov	r0, r7
 8008340:	3101      	adds	r1, #1
 8008342:	f7ff ff79 	bl	8008238 <_Balloc>
 8008346:	4680      	mov	r8, r0
 8008348:	b928      	cbnz	r0, 8008356 <__multadd+0x5a>
 800834a:	4602      	mov	r2, r0
 800834c:	4b0c      	ldr	r3, [pc, #48]	@ (8008380 <__multadd+0x84>)
 800834e:	480d      	ldr	r0, [pc, #52]	@ (8008384 <__multadd+0x88>)
 8008350:	21ba      	movs	r1, #186	@ 0xba
 8008352:	f000 fd27 	bl	8008da4 <__assert_func>
 8008356:	6922      	ldr	r2, [r4, #16]
 8008358:	3202      	adds	r2, #2
 800835a:	f104 010c 	add.w	r1, r4, #12
 800835e:	0092      	lsls	r2, r2, #2
 8008360:	300c      	adds	r0, #12
 8008362:	f000 fd11 	bl	8008d88 <memcpy>
 8008366:	4621      	mov	r1, r4
 8008368:	4638      	mov	r0, r7
 800836a:	f7ff ffa5 	bl	80082b8 <_Bfree>
 800836e:	4644      	mov	r4, r8
 8008370:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008374:	3501      	adds	r5, #1
 8008376:	615e      	str	r6, [r3, #20]
 8008378:	6125      	str	r5, [r4, #16]
 800837a:	4620      	mov	r0, r4
 800837c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008380:	08009dd4 	.word	0x08009dd4
 8008384:	08009de5 	.word	0x08009de5

08008388 <__hi0bits>:
 8008388:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800838c:	4603      	mov	r3, r0
 800838e:	bf36      	itet	cc
 8008390:	0403      	lslcc	r3, r0, #16
 8008392:	2000      	movcs	r0, #0
 8008394:	2010      	movcc	r0, #16
 8008396:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800839a:	bf3c      	itt	cc
 800839c:	021b      	lslcc	r3, r3, #8
 800839e:	3008      	addcc	r0, #8
 80083a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083a4:	bf3c      	itt	cc
 80083a6:	011b      	lslcc	r3, r3, #4
 80083a8:	3004      	addcc	r0, #4
 80083aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083ae:	bf3c      	itt	cc
 80083b0:	009b      	lslcc	r3, r3, #2
 80083b2:	3002      	addcc	r0, #2
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	db05      	blt.n	80083c4 <__hi0bits+0x3c>
 80083b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80083bc:	f100 0001 	add.w	r0, r0, #1
 80083c0:	bf08      	it	eq
 80083c2:	2020      	moveq	r0, #32
 80083c4:	4770      	bx	lr

080083c6 <__lo0bits>:
 80083c6:	6803      	ldr	r3, [r0, #0]
 80083c8:	4602      	mov	r2, r0
 80083ca:	f013 0007 	ands.w	r0, r3, #7
 80083ce:	d00b      	beq.n	80083e8 <__lo0bits+0x22>
 80083d0:	07d9      	lsls	r1, r3, #31
 80083d2:	d421      	bmi.n	8008418 <__lo0bits+0x52>
 80083d4:	0798      	lsls	r0, r3, #30
 80083d6:	bf49      	itett	mi
 80083d8:	085b      	lsrmi	r3, r3, #1
 80083da:	089b      	lsrpl	r3, r3, #2
 80083dc:	2001      	movmi	r0, #1
 80083de:	6013      	strmi	r3, [r2, #0]
 80083e0:	bf5c      	itt	pl
 80083e2:	6013      	strpl	r3, [r2, #0]
 80083e4:	2002      	movpl	r0, #2
 80083e6:	4770      	bx	lr
 80083e8:	b299      	uxth	r1, r3
 80083ea:	b909      	cbnz	r1, 80083f0 <__lo0bits+0x2a>
 80083ec:	0c1b      	lsrs	r3, r3, #16
 80083ee:	2010      	movs	r0, #16
 80083f0:	b2d9      	uxtb	r1, r3
 80083f2:	b909      	cbnz	r1, 80083f8 <__lo0bits+0x32>
 80083f4:	3008      	adds	r0, #8
 80083f6:	0a1b      	lsrs	r3, r3, #8
 80083f8:	0719      	lsls	r1, r3, #28
 80083fa:	bf04      	itt	eq
 80083fc:	091b      	lsreq	r3, r3, #4
 80083fe:	3004      	addeq	r0, #4
 8008400:	0799      	lsls	r1, r3, #30
 8008402:	bf04      	itt	eq
 8008404:	089b      	lsreq	r3, r3, #2
 8008406:	3002      	addeq	r0, #2
 8008408:	07d9      	lsls	r1, r3, #31
 800840a:	d403      	bmi.n	8008414 <__lo0bits+0x4e>
 800840c:	085b      	lsrs	r3, r3, #1
 800840e:	f100 0001 	add.w	r0, r0, #1
 8008412:	d003      	beq.n	800841c <__lo0bits+0x56>
 8008414:	6013      	str	r3, [r2, #0]
 8008416:	4770      	bx	lr
 8008418:	2000      	movs	r0, #0
 800841a:	4770      	bx	lr
 800841c:	2020      	movs	r0, #32
 800841e:	4770      	bx	lr

08008420 <__i2b>:
 8008420:	b510      	push	{r4, lr}
 8008422:	460c      	mov	r4, r1
 8008424:	2101      	movs	r1, #1
 8008426:	f7ff ff07 	bl	8008238 <_Balloc>
 800842a:	4602      	mov	r2, r0
 800842c:	b928      	cbnz	r0, 800843a <__i2b+0x1a>
 800842e:	4b05      	ldr	r3, [pc, #20]	@ (8008444 <__i2b+0x24>)
 8008430:	4805      	ldr	r0, [pc, #20]	@ (8008448 <__i2b+0x28>)
 8008432:	f240 1145 	movw	r1, #325	@ 0x145
 8008436:	f000 fcb5 	bl	8008da4 <__assert_func>
 800843a:	2301      	movs	r3, #1
 800843c:	6144      	str	r4, [r0, #20]
 800843e:	6103      	str	r3, [r0, #16]
 8008440:	bd10      	pop	{r4, pc}
 8008442:	bf00      	nop
 8008444:	08009dd4 	.word	0x08009dd4
 8008448:	08009de5 	.word	0x08009de5

0800844c <__multiply>:
 800844c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008450:	4617      	mov	r7, r2
 8008452:	690a      	ldr	r2, [r1, #16]
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	429a      	cmp	r2, r3
 8008458:	bfa8      	it	ge
 800845a:	463b      	movge	r3, r7
 800845c:	4689      	mov	r9, r1
 800845e:	bfa4      	itt	ge
 8008460:	460f      	movge	r7, r1
 8008462:	4699      	movge	r9, r3
 8008464:	693d      	ldr	r5, [r7, #16]
 8008466:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	6879      	ldr	r1, [r7, #4]
 800846e:	eb05 060a 	add.w	r6, r5, sl
 8008472:	42b3      	cmp	r3, r6
 8008474:	b085      	sub	sp, #20
 8008476:	bfb8      	it	lt
 8008478:	3101      	addlt	r1, #1
 800847a:	f7ff fedd 	bl	8008238 <_Balloc>
 800847e:	b930      	cbnz	r0, 800848e <__multiply+0x42>
 8008480:	4602      	mov	r2, r0
 8008482:	4b41      	ldr	r3, [pc, #260]	@ (8008588 <__multiply+0x13c>)
 8008484:	4841      	ldr	r0, [pc, #260]	@ (800858c <__multiply+0x140>)
 8008486:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800848a:	f000 fc8b 	bl	8008da4 <__assert_func>
 800848e:	f100 0414 	add.w	r4, r0, #20
 8008492:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008496:	4623      	mov	r3, r4
 8008498:	2200      	movs	r2, #0
 800849a:	4573      	cmp	r3, lr
 800849c:	d320      	bcc.n	80084e0 <__multiply+0x94>
 800849e:	f107 0814 	add.w	r8, r7, #20
 80084a2:	f109 0114 	add.w	r1, r9, #20
 80084a6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80084aa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80084ae:	9302      	str	r3, [sp, #8]
 80084b0:	1beb      	subs	r3, r5, r7
 80084b2:	3b15      	subs	r3, #21
 80084b4:	f023 0303 	bic.w	r3, r3, #3
 80084b8:	3304      	adds	r3, #4
 80084ba:	3715      	adds	r7, #21
 80084bc:	42bd      	cmp	r5, r7
 80084be:	bf38      	it	cc
 80084c0:	2304      	movcc	r3, #4
 80084c2:	9301      	str	r3, [sp, #4]
 80084c4:	9b02      	ldr	r3, [sp, #8]
 80084c6:	9103      	str	r1, [sp, #12]
 80084c8:	428b      	cmp	r3, r1
 80084ca:	d80c      	bhi.n	80084e6 <__multiply+0x9a>
 80084cc:	2e00      	cmp	r6, #0
 80084ce:	dd03      	ble.n	80084d8 <__multiply+0x8c>
 80084d0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d055      	beq.n	8008584 <__multiply+0x138>
 80084d8:	6106      	str	r6, [r0, #16]
 80084da:	b005      	add	sp, #20
 80084dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084e0:	f843 2b04 	str.w	r2, [r3], #4
 80084e4:	e7d9      	b.n	800849a <__multiply+0x4e>
 80084e6:	f8b1 a000 	ldrh.w	sl, [r1]
 80084ea:	f1ba 0f00 	cmp.w	sl, #0
 80084ee:	d01f      	beq.n	8008530 <__multiply+0xe4>
 80084f0:	46c4      	mov	ip, r8
 80084f2:	46a1      	mov	r9, r4
 80084f4:	2700      	movs	r7, #0
 80084f6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80084fa:	f8d9 3000 	ldr.w	r3, [r9]
 80084fe:	fa1f fb82 	uxth.w	fp, r2
 8008502:	b29b      	uxth	r3, r3
 8008504:	fb0a 330b 	mla	r3, sl, fp, r3
 8008508:	443b      	add	r3, r7
 800850a:	f8d9 7000 	ldr.w	r7, [r9]
 800850e:	0c12      	lsrs	r2, r2, #16
 8008510:	0c3f      	lsrs	r7, r7, #16
 8008512:	fb0a 7202 	mla	r2, sl, r2, r7
 8008516:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800851a:	b29b      	uxth	r3, r3
 800851c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008520:	4565      	cmp	r5, ip
 8008522:	f849 3b04 	str.w	r3, [r9], #4
 8008526:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800852a:	d8e4      	bhi.n	80084f6 <__multiply+0xaa>
 800852c:	9b01      	ldr	r3, [sp, #4]
 800852e:	50e7      	str	r7, [r4, r3]
 8008530:	9b03      	ldr	r3, [sp, #12]
 8008532:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008536:	3104      	adds	r1, #4
 8008538:	f1b9 0f00 	cmp.w	r9, #0
 800853c:	d020      	beq.n	8008580 <__multiply+0x134>
 800853e:	6823      	ldr	r3, [r4, #0]
 8008540:	4647      	mov	r7, r8
 8008542:	46a4      	mov	ip, r4
 8008544:	f04f 0a00 	mov.w	sl, #0
 8008548:	f8b7 b000 	ldrh.w	fp, [r7]
 800854c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008550:	fb09 220b 	mla	r2, r9, fp, r2
 8008554:	4452      	add	r2, sl
 8008556:	b29b      	uxth	r3, r3
 8008558:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800855c:	f84c 3b04 	str.w	r3, [ip], #4
 8008560:	f857 3b04 	ldr.w	r3, [r7], #4
 8008564:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008568:	f8bc 3000 	ldrh.w	r3, [ip]
 800856c:	fb09 330a 	mla	r3, r9, sl, r3
 8008570:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008574:	42bd      	cmp	r5, r7
 8008576:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800857a:	d8e5      	bhi.n	8008548 <__multiply+0xfc>
 800857c:	9a01      	ldr	r2, [sp, #4]
 800857e:	50a3      	str	r3, [r4, r2]
 8008580:	3404      	adds	r4, #4
 8008582:	e79f      	b.n	80084c4 <__multiply+0x78>
 8008584:	3e01      	subs	r6, #1
 8008586:	e7a1      	b.n	80084cc <__multiply+0x80>
 8008588:	08009dd4 	.word	0x08009dd4
 800858c:	08009de5 	.word	0x08009de5

08008590 <__pow5mult>:
 8008590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008594:	4615      	mov	r5, r2
 8008596:	f012 0203 	ands.w	r2, r2, #3
 800859a:	4607      	mov	r7, r0
 800859c:	460e      	mov	r6, r1
 800859e:	d007      	beq.n	80085b0 <__pow5mult+0x20>
 80085a0:	4c25      	ldr	r4, [pc, #148]	@ (8008638 <__pow5mult+0xa8>)
 80085a2:	3a01      	subs	r2, #1
 80085a4:	2300      	movs	r3, #0
 80085a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80085aa:	f7ff fea7 	bl	80082fc <__multadd>
 80085ae:	4606      	mov	r6, r0
 80085b0:	10ad      	asrs	r5, r5, #2
 80085b2:	d03d      	beq.n	8008630 <__pow5mult+0xa0>
 80085b4:	69fc      	ldr	r4, [r7, #28]
 80085b6:	b97c      	cbnz	r4, 80085d8 <__pow5mult+0x48>
 80085b8:	2010      	movs	r0, #16
 80085ba:	f7ff fd87 	bl	80080cc <malloc>
 80085be:	4602      	mov	r2, r0
 80085c0:	61f8      	str	r0, [r7, #28]
 80085c2:	b928      	cbnz	r0, 80085d0 <__pow5mult+0x40>
 80085c4:	4b1d      	ldr	r3, [pc, #116]	@ (800863c <__pow5mult+0xac>)
 80085c6:	481e      	ldr	r0, [pc, #120]	@ (8008640 <__pow5mult+0xb0>)
 80085c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80085cc:	f000 fbea 	bl	8008da4 <__assert_func>
 80085d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80085d4:	6004      	str	r4, [r0, #0]
 80085d6:	60c4      	str	r4, [r0, #12]
 80085d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80085dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80085e0:	b94c      	cbnz	r4, 80085f6 <__pow5mult+0x66>
 80085e2:	f240 2171 	movw	r1, #625	@ 0x271
 80085e6:	4638      	mov	r0, r7
 80085e8:	f7ff ff1a 	bl	8008420 <__i2b>
 80085ec:	2300      	movs	r3, #0
 80085ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80085f2:	4604      	mov	r4, r0
 80085f4:	6003      	str	r3, [r0, #0]
 80085f6:	f04f 0900 	mov.w	r9, #0
 80085fa:	07eb      	lsls	r3, r5, #31
 80085fc:	d50a      	bpl.n	8008614 <__pow5mult+0x84>
 80085fe:	4631      	mov	r1, r6
 8008600:	4622      	mov	r2, r4
 8008602:	4638      	mov	r0, r7
 8008604:	f7ff ff22 	bl	800844c <__multiply>
 8008608:	4631      	mov	r1, r6
 800860a:	4680      	mov	r8, r0
 800860c:	4638      	mov	r0, r7
 800860e:	f7ff fe53 	bl	80082b8 <_Bfree>
 8008612:	4646      	mov	r6, r8
 8008614:	106d      	asrs	r5, r5, #1
 8008616:	d00b      	beq.n	8008630 <__pow5mult+0xa0>
 8008618:	6820      	ldr	r0, [r4, #0]
 800861a:	b938      	cbnz	r0, 800862c <__pow5mult+0x9c>
 800861c:	4622      	mov	r2, r4
 800861e:	4621      	mov	r1, r4
 8008620:	4638      	mov	r0, r7
 8008622:	f7ff ff13 	bl	800844c <__multiply>
 8008626:	6020      	str	r0, [r4, #0]
 8008628:	f8c0 9000 	str.w	r9, [r0]
 800862c:	4604      	mov	r4, r0
 800862e:	e7e4      	b.n	80085fa <__pow5mult+0x6a>
 8008630:	4630      	mov	r0, r6
 8008632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008636:	bf00      	nop
 8008638:	08009e98 	.word	0x08009e98
 800863c:	08009d65 	.word	0x08009d65
 8008640:	08009de5 	.word	0x08009de5

08008644 <__lshift>:
 8008644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008648:	460c      	mov	r4, r1
 800864a:	6849      	ldr	r1, [r1, #4]
 800864c:	6923      	ldr	r3, [r4, #16]
 800864e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008652:	68a3      	ldr	r3, [r4, #8]
 8008654:	4607      	mov	r7, r0
 8008656:	4691      	mov	r9, r2
 8008658:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800865c:	f108 0601 	add.w	r6, r8, #1
 8008660:	42b3      	cmp	r3, r6
 8008662:	db0b      	blt.n	800867c <__lshift+0x38>
 8008664:	4638      	mov	r0, r7
 8008666:	f7ff fde7 	bl	8008238 <_Balloc>
 800866a:	4605      	mov	r5, r0
 800866c:	b948      	cbnz	r0, 8008682 <__lshift+0x3e>
 800866e:	4602      	mov	r2, r0
 8008670:	4b28      	ldr	r3, [pc, #160]	@ (8008714 <__lshift+0xd0>)
 8008672:	4829      	ldr	r0, [pc, #164]	@ (8008718 <__lshift+0xd4>)
 8008674:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008678:	f000 fb94 	bl	8008da4 <__assert_func>
 800867c:	3101      	adds	r1, #1
 800867e:	005b      	lsls	r3, r3, #1
 8008680:	e7ee      	b.n	8008660 <__lshift+0x1c>
 8008682:	2300      	movs	r3, #0
 8008684:	f100 0114 	add.w	r1, r0, #20
 8008688:	f100 0210 	add.w	r2, r0, #16
 800868c:	4618      	mov	r0, r3
 800868e:	4553      	cmp	r3, sl
 8008690:	db33      	blt.n	80086fa <__lshift+0xb6>
 8008692:	6920      	ldr	r0, [r4, #16]
 8008694:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008698:	f104 0314 	add.w	r3, r4, #20
 800869c:	f019 091f 	ands.w	r9, r9, #31
 80086a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80086a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80086a8:	d02b      	beq.n	8008702 <__lshift+0xbe>
 80086aa:	f1c9 0e20 	rsb	lr, r9, #32
 80086ae:	468a      	mov	sl, r1
 80086b0:	2200      	movs	r2, #0
 80086b2:	6818      	ldr	r0, [r3, #0]
 80086b4:	fa00 f009 	lsl.w	r0, r0, r9
 80086b8:	4310      	orrs	r0, r2
 80086ba:	f84a 0b04 	str.w	r0, [sl], #4
 80086be:	f853 2b04 	ldr.w	r2, [r3], #4
 80086c2:	459c      	cmp	ip, r3
 80086c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80086c8:	d8f3      	bhi.n	80086b2 <__lshift+0x6e>
 80086ca:	ebac 0304 	sub.w	r3, ip, r4
 80086ce:	3b15      	subs	r3, #21
 80086d0:	f023 0303 	bic.w	r3, r3, #3
 80086d4:	3304      	adds	r3, #4
 80086d6:	f104 0015 	add.w	r0, r4, #21
 80086da:	4560      	cmp	r0, ip
 80086dc:	bf88      	it	hi
 80086de:	2304      	movhi	r3, #4
 80086e0:	50ca      	str	r2, [r1, r3]
 80086e2:	b10a      	cbz	r2, 80086e8 <__lshift+0xa4>
 80086e4:	f108 0602 	add.w	r6, r8, #2
 80086e8:	3e01      	subs	r6, #1
 80086ea:	4638      	mov	r0, r7
 80086ec:	612e      	str	r6, [r5, #16]
 80086ee:	4621      	mov	r1, r4
 80086f0:	f7ff fde2 	bl	80082b8 <_Bfree>
 80086f4:	4628      	mov	r0, r5
 80086f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80086fe:	3301      	adds	r3, #1
 8008700:	e7c5      	b.n	800868e <__lshift+0x4a>
 8008702:	3904      	subs	r1, #4
 8008704:	f853 2b04 	ldr.w	r2, [r3], #4
 8008708:	f841 2f04 	str.w	r2, [r1, #4]!
 800870c:	459c      	cmp	ip, r3
 800870e:	d8f9      	bhi.n	8008704 <__lshift+0xc0>
 8008710:	e7ea      	b.n	80086e8 <__lshift+0xa4>
 8008712:	bf00      	nop
 8008714:	08009dd4 	.word	0x08009dd4
 8008718:	08009de5 	.word	0x08009de5

0800871c <__mcmp>:
 800871c:	690a      	ldr	r2, [r1, #16]
 800871e:	4603      	mov	r3, r0
 8008720:	6900      	ldr	r0, [r0, #16]
 8008722:	1a80      	subs	r0, r0, r2
 8008724:	b530      	push	{r4, r5, lr}
 8008726:	d10e      	bne.n	8008746 <__mcmp+0x2a>
 8008728:	3314      	adds	r3, #20
 800872a:	3114      	adds	r1, #20
 800872c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008730:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008734:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008738:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800873c:	4295      	cmp	r5, r2
 800873e:	d003      	beq.n	8008748 <__mcmp+0x2c>
 8008740:	d205      	bcs.n	800874e <__mcmp+0x32>
 8008742:	f04f 30ff 	mov.w	r0, #4294967295
 8008746:	bd30      	pop	{r4, r5, pc}
 8008748:	42a3      	cmp	r3, r4
 800874a:	d3f3      	bcc.n	8008734 <__mcmp+0x18>
 800874c:	e7fb      	b.n	8008746 <__mcmp+0x2a>
 800874e:	2001      	movs	r0, #1
 8008750:	e7f9      	b.n	8008746 <__mcmp+0x2a>
	...

08008754 <__mdiff>:
 8008754:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008758:	4689      	mov	r9, r1
 800875a:	4606      	mov	r6, r0
 800875c:	4611      	mov	r1, r2
 800875e:	4648      	mov	r0, r9
 8008760:	4614      	mov	r4, r2
 8008762:	f7ff ffdb 	bl	800871c <__mcmp>
 8008766:	1e05      	subs	r5, r0, #0
 8008768:	d112      	bne.n	8008790 <__mdiff+0x3c>
 800876a:	4629      	mov	r1, r5
 800876c:	4630      	mov	r0, r6
 800876e:	f7ff fd63 	bl	8008238 <_Balloc>
 8008772:	4602      	mov	r2, r0
 8008774:	b928      	cbnz	r0, 8008782 <__mdiff+0x2e>
 8008776:	4b3f      	ldr	r3, [pc, #252]	@ (8008874 <__mdiff+0x120>)
 8008778:	f240 2137 	movw	r1, #567	@ 0x237
 800877c:	483e      	ldr	r0, [pc, #248]	@ (8008878 <__mdiff+0x124>)
 800877e:	f000 fb11 	bl	8008da4 <__assert_func>
 8008782:	2301      	movs	r3, #1
 8008784:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008788:	4610      	mov	r0, r2
 800878a:	b003      	add	sp, #12
 800878c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008790:	bfbc      	itt	lt
 8008792:	464b      	movlt	r3, r9
 8008794:	46a1      	movlt	r9, r4
 8008796:	4630      	mov	r0, r6
 8008798:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800879c:	bfba      	itte	lt
 800879e:	461c      	movlt	r4, r3
 80087a0:	2501      	movlt	r5, #1
 80087a2:	2500      	movge	r5, #0
 80087a4:	f7ff fd48 	bl	8008238 <_Balloc>
 80087a8:	4602      	mov	r2, r0
 80087aa:	b918      	cbnz	r0, 80087b4 <__mdiff+0x60>
 80087ac:	4b31      	ldr	r3, [pc, #196]	@ (8008874 <__mdiff+0x120>)
 80087ae:	f240 2145 	movw	r1, #581	@ 0x245
 80087b2:	e7e3      	b.n	800877c <__mdiff+0x28>
 80087b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80087b8:	6926      	ldr	r6, [r4, #16]
 80087ba:	60c5      	str	r5, [r0, #12]
 80087bc:	f109 0310 	add.w	r3, r9, #16
 80087c0:	f109 0514 	add.w	r5, r9, #20
 80087c4:	f104 0e14 	add.w	lr, r4, #20
 80087c8:	f100 0b14 	add.w	fp, r0, #20
 80087cc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80087d0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80087d4:	9301      	str	r3, [sp, #4]
 80087d6:	46d9      	mov	r9, fp
 80087d8:	f04f 0c00 	mov.w	ip, #0
 80087dc:	9b01      	ldr	r3, [sp, #4]
 80087de:	f85e 0b04 	ldr.w	r0, [lr], #4
 80087e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80087e6:	9301      	str	r3, [sp, #4]
 80087e8:	fa1f f38a 	uxth.w	r3, sl
 80087ec:	4619      	mov	r1, r3
 80087ee:	b283      	uxth	r3, r0
 80087f0:	1acb      	subs	r3, r1, r3
 80087f2:	0c00      	lsrs	r0, r0, #16
 80087f4:	4463      	add	r3, ip
 80087f6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80087fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80087fe:	b29b      	uxth	r3, r3
 8008800:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008804:	4576      	cmp	r6, lr
 8008806:	f849 3b04 	str.w	r3, [r9], #4
 800880a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800880e:	d8e5      	bhi.n	80087dc <__mdiff+0x88>
 8008810:	1b33      	subs	r3, r6, r4
 8008812:	3b15      	subs	r3, #21
 8008814:	f023 0303 	bic.w	r3, r3, #3
 8008818:	3415      	adds	r4, #21
 800881a:	3304      	adds	r3, #4
 800881c:	42a6      	cmp	r6, r4
 800881e:	bf38      	it	cc
 8008820:	2304      	movcc	r3, #4
 8008822:	441d      	add	r5, r3
 8008824:	445b      	add	r3, fp
 8008826:	461e      	mov	r6, r3
 8008828:	462c      	mov	r4, r5
 800882a:	4544      	cmp	r4, r8
 800882c:	d30e      	bcc.n	800884c <__mdiff+0xf8>
 800882e:	f108 0103 	add.w	r1, r8, #3
 8008832:	1b49      	subs	r1, r1, r5
 8008834:	f021 0103 	bic.w	r1, r1, #3
 8008838:	3d03      	subs	r5, #3
 800883a:	45a8      	cmp	r8, r5
 800883c:	bf38      	it	cc
 800883e:	2100      	movcc	r1, #0
 8008840:	440b      	add	r3, r1
 8008842:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008846:	b191      	cbz	r1, 800886e <__mdiff+0x11a>
 8008848:	6117      	str	r7, [r2, #16]
 800884a:	e79d      	b.n	8008788 <__mdiff+0x34>
 800884c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008850:	46e6      	mov	lr, ip
 8008852:	0c08      	lsrs	r0, r1, #16
 8008854:	fa1c fc81 	uxtah	ip, ip, r1
 8008858:	4471      	add	r1, lr
 800885a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800885e:	b289      	uxth	r1, r1
 8008860:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008864:	f846 1b04 	str.w	r1, [r6], #4
 8008868:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800886c:	e7dd      	b.n	800882a <__mdiff+0xd6>
 800886e:	3f01      	subs	r7, #1
 8008870:	e7e7      	b.n	8008842 <__mdiff+0xee>
 8008872:	bf00      	nop
 8008874:	08009dd4 	.word	0x08009dd4
 8008878:	08009de5 	.word	0x08009de5

0800887c <__d2b>:
 800887c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008880:	460f      	mov	r7, r1
 8008882:	2101      	movs	r1, #1
 8008884:	ec59 8b10 	vmov	r8, r9, d0
 8008888:	4616      	mov	r6, r2
 800888a:	f7ff fcd5 	bl	8008238 <_Balloc>
 800888e:	4604      	mov	r4, r0
 8008890:	b930      	cbnz	r0, 80088a0 <__d2b+0x24>
 8008892:	4602      	mov	r2, r0
 8008894:	4b23      	ldr	r3, [pc, #140]	@ (8008924 <__d2b+0xa8>)
 8008896:	4824      	ldr	r0, [pc, #144]	@ (8008928 <__d2b+0xac>)
 8008898:	f240 310f 	movw	r1, #783	@ 0x30f
 800889c:	f000 fa82 	bl	8008da4 <__assert_func>
 80088a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80088a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80088a8:	b10d      	cbz	r5, 80088ae <__d2b+0x32>
 80088aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80088ae:	9301      	str	r3, [sp, #4]
 80088b0:	f1b8 0300 	subs.w	r3, r8, #0
 80088b4:	d023      	beq.n	80088fe <__d2b+0x82>
 80088b6:	4668      	mov	r0, sp
 80088b8:	9300      	str	r3, [sp, #0]
 80088ba:	f7ff fd84 	bl	80083c6 <__lo0bits>
 80088be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80088c2:	b1d0      	cbz	r0, 80088fa <__d2b+0x7e>
 80088c4:	f1c0 0320 	rsb	r3, r0, #32
 80088c8:	fa02 f303 	lsl.w	r3, r2, r3
 80088cc:	430b      	orrs	r3, r1
 80088ce:	40c2      	lsrs	r2, r0
 80088d0:	6163      	str	r3, [r4, #20]
 80088d2:	9201      	str	r2, [sp, #4]
 80088d4:	9b01      	ldr	r3, [sp, #4]
 80088d6:	61a3      	str	r3, [r4, #24]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	bf0c      	ite	eq
 80088dc:	2201      	moveq	r2, #1
 80088de:	2202      	movne	r2, #2
 80088e0:	6122      	str	r2, [r4, #16]
 80088e2:	b1a5      	cbz	r5, 800890e <__d2b+0x92>
 80088e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80088e8:	4405      	add	r5, r0
 80088ea:	603d      	str	r5, [r7, #0]
 80088ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80088f0:	6030      	str	r0, [r6, #0]
 80088f2:	4620      	mov	r0, r4
 80088f4:	b003      	add	sp, #12
 80088f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088fa:	6161      	str	r1, [r4, #20]
 80088fc:	e7ea      	b.n	80088d4 <__d2b+0x58>
 80088fe:	a801      	add	r0, sp, #4
 8008900:	f7ff fd61 	bl	80083c6 <__lo0bits>
 8008904:	9b01      	ldr	r3, [sp, #4]
 8008906:	6163      	str	r3, [r4, #20]
 8008908:	3020      	adds	r0, #32
 800890a:	2201      	movs	r2, #1
 800890c:	e7e8      	b.n	80088e0 <__d2b+0x64>
 800890e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008912:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008916:	6038      	str	r0, [r7, #0]
 8008918:	6918      	ldr	r0, [r3, #16]
 800891a:	f7ff fd35 	bl	8008388 <__hi0bits>
 800891e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008922:	e7e5      	b.n	80088f0 <__d2b+0x74>
 8008924:	08009dd4 	.word	0x08009dd4
 8008928:	08009de5 	.word	0x08009de5

0800892c <__ssputs_r>:
 800892c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008930:	688e      	ldr	r6, [r1, #8]
 8008932:	461f      	mov	r7, r3
 8008934:	42be      	cmp	r6, r7
 8008936:	680b      	ldr	r3, [r1, #0]
 8008938:	4682      	mov	sl, r0
 800893a:	460c      	mov	r4, r1
 800893c:	4690      	mov	r8, r2
 800893e:	d82d      	bhi.n	800899c <__ssputs_r+0x70>
 8008940:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008944:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008948:	d026      	beq.n	8008998 <__ssputs_r+0x6c>
 800894a:	6965      	ldr	r5, [r4, #20]
 800894c:	6909      	ldr	r1, [r1, #16]
 800894e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008952:	eba3 0901 	sub.w	r9, r3, r1
 8008956:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800895a:	1c7b      	adds	r3, r7, #1
 800895c:	444b      	add	r3, r9
 800895e:	106d      	asrs	r5, r5, #1
 8008960:	429d      	cmp	r5, r3
 8008962:	bf38      	it	cc
 8008964:	461d      	movcc	r5, r3
 8008966:	0553      	lsls	r3, r2, #21
 8008968:	d527      	bpl.n	80089ba <__ssputs_r+0x8e>
 800896a:	4629      	mov	r1, r5
 800896c:	f7ff fbd8 	bl	8008120 <_malloc_r>
 8008970:	4606      	mov	r6, r0
 8008972:	b360      	cbz	r0, 80089ce <__ssputs_r+0xa2>
 8008974:	6921      	ldr	r1, [r4, #16]
 8008976:	464a      	mov	r2, r9
 8008978:	f000 fa06 	bl	8008d88 <memcpy>
 800897c:	89a3      	ldrh	r3, [r4, #12]
 800897e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008986:	81a3      	strh	r3, [r4, #12]
 8008988:	6126      	str	r6, [r4, #16]
 800898a:	6165      	str	r5, [r4, #20]
 800898c:	444e      	add	r6, r9
 800898e:	eba5 0509 	sub.w	r5, r5, r9
 8008992:	6026      	str	r6, [r4, #0]
 8008994:	60a5      	str	r5, [r4, #8]
 8008996:	463e      	mov	r6, r7
 8008998:	42be      	cmp	r6, r7
 800899a:	d900      	bls.n	800899e <__ssputs_r+0x72>
 800899c:	463e      	mov	r6, r7
 800899e:	6820      	ldr	r0, [r4, #0]
 80089a0:	4632      	mov	r2, r6
 80089a2:	4641      	mov	r1, r8
 80089a4:	f000 f9c6 	bl	8008d34 <memmove>
 80089a8:	68a3      	ldr	r3, [r4, #8]
 80089aa:	1b9b      	subs	r3, r3, r6
 80089ac:	60a3      	str	r3, [r4, #8]
 80089ae:	6823      	ldr	r3, [r4, #0]
 80089b0:	4433      	add	r3, r6
 80089b2:	6023      	str	r3, [r4, #0]
 80089b4:	2000      	movs	r0, #0
 80089b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ba:	462a      	mov	r2, r5
 80089bc:	f000 fa36 	bl	8008e2c <_realloc_r>
 80089c0:	4606      	mov	r6, r0
 80089c2:	2800      	cmp	r0, #0
 80089c4:	d1e0      	bne.n	8008988 <__ssputs_r+0x5c>
 80089c6:	6921      	ldr	r1, [r4, #16]
 80089c8:	4650      	mov	r0, sl
 80089ca:	f7ff fb35 	bl	8008038 <_free_r>
 80089ce:	230c      	movs	r3, #12
 80089d0:	f8ca 3000 	str.w	r3, [sl]
 80089d4:	89a3      	ldrh	r3, [r4, #12]
 80089d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089da:	81a3      	strh	r3, [r4, #12]
 80089dc:	f04f 30ff 	mov.w	r0, #4294967295
 80089e0:	e7e9      	b.n	80089b6 <__ssputs_r+0x8a>
	...

080089e4 <_svfiprintf_r>:
 80089e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e8:	4698      	mov	r8, r3
 80089ea:	898b      	ldrh	r3, [r1, #12]
 80089ec:	061b      	lsls	r3, r3, #24
 80089ee:	b09d      	sub	sp, #116	@ 0x74
 80089f0:	4607      	mov	r7, r0
 80089f2:	460d      	mov	r5, r1
 80089f4:	4614      	mov	r4, r2
 80089f6:	d510      	bpl.n	8008a1a <_svfiprintf_r+0x36>
 80089f8:	690b      	ldr	r3, [r1, #16]
 80089fa:	b973      	cbnz	r3, 8008a1a <_svfiprintf_r+0x36>
 80089fc:	2140      	movs	r1, #64	@ 0x40
 80089fe:	f7ff fb8f 	bl	8008120 <_malloc_r>
 8008a02:	6028      	str	r0, [r5, #0]
 8008a04:	6128      	str	r0, [r5, #16]
 8008a06:	b930      	cbnz	r0, 8008a16 <_svfiprintf_r+0x32>
 8008a08:	230c      	movs	r3, #12
 8008a0a:	603b      	str	r3, [r7, #0]
 8008a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a10:	b01d      	add	sp, #116	@ 0x74
 8008a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a16:	2340      	movs	r3, #64	@ 0x40
 8008a18:	616b      	str	r3, [r5, #20]
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a1e:	2320      	movs	r3, #32
 8008a20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a24:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a28:	2330      	movs	r3, #48	@ 0x30
 8008a2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008bc8 <_svfiprintf_r+0x1e4>
 8008a2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a32:	f04f 0901 	mov.w	r9, #1
 8008a36:	4623      	mov	r3, r4
 8008a38:	469a      	mov	sl, r3
 8008a3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a3e:	b10a      	cbz	r2, 8008a44 <_svfiprintf_r+0x60>
 8008a40:	2a25      	cmp	r2, #37	@ 0x25
 8008a42:	d1f9      	bne.n	8008a38 <_svfiprintf_r+0x54>
 8008a44:	ebba 0b04 	subs.w	fp, sl, r4
 8008a48:	d00b      	beq.n	8008a62 <_svfiprintf_r+0x7e>
 8008a4a:	465b      	mov	r3, fp
 8008a4c:	4622      	mov	r2, r4
 8008a4e:	4629      	mov	r1, r5
 8008a50:	4638      	mov	r0, r7
 8008a52:	f7ff ff6b 	bl	800892c <__ssputs_r>
 8008a56:	3001      	adds	r0, #1
 8008a58:	f000 80a7 	beq.w	8008baa <_svfiprintf_r+0x1c6>
 8008a5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a5e:	445a      	add	r2, fp
 8008a60:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a62:	f89a 3000 	ldrb.w	r3, [sl]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	f000 809f 	beq.w	8008baa <_svfiprintf_r+0x1c6>
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a76:	f10a 0a01 	add.w	sl, sl, #1
 8008a7a:	9304      	str	r3, [sp, #16]
 8008a7c:	9307      	str	r3, [sp, #28]
 8008a7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a82:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a84:	4654      	mov	r4, sl
 8008a86:	2205      	movs	r2, #5
 8008a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a8c:	484e      	ldr	r0, [pc, #312]	@ (8008bc8 <_svfiprintf_r+0x1e4>)
 8008a8e:	f7f7 fbbf 	bl	8000210 <memchr>
 8008a92:	9a04      	ldr	r2, [sp, #16]
 8008a94:	b9d8      	cbnz	r0, 8008ace <_svfiprintf_r+0xea>
 8008a96:	06d0      	lsls	r0, r2, #27
 8008a98:	bf44      	itt	mi
 8008a9a:	2320      	movmi	r3, #32
 8008a9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008aa0:	0711      	lsls	r1, r2, #28
 8008aa2:	bf44      	itt	mi
 8008aa4:	232b      	movmi	r3, #43	@ 0x2b
 8008aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8008aae:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ab0:	d015      	beq.n	8008ade <_svfiprintf_r+0xfa>
 8008ab2:	9a07      	ldr	r2, [sp, #28]
 8008ab4:	4654      	mov	r4, sl
 8008ab6:	2000      	movs	r0, #0
 8008ab8:	f04f 0c0a 	mov.w	ip, #10
 8008abc:	4621      	mov	r1, r4
 8008abe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ac2:	3b30      	subs	r3, #48	@ 0x30
 8008ac4:	2b09      	cmp	r3, #9
 8008ac6:	d94b      	bls.n	8008b60 <_svfiprintf_r+0x17c>
 8008ac8:	b1b0      	cbz	r0, 8008af8 <_svfiprintf_r+0x114>
 8008aca:	9207      	str	r2, [sp, #28]
 8008acc:	e014      	b.n	8008af8 <_svfiprintf_r+0x114>
 8008ace:	eba0 0308 	sub.w	r3, r0, r8
 8008ad2:	fa09 f303 	lsl.w	r3, r9, r3
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	9304      	str	r3, [sp, #16]
 8008ada:	46a2      	mov	sl, r4
 8008adc:	e7d2      	b.n	8008a84 <_svfiprintf_r+0xa0>
 8008ade:	9b03      	ldr	r3, [sp, #12]
 8008ae0:	1d19      	adds	r1, r3, #4
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	9103      	str	r1, [sp, #12]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	bfbb      	ittet	lt
 8008aea:	425b      	neglt	r3, r3
 8008aec:	f042 0202 	orrlt.w	r2, r2, #2
 8008af0:	9307      	strge	r3, [sp, #28]
 8008af2:	9307      	strlt	r3, [sp, #28]
 8008af4:	bfb8      	it	lt
 8008af6:	9204      	strlt	r2, [sp, #16]
 8008af8:	7823      	ldrb	r3, [r4, #0]
 8008afa:	2b2e      	cmp	r3, #46	@ 0x2e
 8008afc:	d10a      	bne.n	8008b14 <_svfiprintf_r+0x130>
 8008afe:	7863      	ldrb	r3, [r4, #1]
 8008b00:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b02:	d132      	bne.n	8008b6a <_svfiprintf_r+0x186>
 8008b04:	9b03      	ldr	r3, [sp, #12]
 8008b06:	1d1a      	adds	r2, r3, #4
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	9203      	str	r2, [sp, #12]
 8008b0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b10:	3402      	adds	r4, #2
 8008b12:	9305      	str	r3, [sp, #20]
 8008b14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008bd8 <_svfiprintf_r+0x1f4>
 8008b18:	7821      	ldrb	r1, [r4, #0]
 8008b1a:	2203      	movs	r2, #3
 8008b1c:	4650      	mov	r0, sl
 8008b1e:	f7f7 fb77 	bl	8000210 <memchr>
 8008b22:	b138      	cbz	r0, 8008b34 <_svfiprintf_r+0x150>
 8008b24:	9b04      	ldr	r3, [sp, #16]
 8008b26:	eba0 000a 	sub.w	r0, r0, sl
 8008b2a:	2240      	movs	r2, #64	@ 0x40
 8008b2c:	4082      	lsls	r2, r0
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	3401      	adds	r4, #1
 8008b32:	9304      	str	r3, [sp, #16]
 8008b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b38:	4824      	ldr	r0, [pc, #144]	@ (8008bcc <_svfiprintf_r+0x1e8>)
 8008b3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b3e:	2206      	movs	r2, #6
 8008b40:	f7f7 fb66 	bl	8000210 <memchr>
 8008b44:	2800      	cmp	r0, #0
 8008b46:	d036      	beq.n	8008bb6 <_svfiprintf_r+0x1d2>
 8008b48:	4b21      	ldr	r3, [pc, #132]	@ (8008bd0 <_svfiprintf_r+0x1ec>)
 8008b4a:	bb1b      	cbnz	r3, 8008b94 <_svfiprintf_r+0x1b0>
 8008b4c:	9b03      	ldr	r3, [sp, #12]
 8008b4e:	3307      	adds	r3, #7
 8008b50:	f023 0307 	bic.w	r3, r3, #7
 8008b54:	3308      	adds	r3, #8
 8008b56:	9303      	str	r3, [sp, #12]
 8008b58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b5a:	4433      	add	r3, r6
 8008b5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b5e:	e76a      	b.n	8008a36 <_svfiprintf_r+0x52>
 8008b60:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b64:	460c      	mov	r4, r1
 8008b66:	2001      	movs	r0, #1
 8008b68:	e7a8      	b.n	8008abc <_svfiprintf_r+0xd8>
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	3401      	adds	r4, #1
 8008b6e:	9305      	str	r3, [sp, #20]
 8008b70:	4619      	mov	r1, r3
 8008b72:	f04f 0c0a 	mov.w	ip, #10
 8008b76:	4620      	mov	r0, r4
 8008b78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b7c:	3a30      	subs	r2, #48	@ 0x30
 8008b7e:	2a09      	cmp	r2, #9
 8008b80:	d903      	bls.n	8008b8a <_svfiprintf_r+0x1a6>
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d0c6      	beq.n	8008b14 <_svfiprintf_r+0x130>
 8008b86:	9105      	str	r1, [sp, #20]
 8008b88:	e7c4      	b.n	8008b14 <_svfiprintf_r+0x130>
 8008b8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b8e:	4604      	mov	r4, r0
 8008b90:	2301      	movs	r3, #1
 8008b92:	e7f0      	b.n	8008b76 <_svfiprintf_r+0x192>
 8008b94:	ab03      	add	r3, sp, #12
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	462a      	mov	r2, r5
 8008b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8008bd4 <_svfiprintf_r+0x1f0>)
 8008b9c:	a904      	add	r1, sp, #16
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	f7fd fe4a 	bl	8006838 <_printf_float>
 8008ba4:	1c42      	adds	r2, r0, #1
 8008ba6:	4606      	mov	r6, r0
 8008ba8:	d1d6      	bne.n	8008b58 <_svfiprintf_r+0x174>
 8008baa:	89ab      	ldrh	r3, [r5, #12]
 8008bac:	065b      	lsls	r3, r3, #25
 8008bae:	f53f af2d 	bmi.w	8008a0c <_svfiprintf_r+0x28>
 8008bb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008bb4:	e72c      	b.n	8008a10 <_svfiprintf_r+0x2c>
 8008bb6:	ab03      	add	r3, sp, #12
 8008bb8:	9300      	str	r3, [sp, #0]
 8008bba:	462a      	mov	r2, r5
 8008bbc:	4b05      	ldr	r3, [pc, #20]	@ (8008bd4 <_svfiprintf_r+0x1f0>)
 8008bbe:	a904      	add	r1, sp, #16
 8008bc0:	4638      	mov	r0, r7
 8008bc2:	f7fe f8d1 	bl	8006d68 <_printf_i>
 8008bc6:	e7ed      	b.n	8008ba4 <_svfiprintf_r+0x1c0>
 8008bc8:	08009e3e 	.word	0x08009e3e
 8008bcc:	08009e48 	.word	0x08009e48
 8008bd0:	08006839 	.word	0x08006839
 8008bd4:	0800892d 	.word	0x0800892d
 8008bd8:	08009e44 	.word	0x08009e44

08008bdc <__sflush_r>:
 8008bdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008be4:	0716      	lsls	r6, r2, #28
 8008be6:	4605      	mov	r5, r0
 8008be8:	460c      	mov	r4, r1
 8008bea:	d454      	bmi.n	8008c96 <__sflush_r+0xba>
 8008bec:	684b      	ldr	r3, [r1, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	dc02      	bgt.n	8008bf8 <__sflush_r+0x1c>
 8008bf2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	dd48      	ble.n	8008c8a <__sflush_r+0xae>
 8008bf8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008bfa:	2e00      	cmp	r6, #0
 8008bfc:	d045      	beq.n	8008c8a <__sflush_r+0xae>
 8008bfe:	2300      	movs	r3, #0
 8008c00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008c04:	682f      	ldr	r7, [r5, #0]
 8008c06:	6a21      	ldr	r1, [r4, #32]
 8008c08:	602b      	str	r3, [r5, #0]
 8008c0a:	d030      	beq.n	8008c6e <__sflush_r+0x92>
 8008c0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c0e:	89a3      	ldrh	r3, [r4, #12]
 8008c10:	0759      	lsls	r1, r3, #29
 8008c12:	d505      	bpl.n	8008c20 <__sflush_r+0x44>
 8008c14:	6863      	ldr	r3, [r4, #4]
 8008c16:	1ad2      	subs	r2, r2, r3
 8008c18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c1a:	b10b      	cbz	r3, 8008c20 <__sflush_r+0x44>
 8008c1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c1e:	1ad2      	subs	r2, r2, r3
 8008c20:	2300      	movs	r3, #0
 8008c22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c24:	6a21      	ldr	r1, [r4, #32]
 8008c26:	4628      	mov	r0, r5
 8008c28:	47b0      	blx	r6
 8008c2a:	1c43      	adds	r3, r0, #1
 8008c2c:	89a3      	ldrh	r3, [r4, #12]
 8008c2e:	d106      	bne.n	8008c3e <__sflush_r+0x62>
 8008c30:	6829      	ldr	r1, [r5, #0]
 8008c32:	291d      	cmp	r1, #29
 8008c34:	d82b      	bhi.n	8008c8e <__sflush_r+0xb2>
 8008c36:	4a2a      	ldr	r2, [pc, #168]	@ (8008ce0 <__sflush_r+0x104>)
 8008c38:	40ca      	lsrs	r2, r1
 8008c3a:	07d6      	lsls	r6, r2, #31
 8008c3c:	d527      	bpl.n	8008c8e <__sflush_r+0xb2>
 8008c3e:	2200      	movs	r2, #0
 8008c40:	6062      	str	r2, [r4, #4]
 8008c42:	04d9      	lsls	r1, r3, #19
 8008c44:	6922      	ldr	r2, [r4, #16]
 8008c46:	6022      	str	r2, [r4, #0]
 8008c48:	d504      	bpl.n	8008c54 <__sflush_r+0x78>
 8008c4a:	1c42      	adds	r2, r0, #1
 8008c4c:	d101      	bne.n	8008c52 <__sflush_r+0x76>
 8008c4e:	682b      	ldr	r3, [r5, #0]
 8008c50:	b903      	cbnz	r3, 8008c54 <__sflush_r+0x78>
 8008c52:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c56:	602f      	str	r7, [r5, #0]
 8008c58:	b1b9      	cbz	r1, 8008c8a <__sflush_r+0xae>
 8008c5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c5e:	4299      	cmp	r1, r3
 8008c60:	d002      	beq.n	8008c68 <__sflush_r+0x8c>
 8008c62:	4628      	mov	r0, r5
 8008c64:	f7ff f9e8 	bl	8008038 <_free_r>
 8008c68:	2300      	movs	r3, #0
 8008c6a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c6c:	e00d      	b.n	8008c8a <__sflush_r+0xae>
 8008c6e:	2301      	movs	r3, #1
 8008c70:	4628      	mov	r0, r5
 8008c72:	47b0      	blx	r6
 8008c74:	4602      	mov	r2, r0
 8008c76:	1c50      	adds	r0, r2, #1
 8008c78:	d1c9      	bne.n	8008c0e <__sflush_r+0x32>
 8008c7a:	682b      	ldr	r3, [r5, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d0c6      	beq.n	8008c0e <__sflush_r+0x32>
 8008c80:	2b1d      	cmp	r3, #29
 8008c82:	d001      	beq.n	8008c88 <__sflush_r+0xac>
 8008c84:	2b16      	cmp	r3, #22
 8008c86:	d11e      	bne.n	8008cc6 <__sflush_r+0xea>
 8008c88:	602f      	str	r7, [r5, #0]
 8008c8a:	2000      	movs	r0, #0
 8008c8c:	e022      	b.n	8008cd4 <__sflush_r+0xf8>
 8008c8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c92:	b21b      	sxth	r3, r3
 8008c94:	e01b      	b.n	8008cce <__sflush_r+0xf2>
 8008c96:	690f      	ldr	r7, [r1, #16]
 8008c98:	2f00      	cmp	r7, #0
 8008c9a:	d0f6      	beq.n	8008c8a <__sflush_r+0xae>
 8008c9c:	0793      	lsls	r3, r2, #30
 8008c9e:	680e      	ldr	r6, [r1, #0]
 8008ca0:	bf08      	it	eq
 8008ca2:	694b      	ldreq	r3, [r1, #20]
 8008ca4:	600f      	str	r7, [r1, #0]
 8008ca6:	bf18      	it	ne
 8008ca8:	2300      	movne	r3, #0
 8008caa:	eba6 0807 	sub.w	r8, r6, r7
 8008cae:	608b      	str	r3, [r1, #8]
 8008cb0:	f1b8 0f00 	cmp.w	r8, #0
 8008cb4:	dde9      	ble.n	8008c8a <__sflush_r+0xae>
 8008cb6:	6a21      	ldr	r1, [r4, #32]
 8008cb8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008cba:	4643      	mov	r3, r8
 8008cbc:	463a      	mov	r2, r7
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	47b0      	blx	r6
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	dc08      	bgt.n	8008cd8 <__sflush_r+0xfc>
 8008cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cce:	81a3      	strh	r3, [r4, #12]
 8008cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cd8:	4407      	add	r7, r0
 8008cda:	eba8 0800 	sub.w	r8, r8, r0
 8008cde:	e7e7      	b.n	8008cb0 <__sflush_r+0xd4>
 8008ce0:	20400001 	.word	0x20400001

08008ce4 <_fflush_r>:
 8008ce4:	b538      	push	{r3, r4, r5, lr}
 8008ce6:	690b      	ldr	r3, [r1, #16]
 8008ce8:	4605      	mov	r5, r0
 8008cea:	460c      	mov	r4, r1
 8008cec:	b913      	cbnz	r3, 8008cf4 <_fflush_r+0x10>
 8008cee:	2500      	movs	r5, #0
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	bd38      	pop	{r3, r4, r5, pc}
 8008cf4:	b118      	cbz	r0, 8008cfe <_fflush_r+0x1a>
 8008cf6:	6a03      	ldr	r3, [r0, #32]
 8008cf8:	b90b      	cbnz	r3, 8008cfe <_fflush_r+0x1a>
 8008cfa:	f7fe f9df 	bl	80070bc <__sinit>
 8008cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d0f3      	beq.n	8008cee <_fflush_r+0xa>
 8008d06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d08:	07d0      	lsls	r0, r2, #31
 8008d0a:	d404      	bmi.n	8008d16 <_fflush_r+0x32>
 8008d0c:	0599      	lsls	r1, r3, #22
 8008d0e:	d402      	bmi.n	8008d16 <_fflush_r+0x32>
 8008d10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d12:	f7fe fb34 	bl	800737e <__retarget_lock_acquire_recursive>
 8008d16:	4628      	mov	r0, r5
 8008d18:	4621      	mov	r1, r4
 8008d1a:	f7ff ff5f 	bl	8008bdc <__sflush_r>
 8008d1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d20:	07da      	lsls	r2, r3, #31
 8008d22:	4605      	mov	r5, r0
 8008d24:	d4e4      	bmi.n	8008cf0 <_fflush_r+0xc>
 8008d26:	89a3      	ldrh	r3, [r4, #12]
 8008d28:	059b      	lsls	r3, r3, #22
 8008d2a:	d4e1      	bmi.n	8008cf0 <_fflush_r+0xc>
 8008d2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d2e:	f7fe fb27 	bl	8007380 <__retarget_lock_release_recursive>
 8008d32:	e7dd      	b.n	8008cf0 <_fflush_r+0xc>

08008d34 <memmove>:
 8008d34:	4288      	cmp	r0, r1
 8008d36:	b510      	push	{r4, lr}
 8008d38:	eb01 0402 	add.w	r4, r1, r2
 8008d3c:	d902      	bls.n	8008d44 <memmove+0x10>
 8008d3e:	4284      	cmp	r4, r0
 8008d40:	4623      	mov	r3, r4
 8008d42:	d807      	bhi.n	8008d54 <memmove+0x20>
 8008d44:	1e43      	subs	r3, r0, #1
 8008d46:	42a1      	cmp	r1, r4
 8008d48:	d008      	beq.n	8008d5c <memmove+0x28>
 8008d4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d52:	e7f8      	b.n	8008d46 <memmove+0x12>
 8008d54:	4402      	add	r2, r0
 8008d56:	4601      	mov	r1, r0
 8008d58:	428a      	cmp	r2, r1
 8008d5a:	d100      	bne.n	8008d5e <memmove+0x2a>
 8008d5c:	bd10      	pop	{r4, pc}
 8008d5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d66:	e7f7      	b.n	8008d58 <memmove+0x24>

08008d68 <_sbrk_r>:
 8008d68:	b538      	push	{r3, r4, r5, lr}
 8008d6a:	4d06      	ldr	r5, [pc, #24]	@ (8008d84 <_sbrk_r+0x1c>)
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	4604      	mov	r4, r0
 8008d70:	4608      	mov	r0, r1
 8008d72:	602b      	str	r3, [r5, #0]
 8008d74:	f7f8 fdd2 	bl	800191c <_sbrk>
 8008d78:	1c43      	adds	r3, r0, #1
 8008d7a:	d102      	bne.n	8008d82 <_sbrk_r+0x1a>
 8008d7c:	682b      	ldr	r3, [r5, #0]
 8008d7e:	b103      	cbz	r3, 8008d82 <_sbrk_r+0x1a>
 8008d80:	6023      	str	r3, [r4, #0]
 8008d82:	bd38      	pop	{r3, r4, r5, pc}
 8008d84:	200004ac 	.word	0x200004ac

08008d88 <memcpy>:
 8008d88:	440a      	add	r2, r1
 8008d8a:	4291      	cmp	r1, r2
 8008d8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d90:	d100      	bne.n	8008d94 <memcpy+0xc>
 8008d92:	4770      	bx	lr
 8008d94:	b510      	push	{r4, lr}
 8008d96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d9e:	4291      	cmp	r1, r2
 8008da0:	d1f9      	bne.n	8008d96 <memcpy+0xe>
 8008da2:	bd10      	pop	{r4, pc}

08008da4 <__assert_func>:
 8008da4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008da6:	4614      	mov	r4, r2
 8008da8:	461a      	mov	r2, r3
 8008daa:	4b09      	ldr	r3, [pc, #36]	@ (8008dd0 <__assert_func+0x2c>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4605      	mov	r5, r0
 8008db0:	68d8      	ldr	r0, [r3, #12]
 8008db2:	b14c      	cbz	r4, 8008dc8 <__assert_func+0x24>
 8008db4:	4b07      	ldr	r3, [pc, #28]	@ (8008dd4 <__assert_func+0x30>)
 8008db6:	9100      	str	r1, [sp, #0]
 8008db8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008dbc:	4906      	ldr	r1, [pc, #24]	@ (8008dd8 <__assert_func+0x34>)
 8008dbe:	462b      	mov	r3, r5
 8008dc0:	f000 f870 	bl	8008ea4 <fiprintf>
 8008dc4:	f000 f880 	bl	8008ec8 <abort>
 8008dc8:	4b04      	ldr	r3, [pc, #16]	@ (8008ddc <__assert_func+0x38>)
 8008dca:	461c      	mov	r4, r3
 8008dcc:	e7f3      	b.n	8008db6 <__assert_func+0x12>
 8008dce:	bf00      	nop
 8008dd0:	20000018 	.word	0x20000018
 8008dd4:	08009e59 	.word	0x08009e59
 8008dd8:	08009e66 	.word	0x08009e66
 8008ddc:	08009e94 	.word	0x08009e94

08008de0 <_calloc_r>:
 8008de0:	b570      	push	{r4, r5, r6, lr}
 8008de2:	fba1 5402 	umull	r5, r4, r1, r2
 8008de6:	b934      	cbnz	r4, 8008df6 <_calloc_r+0x16>
 8008de8:	4629      	mov	r1, r5
 8008dea:	f7ff f999 	bl	8008120 <_malloc_r>
 8008dee:	4606      	mov	r6, r0
 8008df0:	b928      	cbnz	r0, 8008dfe <_calloc_r+0x1e>
 8008df2:	4630      	mov	r0, r6
 8008df4:	bd70      	pop	{r4, r5, r6, pc}
 8008df6:	220c      	movs	r2, #12
 8008df8:	6002      	str	r2, [r0, #0]
 8008dfa:	2600      	movs	r6, #0
 8008dfc:	e7f9      	b.n	8008df2 <_calloc_r+0x12>
 8008dfe:	462a      	mov	r2, r5
 8008e00:	4621      	mov	r1, r4
 8008e02:	f7fe fa2c 	bl	800725e <memset>
 8008e06:	e7f4      	b.n	8008df2 <_calloc_r+0x12>

08008e08 <__ascii_mbtowc>:
 8008e08:	b082      	sub	sp, #8
 8008e0a:	b901      	cbnz	r1, 8008e0e <__ascii_mbtowc+0x6>
 8008e0c:	a901      	add	r1, sp, #4
 8008e0e:	b142      	cbz	r2, 8008e22 <__ascii_mbtowc+0x1a>
 8008e10:	b14b      	cbz	r3, 8008e26 <__ascii_mbtowc+0x1e>
 8008e12:	7813      	ldrb	r3, [r2, #0]
 8008e14:	600b      	str	r3, [r1, #0]
 8008e16:	7812      	ldrb	r2, [r2, #0]
 8008e18:	1e10      	subs	r0, r2, #0
 8008e1a:	bf18      	it	ne
 8008e1c:	2001      	movne	r0, #1
 8008e1e:	b002      	add	sp, #8
 8008e20:	4770      	bx	lr
 8008e22:	4610      	mov	r0, r2
 8008e24:	e7fb      	b.n	8008e1e <__ascii_mbtowc+0x16>
 8008e26:	f06f 0001 	mvn.w	r0, #1
 8008e2a:	e7f8      	b.n	8008e1e <__ascii_mbtowc+0x16>

08008e2c <_realloc_r>:
 8008e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e30:	4607      	mov	r7, r0
 8008e32:	4614      	mov	r4, r2
 8008e34:	460d      	mov	r5, r1
 8008e36:	b921      	cbnz	r1, 8008e42 <_realloc_r+0x16>
 8008e38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e3c:	4611      	mov	r1, r2
 8008e3e:	f7ff b96f 	b.w	8008120 <_malloc_r>
 8008e42:	b92a      	cbnz	r2, 8008e50 <_realloc_r+0x24>
 8008e44:	f7ff f8f8 	bl	8008038 <_free_r>
 8008e48:	4625      	mov	r5, r4
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e50:	f000 f841 	bl	8008ed6 <_malloc_usable_size_r>
 8008e54:	4284      	cmp	r4, r0
 8008e56:	4606      	mov	r6, r0
 8008e58:	d802      	bhi.n	8008e60 <_realloc_r+0x34>
 8008e5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e5e:	d8f4      	bhi.n	8008e4a <_realloc_r+0x1e>
 8008e60:	4621      	mov	r1, r4
 8008e62:	4638      	mov	r0, r7
 8008e64:	f7ff f95c 	bl	8008120 <_malloc_r>
 8008e68:	4680      	mov	r8, r0
 8008e6a:	b908      	cbnz	r0, 8008e70 <_realloc_r+0x44>
 8008e6c:	4645      	mov	r5, r8
 8008e6e:	e7ec      	b.n	8008e4a <_realloc_r+0x1e>
 8008e70:	42b4      	cmp	r4, r6
 8008e72:	4622      	mov	r2, r4
 8008e74:	4629      	mov	r1, r5
 8008e76:	bf28      	it	cs
 8008e78:	4632      	movcs	r2, r6
 8008e7a:	f7ff ff85 	bl	8008d88 <memcpy>
 8008e7e:	4629      	mov	r1, r5
 8008e80:	4638      	mov	r0, r7
 8008e82:	f7ff f8d9 	bl	8008038 <_free_r>
 8008e86:	e7f1      	b.n	8008e6c <_realloc_r+0x40>

08008e88 <__ascii_wctomb>:
 8008e88:	4603      	mov	r3, r0
 8008e8a:	4608      	mov	r0, r1
 8008e8c:	b141      	cbz	r1, 8008ea0 <__ascii_wctomb+0x18>
 8008e8e:	2aff      	cmp	r2, #255	@ 0xff
 8008e90:	d904      	bls.n	8008e9c <__ascii_wctomb+0x14>
 8008e92:	228a      	movs	r2, #138	@ 0x8a
 8008e94:	601a      	str	r2, [r3, #0]
 8008e96:	f04f 30ff 	mov.w	r0, #4294967295
 8008e9a:	4770      	bx	lr
 8008e9c:	700a      	strb	r2, [r1, #0]
 8008e9e:	2001      	movs	r0, #1
 8008ea0:	4770      	bx	lr
	...

08008ea4 <fiprintf>:
 8008ea4:	b40e      	push	{r1, r2, r3}
 8008ea6:	b503      	push	{r0, r1, lr}
 8008ea8:	4601      	mov	r1, r0
 8008eaa:	ab03      	add	r3, sp, #12
 8008eac:	4805      	ldr	r0, [pc, #20]	@ (8008ec4 <fiprintf+0x20>)
 8008eae:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eb2:	6800      	ldr	r0, [r0, #0]
 8008eb4:	9301      	str	r3, [sp, #4]
 8008eb6:	f000 f83f 	bl	8008f38 <_vfiprintf_r>
 8008eba:	b002      	add	sp, #8
 8008ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ec0:	b003      	add	sp, #12
 8008ec2:	4770      	bx	lr
 8008ec4:	20000018 	.word	0x20000018

08008ec8 <abort>:
 8008ec8:	b508      	push	{r3, lr}
 8008eca:	2006      	movs	r0, #6
 8008ecc:	f000 fa08 	bl	80092e0 <raise>
 8008ed0:	2001      	movs	r0, #1
 8008ed2:	f7f8 fcaa 	bl	800182a <_exit>

08008ed6 <_malloc_usable_size_r>:
 8008ed6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008eda:	1f18      	subs	r0, r3, #4
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	bfbc      	itt	lt
 8008ee0:	580b      	ldrlt	r3, [r1, r0]
 8008ee2:	18c0      	addlt	r0, r0, r3
 8008ee4:	4770      	bx	lr

08008ee6 <__sfputc_r>:
 8008ee6:	6893      	ldr	r3, [r2, #8]
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	b410      	push	{r4}
 8008eee:	6093      	str	r3, [r2, #8]
 8008ef0:	da08      	bge.n	8008f04 <__sfputc_r+0x1e>
 8008ef2:	6994      	ldr	r4, [r2, #24]
 8008ef4:	42a3      	cmp	r3, r4
 8008ef6:	db01      	blt.n	8008efc <__sfputc_r+0x16>
 8008ef8:	290a      	cmp	r1, #10
 8008efa:	d103      	bne.n	8008f04 <__sfputc_r+0x1e>
 8008efc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f00:	f000 b932 	b.w	8009168 <__swbuf_r>
 8008f04:	6813      	ldr	r3, [r2, #0]
 8008f06:	1c58      	adds	r0, r3, #1
 8008f08:	6010      	str	r0, [r2, #0]
 8008f0a:	7019      	strb	r1, [r3, #0]
 8008f0c:	4608      	mov	r0, r1
 8008f0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <__sfputs_r>:
 8008f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f16:	4606      	mov	r6, r0
 8008f18:	460f      	mov	r7, r1
 8008f1a:	4614      	mov	r4, r2
 8008f1c:	18d5      	adds	r5, r2, r3
 8008f1e:	42ac      	cmp	r4, r5
 8008f20:	d101      	bne.n	8008f26 <__sfputs_r+0x12>
 8008f22:	2000      	movs	r0, #0
 8008f24:	e007      	b.n	8008f36 <__sfputs_r+0x22>
 8008f26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f2a:	463a      	mov	r2, r7
 8008f2c:	4630      	mov	r0, r6
 8008f2e:	f7ff ffda 	bl	8008ee6 <__sfputc_r>
 8008f32:	1c43      	adds	r3, r0, #1
 8008f34:	d1f3      	bne.n	8008f1e <__sfputs_r+0xa>
 8008f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008f38 <_vfiprintf_r>:
 8008f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f3c:	460d      	mov	r5, r1
 8008f3e:	b09d      	sub	sp, #116	@ 0x74
 8008f40:	4614      	mov	r4, r2
 8008f42:	4698      	mov	r8, r3
 8008f44:	4606      	mov	r6, r0
 8008f46:	b118      	cbz	r0, 8008f50 <_vfiprintf_r+0x18>
 8008f48:	6a03      	ldr	r3, [r0, #32]
 8008f4a:	b90b      	cbnz	r3, 8008f50 <_vfiprintf_r+0x18>
 8008f4c:	f7fe f8b6 	bl	80070bc <__sinit>
 8008f50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f52:	07d9      	lsls	r1, r3, #31
 8008f54:	d405      	bmi.n	8008f62 <_vfiprintf_r+0x2a>
 8008f56:	89ab      	ldrh	r3, [r5, #12]
 8008f58:	059a      	lsls	r2, r3, #22
 8008f5a:	d402      	bmi.n	8008f62 <_vfiprintf_r+0x2a>
 8008f5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f5e:	f7fe fa0e 	bl	800737e <__retarget_lock_acquire_recursive>
 8008f62:	89ab      	ldrh	r3, [r5, #12]
 8008f64:	071b      	lsls	r3, r3, #28
 8008f66:	d501      	bpl.n	8008f6c <_vfiprintf_r+0x34>
 8008f68:	692b      	ldr	r3, [r5, #16]
 8008f6a:	b99b      	cbnz	r3, 8008f94 <_vfiprintf_r+0x5c>
 8008f6c:	4629      	mov	r1, r5
 8008f6e:	4630      	mov	r0, r6
 8008f70:	f000 f938 	bl	80091e4 <__swsetup_r>
 8008f74:	b170      	cbz	r0, 8008f94 <_vfiprintf_r+0x5c>
 8008f76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f78:	07dc      	lsls	r4, r3, #31
 8008f7a:	d504      	bpl.n	8008f86 <_vfiprintf_r+0x4e>
 8008f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f80:	b01d      	add	sp, #116	@ 0x74
 8008f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f86:	89ab      	ldrh	r3, [r5, #12]
 8008f88:	0598      	lsls	r0, r3, #22
 8008f8a:	d4f7      	bmi.n	8008f7c <_vfiprintf_r+0x44>
 8008f8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f8e:	f7fe f9f7 	bl	8007380 <__retarget_lock_release_recursive>
 8008f92:	e7f3      	b.n	8008f7c <_vfiprintf_r+0x44>
 8008f94:	2300      	movs	r3, #0
 8008f96:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f98:	2320      	movs	r3, #32
 8008f9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fa2:	2330      	movs	r3, #48	@ 0x30
 8008fa4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009154 <_vfiprintf_r+0x21c>
 8008fa8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008fac:	f04f 0901 	mov.w	r9, #1
 8008fb0:	4623      	mov	r3, r4
 8008fb2:	469a      	mov	sl, r3
 8008fb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fb8:	b10a      	cbz	r2, 8008fbe <_vfiprintf_r+0x86>
 8008fba:	2a25      	cmp	r2, #37	@ 0x25
 8008fbc:	d1f9      	bne.n	8008fb2 <_vfiprintf_r+0x7a>
 8008fbe:	ebba 0b04 	subs.w	fp, sl, r4
 8008fc2:	d00b      	beq.n	8008fdc <_vfiprintf_r+0xa4>
 8008fc4:	465b      	mov	r3, fp
 8008fc6:	4622      	mov	r2, r4
 8008fc8:	4629      	mov	r1, r5
 8008fca:	4630      	mov	r0, r6
 8008fcc:	f7ff ffa2 	bl	8008f14 <__sfputs_r>
 8008fd0:	3001      	adds	r0, #1
 8008fd2:	f000 80a7 	beq.w	8009124 <_vfiprintf_r+0x1ec>
 8008fd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fd8:	445a      	add	r2, fp
 8008fda:	9209      	str	r2, [sp, #36]	@ 0x24
 8008fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f000 809f 	beq.w	8009124 <_vfiprintf_r+0x1ec>
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8008fec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ff0:	f10a 0a01 	add.w	sl, sl, #1
 8008ff4:	9304      	str	r3, [sp, #16]
 8008ff6:	9307      	str	r3, [sp, #28]
 8008ff8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ffc:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ffe:	4654      	mov	r4, sl
 8009000:	2205      	movs	r2, #5
 8009002:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009006:	4853      	ldr	r0, [pc, #332]	@ (8009154 <_vfiprintf_r+0x21c>)
 8009008:	f7f7 f902 	bl	8000210 <memchr>
 800900c:	9a04      	ldr	r2, [sp, #16]
 800900e:	b9d8      	cbnz	r0, 8009048 <_vfiprintf_r+0x110>
 8009010:	06d1      	lsls	r1, r2, #27
 8009012:	bf44      	itt	mi
 8009014:	2320      	movmi	r3, #32
 8009016:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800901a:	0713      	lsls	r3, r2, #28
 800901c:	bf44      	itt	mi
 800901e:	232b      	movmi	r3, #43	@ 0x2b
 8009020:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009024:	f89a 3000 	ldrb.w	r3, [sl]
 8009028:	2b2a      	cmp	r3, #42	@ 0x2a
 800902a:	d015      	beq.n	8009058 <_vfiprintf_r+0x120>
 800902c:	9a07      	ldr	r2, [sp, #28]
 800902e:	4654      	mov	r4, sl
 8009030:	2000      	movs	r0, #0
 8009032:	f04f 0c0a 	mov.w	ip, #10
 8009036:	4621      	mov	r1, r4
 8009038:	f811 3b01 	ldrb.w	r3, [r1], #1
 800903c:	3b30      	subs	r3, #48	@ 0x30
 800903e:	2b09      	cmp	r3, #9
 8009040:	d94b      	bls.n	80090da <_vfiprintf_r+0x1a2>
 8009042:	b1b0      	cbz	r0, 8009072 <_vfiprintf_r+0x13a>
 8009044:	9207      	str	r2, [sp, #28]
 8009046:	e014      	b.n	8009072 <_vfiprintf_r+0x13a>
 8009048:	eba0 0308 	sub.w	r3, r0, r8
 800904c:	fa09 f303 	lsl.w	r3, r9, r3
 8009050:	4313      	orrs	r3, r2
 8009052:	9304      	str	r3, [sp, #16]
 8009054:	46a2      	mov	sl, r4
 8009056:	e7d2      	b.n	8008ffe <_vfiprintf_r+0xc6>
 8009058:	9b03      	ldr	r3, [sp, #12]
 800905a:	1d19      	adds	r1, r3, #4
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	9103      	str	r1, [sp, #12]
 8009060:	2b00      	cmp	r3, #0
 8009062:	bfbb      	ittet	lt
 8009064:	425b      	neglt	r3, r3
 8009066:	f042 0202 	orrlt.w	r2, r2, #2
 800906a:	9307      	strge	r3, [sp, #28]
 800906c:	9307      	strlt	r3, [sp, #28]
 800906e:	bfb8      	it	lt
 8009070:	9204      	strlt	r2, [sp, #16]
 8009072:	7823      	ldrb	r3, [r4, #0]
 8009074:	2b2e      	cmp	r3, #46	@ 0x2e
 8009076:	d10a      	bne.n	800908e <_vfiprintf_r+0x156>
 8009078:	7863      	ldrb	r3, [r4, #1]
 800907a:	2b2a      	cmp	r3, #42	@ 0x2a
 800907c:	d132      	bne.n	80090e4 <_vfiprintf_r+0x1ac>
 800907e:	9b03      	ldr	r3, [sp, #12]
 8009080:	1d1a      	adds	r2, r3, #4
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	9203      	str	r2, [sp, #12]
 8009086:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800908a:	3402      	adds	r4, #2
 800908c:	9305      	str	r3, [sp, #20]
 800908e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009164 <_vfiprintf_r+0x22c>
 8009092:	7821      	ldrb	r1, [r4, #0]
 8009094:	2203      	movs	r2, #3
 8009096:	4650      	mov	r0, sl
 8009098:	f7f7 f8ba 	bl	8000210 <memchr>
 800909c:	b138      	cbz	r0, 80090ae <_vfiprintf_r+0x176>
 800909e:	9b04      	ldr	r3, [sp, #16]
 80090a0:	eba0 000a 	sub.w	r0, r0, sl
 80090a4:	2240      	movs	r2, #64	@ 0x40
 80090a6:	4082      	lsls	r2, r0
 80090a8:	4313      	orrs	r3, r2
 80090aa:	3401      	adds	r4, #1
 80090ac:	9304      	str	r3, [sp, #16]
 80090ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090b2:	4829      	ldr	r0, [pc, #164]	@ (8009158 <_vfiprintf_r+0x220>)
 80090b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80090b8:	2206      	movs	r2, #6
 80090ba:	f7f7 f8a9 	bl	8000210 <memchr>
 80090be:	2800      	cmp	r0, #0
 80090c0:	d03f      	beq.n	8009142 <_vfiprintf_r+0x20a>
 80090c2:	4b26      	ldr	r3, [pc, #152]	@ (800915c <_vfiprintf_r+0x224>)
 80090c4:	bb1b      	cbnz	r3, 800910e <_vfiprintf_r+0x1d6>
 80090c6:	9b03      	ldr	r3, [sp, #12]
 80090c8:	3307      	adds	r3, #7
 80090ca:	f023 0307 	bic.w	r3, r3, #7
 80090ce:	3308      	adds	r3, #8
 80090d0:	9303      	str	r3, [sp, #12]
 80090d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090d4:	443b      	add	r3, r7
 80090d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80090d8:	e76a      	b.n	8008fb0 <_vfiprintf_r+0x78>
 80090da:	fb0c 3202 	mla	r2, ip, r2, r3
 80090de:	460c      	mov	r4, r1
 80090e0:	2001      	movs	r0, #1
 80090e2:	e7a8      	b.n	8009036 <_vfiprintf_r+0xfe>
 80090e4:	2300      	movs	r3, #0
 80090e6:	3401      	adds	r4, #1
 80090e8:	9305      	str	r3, [sp, #20]
 80090ea:	4619      	mov	r1, r3
 80090ec:	f04f 0c0a 	mov.w	ip, #10
 80090f0:	4620      	mov	r0, r4
 80090f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090f6:	3a30      	subs	r2, #48	@ 0x30
 80090f8:	2a09      	cmp	r2, #9
 80090fa:	d903      	bls.n	8009104 <_vfiprintf_r+0x1cc>
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d0c6      	beq.n	800908e <_vfiprintf_r+0x156>
 8009100:	9105      	str	r1, [sp, #20]
 8009102:	e7c4      	b.n	800908e <_vfiprintf_r+0x156>
 8009104:	fb0c 2101 	mla	r1, ip, r1, r2
 8009108:	4604      	mov	r4, r0
 800910a:	2301      	movs	r3, #1
 800910c:	e7f0      	b.n	80090f0 <_vfiprintf_r+0x1b8>
 800910e:	ab03      	add	r3, sp, #12
 8009110:	9300      	str	r3, [sp, #0]
 8009112:	462a      	mov	r2, r5
 8009114:	4b12      	ldr	r3, [pc, #72]	@ (8009160 <_vfiprintf_r+0x228>)
 8009116:	a904      	add	r1, sp, #16
 8009118:	4630      	mov	r0, r6
 800911a:	f7fd fb8d 	bl	8006838 <_printf_float>
 800911e:	4607      	mov	r7, r0
 8009120:	1c78      	adds	r0, r7, #1
 8009122:	d1d6      	bne.n	80090d2 <_vfiprintf_r+0x19a>
 8009124:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009126:	07d9      	lsls	r1, r3, #31
 8009128:	d405      	bmi.n	8009136 <_vfiprintf_r+0x1fe>
 800912a:	89ab      	ldrh	r3, [r5, #12]
 800912c:	059a      	lsls	r2, r3, #22
 800912e:	d402      	bmi.n	8009136 <_vfiprintf_r+0x1fe>
 8009130:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009132:	f7fe f925 	bl	8007380 <__retarget_lock_release_recursive>
 8009136:	89ab      	ldrh	r3, [r5, #12]
 8009138:	065b      	lsls	r3, r3, #25
 800913a:	f53f af1f 	bmi.w	8008f7c <_vfiprintf_r+0x44>
 800913e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009140:	e71e      	b.n	8008f80 <_vfiprintf_r+0x48>
 8009142:	ab03      	add	r3, sp, #12
 8009144:	9300      	str	r3, [sp, #0]
 8009146:	462a      	mov	r2, r5
 8009148:	4b05      	ldr	r3, [pc, #20]	@ (8009160 <_vfiprintf_r+0x228>)
 800914a:	a904      	add	r1, sp, #16
 800914c:	4630      	mov	r0, r6
 800914e:	f7fd fe0b 	bl	8006d68 <_printf_i>
 8009152:	e7e4      	b.n	800911e <_vfiprintf_r+0x1e6>
 8009154:	08009e3e 	.word	0x08009e3e
 8009158:	08009e48 	.word	0x08009e48
 800915c:	08006839 	.word	0x08006839
 8009160:	08008f15 	.word	0x08008f15
 8009164:	08009e44 	.word	0x08009e44

08009168 <__swbuf_r>:
 8009168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800916a:	460e      	mov	r6, r1
 800916c:	4614      	mov	r4, r2
 800916e:	4605      	mov	r5, r0
 8009170:	b118      	cbz	r0, 800917a <__swbuf_r+0x12>
 8009172:	6a03      	ldr	r3, [r0, #32]
 8009174:	b90b      	cbnz	r3, 800917a <__swbuf_r+0x12>
 8009176:	f7fd ffa1 	bl	80070bc <__sinit>
 800917a:	69a3      	ldr	r3, [r4, #24]
 800917c:	60a3      	str	r3, [r4, #8]
 800917e:	89a3      	ldrh	r3, [r4, #12]
 8009180:	071a      	lsls	r2, r3, #28
 8009182:	d501      	bpl.n	8009188 <__swbuf_r+0x20>
 8009184:	6923      	ldr	r3, [r4, #16]
 8009186:	b943      	cbnz	r3, 800919a <__swbuf_r+0x32>
 8009188:	4621      	mov	r1, r4
 800918a:	4628      	mov	r0, r5
 800918c:	f000 f82a 	bl	80091e4 <__swsetup_r>
 8009190:	b118      	cbz	r0, 800919a <__swbuf_r+0x32>
 8009192:	f04f 37ff 	mov.w	r7, #4294967295
 8009196:	4638      	mov	r0, r7
 8009198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800919a:	6823      	ldr	r3, [r4, #0]
 800919c:	6922      	ldr	r2, [r4, #16]
 800919e:	1a98      	subs	r0, r3, r2
 80091a0:	6963      	ldr	r3, [r4, #20]
 80091a2:	b2f6      	uxtb	r6, r6
 80091a4:	4283      	cmp	r3, r0
 80091a6:	4637      	mov	r7, r6
 80091a8:	dc05      	bgt.n	80091b6 <__swbuf_r+0x4e>
 80091aa:	4621      	mov	r1, r4
 80091ac:	4628      	mov	r0, r5
 80091ae:	f7ff fd99 	bl	8008ce4 <_fflush_r>
 80091b2:	2800      	cmp	r0, #0
 80091b4:	d1ed      	bne.n	8009192 <__swbuf_r+0x2a>
 80091b6:	68a3      	ldr	r3, [r4, #8]
 80091b8:	3b01      	subs	r3, #1
 80091ba:	60a3      	str	r3, [r4, #8]
 80091bc:	6823      	ldr	r3, [r4, #0]
 80091be:	1c5a      	adds	r2, r3, #1
 80091c0:	6022      	str	r2, [r4, #0]
 80091c2:	701e      	strb	r6, [r3, #0]
 80091c4:	6962      	ldr	r2, [r4, #20]
 80091c6:	1c43      	adds	r3, r0, #1
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d004      	beq.n	80091d6 <__swbuf_r+0x6e>
 80091cc:	89a3      	ldrh	r3, [r4, #12]
 80091ce:	07db      	lsls	r3, r3, #31
 80091d0:	d5e1      	bpl.n	8009196 <__swbuf_r+0x2e>
 80091d2:	2e0a      	cmp	r6, #10
 80091d4:	d1df      	bne.n	8009196 <__swbuf_r+0x2e>
 80091d6:	4621      	mov	r1, r4
 80091d8:	4628      	mov	r0, r5
 80091da:	f7ff fd83 	bl	8008ce4 <_fflush_r>
 80091de:	2800      	cmp	r0, #0
 80091e0:	d0d9      	beq.n	8009196 <__swbuf_r+0x2e>
 80091e2:	e7d6      	b.n	8009192 <__swbuf_r+0x2a>

080091e4 <__swsetup_r>:
 80091e4:	b538      	push	{r3, r4, r5, lr}
 80091e6:	4b29      	ldr	r3, [pc, #164]	@ (800928c <__swsetup_r+0xa8>)
 80091e8:	4605      	mov	r5, r0
 80091ea:	6818      	ldr	r0, [r3, #0]
 80091ec:	460c      	mov	r4, r1
 80091ee:	b118      	cbz	r0, 80091f8 <__swsetup_r+0x14>
 80091f0:	6a03      	ldr	r3, [r0, #32]
 80091f2:	b90b      	cbnz	r3, 80091f8 <__swsetup_r+0x14>
 80091f4:	f7fd ff62 	bl	80070bc <__sinit>
 80091f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091fc:	0719      	lsls	r1, r3, #28
 80091fe:	d422      	bmi.n	8009246 <__swsetup_r+0x62>
 8009200:	06da      	lsls	r2, r3, #27
 8009202:	d407      	bmi.n	8009214 <__swsetup_r+0x30>
 8009204:	2209      	movs	r2, #9
 8009206:	602a      	str	r2, [r5, #0]
 8009208:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800920c:	81a3      	strh	r3, [r4, #12]
 800920e:	f04f 30ff 	mov.w	r0, #4294967295
 8009212:	e033      	b.n	800927c <__swsetup_r+0x98>
 8009214:	0758      	lsls	r0, r3, #29
 8009216:	d512      	bpl.n	800923e <__swsetup_r+0x5a>
 8009218:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800921a:	b141      	cbz	r1, 800922e <__swsetup_r+0x4a>
 800921c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009220:	4299      	cmp	r1, r3
 8009222:	d002      	beq.n	800922a <__swsetup_r+0x46>
 8009224:	4628      	mov	r0, r5
 8009226:	f7fe ff07 	bl	8008038 <_free_r>
 800922a:	2300      	movs	r3, #0
 800922c:	6363      	str	r3, [r4, #52]	@ 0x34
 800922e:	89a3      	ldrh	r3, [r4, #12]
 8009230:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009234:	81a3      	strh	r3, [r4, #12]
 8009236:	2300      	movs	r3, #0
 8009238:	6063      	str	r3, [r4, #4]
 800923a:	6923      	ldr	r3, [r4, #16]
 800923c:	6023      	str	r3, [r4, #0]
 800923e:	89a3      	ldrh	r3, [r4, #12]
 8009240:	f043 0308 	orr.w	r3, r3, #8
 8009244:	81a3      	strh	r3, [r4, #12]
 8009246:	6923      	ldr	r3, [r4, #16]
 8009248:	b94b      	cbnz	r3, 800925e <__swsetup_r+0x7a>
 800924a:	89a3      	ldrh	r3, [r4, #12]
 800924c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009250:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009254:	d003      	beq.n	800925e <__swsetup_r+0x7a>
 8009256:	4621      	mov	r1, r4
 8009258:	4628      	mov	r0, r5
 800925a:	f000 f883 	bl	8009364 <__smakebuf_r>
 800925e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009262:	f013 0201 	ands.w	r2, r3, #1
 8009266:	d00a      	beq.n	800927e <__swsetup_r+0x9a>
 8009268:	2200      	movs	r2, #0
 800926a:	60a2      	str	r2, [r4, #8]
 800926c:	6962      	ldr	r2, [r4, #20]
 800926e:	4252      	negs	r2, r2
 8009270:	61a2      	str	r2, [r4, #24]
 8009272:	6922      	ldr	r2, [r4, #16]
 8009274:	b942      	cbnz	r2, 8009288 <__swsetup_r+0xa4>
 8009276:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800927a:	d1c5      	bne.n	8009208 <__swsetup_r+0x24>
 800927c:	bd38      	pop	{r3, r4, r5, pc}
 800927e:	0799      	lsls	r1, r3, #30
 8009280:	bf58      	it	pl
 8009282:	6962      	ldrpl	r2, [r4, #20]
 8009284:	60a2      	str	r2, [r4, #8]
 8009286:	e7f4      	b.n	8009272 <__swsetup_r+0x8e>
 8009288:	2000      	movs	r0, #0
 800928a:	e7f7      	b.n	800927c <__swsetup_r+0x98>
 800928c:	20000018 	.word	0x20000018

08009290 <_raise_r>:
 8009290:	291f      	cmp	r1, #31
 8009292:	b538      	push	{r3, r4, r5, lr}
 8009294:	4605      	mov	r5, r0
 8009296:	460c      	mov	r4, r1
 8009298:	d904      	bls.n	80092a4 <_raise_r+0x14>
 800929a:	2316      	movs	r3, #22
 800929c:	6003      	str	r3, [r0, #0]
 800929e:	f04f 30ff 	mov.w	r0, #4294967295
 80092a2:	bd38      	pop	{r3, r4, r5, pc}
 80092a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80092a6:	b112      	cbz	r2, 80092ae <_raise_r+0x1e>
 80092a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092ac:	b94b      	cbnz	r3, 80092c2 <_raise_r+0x32>
 80092ae:	4628      	mov	r0, r5
 80092b0:	f000 f830 	bl	8009314 <_getpid_r>
 80092b4:	4622      	mov	r2, r4
 80092b6:	4601      	mov	r1, r0
 80092b8:	4628      	mov	r0, r5
 80092ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092be:	f000 b817 	b.w	80092f0 <_kill_r>
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d00a      	beq.n	80092dc <_raise_r+0x4c>
 80092c6:	1c59      	adds	r1, r3, #1
 80092c8:	d103      	bne.n	80092d2 <_raise_r+0x42>
 80092ca:	2316      	movs	r3, #22
 80092cc:	6003      	str	r3, [r0, #0]
 80092ce:	2001      	movs	r0, #1
 80092d0:	e7e7      	b.n	80092a2 <_raise_r+0x12>
 80092d2:	2100      	movs	r1, #0
 80092d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80092d8:	4620      	mov	r0, r4
 80092da:	4798      	blx	r3
 80092dc:	2000      	movs	r0, #0
 80092de:	e7e0      	b.n	80092a2 <_raise_r+0x12>

080092e0 <raise>:
 80092e0:	4b02      	ldr	r3, [pc, #8]	@ (80092ec <raise+0xc>)
 80092e2:	4601      	mov	r1, r0
 80092e4:	6818      	ldr	r0, [r3, #0]
 80092e6:	f7ff bfd3 	b.w	8009290 <_raise_r>
 80092ea:	bf00      	nop
 80092ec:	20000018 	.word	0x20000018

080092f0 <_kill_r>:
 80092f0:	b538      	push	{r3, r4, r5, lr}
 80092f2:	4d07      	ldr	r5, [pc, #28]	@ (8009310 <_kill_r+0x20>)
 80092f4:	2300      	movs	r3, #0
 80092f6:	4604      	mov	r4, r0
 80092f8:	4608      	mov	r0, r1
 80092fa:	4611      	mov	r1, r2
 80092fc:	602b      	str	r3, [r5, #0]
 80092fe:	f7f8 fa84 	bl	800180a <_kill>
 8009302:	1c43      	adds	r3, r0, #1
 8009304:	d102      	bne.n	800930c <_kill_r+0x1c>
 8009306:	682b      	ldr	r3, [r5, #0]
 8009308:	b103      	cbz	r3, 800930c <_kill_r+0x1c>
 800930a:	6023      	str	r3, [r4, #0]
 800930c:	bd38      	pop	{r3, r4, r5, pc}
 800930e:	bf00      	nop
 8009310:	200004ac 	.word	0x200004ac

08009314 <_getpid_r>:
 8009314:	f7f8 ba71 	b.w	80017fa <_getpid>

08009318 <__swhatbuf_r>:
 8009318:	b570      	push	{r4, r5, r6, lr}
 800931a:	460c      	mov	r4, r1
 800931c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009320:	2900      	cmp	r1, #0
 8009322:	b096      	sub	sp, #88	@ 0x58
 8009324:	4615      	mov	r5, r2
 8009326:	461e      	mov	r6, r3
 8009328:	da0d      	bge.n	8009346 <__swhatbuf_r+0x2e>
 800932a:	89a3      	ldrh	r3, [r4, #12]
 800932c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009330:	f04f 0100 	mov.w	r1, #0
 8009334:	bf14      	ite	ne
 8009336:	2340      	movne	r3, #64	@ 0x40
 8009338:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800933c:	2000      	movs	r0, #0
 800933e:	6031      	str	r1, [r6, #0]
 8009340:	602b      	str	r3, [r5, #0]
 8009342:	b016      	add	sp, #88	@ 0x58
 8009344:	bd70      	pop	{r4, r5, r6, pc}
 8009346:	466a      	mov	r2, sp
 8009348:	f000 f848 	bl	80093dc <_fstat_r>
 800934c:	2800      	cmp	r0, #0
 800934e:	dbec      	blt.n	800932a <__swhatbuf_r+0x12>
 8009350:	9901      	ldr	r1, [sp, #4]
 8009352:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009356:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800935a:	4259      	negs	r1, r3
 800935c:	4159      	adcs	r1, r3
 800935e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009362:	e7eb      	b.n	800933c <__swhatbuf_r+0x24>

08009364 <__smakebuf_r>:
 8009364:	898b      	ldrh	r3, [r1, #12]
 8009366:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009368:	079d      	lsls	r5, r3, #30
 800936a:	4606      	mov	r6, r0
 800936c:	460c      	mov	r4, r1
 800936e:	d507      	bpl.n	8009380 <__smakebuf_r+0x1c>
 8009370:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009374:	6023      	str	r3, [r4, #0]
 8009376:	6123      	str	r3, [r4, #16]
 8009378:	2301      	movs	r3, #1
 800937a:	6163      	str	r3, [r4, #20]
 800937c:	b003      	add	sp, #12
 800937e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009380:	ab01      	add	r3, sp, #4
 8009382:	466a      	mov	r2, sp
 8009384:	f7ff ffc8 	bl	8009318 <__swhatbuf_r>
 8009388:	9f00      	ldr	r7, [sp, #0]
 800938a:	4605      	mov	r5, r0
 800938c:	4639      	mov	r1, r7
 800938e:	4630      	mov	r0, r6
 8009390:	f7fe fec6 	bl	8008120 <_malloc_r>
 8009394:	b948      	cbnz	r0, 80093aa <__smakebuf_r+0x46>
 8009396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800939a:	059a      	lsls	r2, r3, #22
 800939c:	d4ee      	bmi.n	800937c <__smakebuf_r+0x18>
 800939e:	f023 0303 	bic.w	r3, r3, #3
 80093a2:	f043 0302 	orr.w	r3, r3, #2
 80093a6:	81a3      	strh	r3, [r4, #12]
 80093a8:	e7e2      	b.n	8009370 <__smakebuf_r+0xc>
 80093aa:	89a3      	ldrh	r3, [r4, #12]
 80093ac:	6020      	str	r0, [r4, #0]
 80093ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093b2:	81a3      	strh	r3, [r4, #12]
 80093b4:	9b01      	ldr	r3, [sp, #4]
 80093b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80093ba:	b15b      	cbz	r3, 80093d4 <__smakebuf_r+0x70>
 80093bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093c0:	4630      	mov	r0, r6
 80093c2:	f000 f81d 	bl	8009400 <_isatty_r>
 80093c6:	b128      	cbz	r0, 80093d4 <__smakebuf_r+0x70>
 80093c8:	89a3      	ldrh	r3, [r4, #12]
 80093ca:	f023 0303 	bic.w	r3, r3, #3
 80093ce:	f043 0301 	orr.w	r3, r3, #1
 80093d2:	81a3      	strh	r3, [r4, #12]
 80093d4:	89a3      	ldrh	r3, [r4, #12]
 80093d6:	431d      	orrs	r5, r3
 80093d8:	81a5      	strh	r5, [r4, #12]
 80093da:	e7cf      	b.n	800937c <__smakebuf_r+0x18>

080093dc <_fstat_r>:
 80093dc:	b538      	push	{r3, r4, r5, lr}
 80093de:	4d07      	ldr	r5, [pc, #28]	@ (80093fc <_fstat_r+0x20>)
 80093e0:	2300      	movs	r3, #0
 80093e2:	4604      	mov	r4, r0
 80093e4:	4608      	mov	r0, r1
 80093e6:	4611      	mov	r1, r2
 80093e8:	602b      	str	r3, [r5, #0]
 80093ea:	f7f8 fa6e 	bl	80018ca <_fstat>
 80093ee:	1c43      	adds	r3, r0, #1
 80093f0:	d102      	bne.n	80093f8 <_fstat_r+0x1c>
 80093f2:	682b      	ldr	r3, [r5, #0]
 80093f4:	b103      	cbz	r3, 80093f8 <_fstat_r+0x1c>
 80093f6:	6023      	str	r3, [r4, #0]
 80093f8:	bd38      	pop	{r3, r4, r5, pc}
 80093fa:	bf00      	nop
 80093fc:	200004ac 	.word	0x200004ac

08009400 <_isatty_r>:
 8009400:	b538      	push	{r3, r4, r5, lr}
 8009402:	4d06      	ldr	r5, [pc, #24]	@ (800941c <_isatty_r+0x1c>)
 8009404:	2300      	movs	r3, #0
 8009406:	4604      	mov	r4, r0
 8009408:	4608      	mov	r0, r1
 800940a:	602b      	str	r3, [r5, #0]
 800940c:	f7f8 fa6d 	bl	80018ea <_isatty>
 8009410:	1c43      	adds	r3, r0, #1
 8009412:	d102      	bne.n	800941a <_isatty_r+0x1a>
 8009414:	682b      	ldr	r3, [r5, #0]
 8009416:	b103      	cbz	r3, 800941a <_isatty_r+0x1a>
 8009418:	6023      	str	r3, [r4, #0]
 800941a:	bd38      	pop	{r3, r4, r5, pc}
 800941c:	200004ac 	.word	0x200004ac

08009420 <powf>:
 8009420:	b508      	push	{r3, lr}
 8009422:	ed2d 8b04 	vpush	{d8-d9}
 8009426:	eeb0 8a60 	vmov.f32	s16, s1
 800942a:	eeb0 9a40 	vmov.f32	s18, s0
 800942e:	f000 f859 	bl	80094e4 <__ieee754_powf>
 8009432:	eeb4 8a48 	vcmp.f32	s16, s16
 8009436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800943a:	eef0 8a40 	vmov.f32	s17, s0
 800943e:	d63e      	bvs.n	80094be <powf+0x9e>
 8009440:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8009444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009448:	d112      	bne.n	8009470 <powf+0x50>
 800944a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800944e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009452:	d039      	beq.n	80094c8 <powf+0xa8>
 8009454:	eeb0 0a48 	vmov.f32	s0, s16
 8009458:	f000 f839 	bl	80094ce <finitef>
 800945c:	b378      	cbz	r0, 80094be <powf+0x9e>
 800945e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009466:	d52a      	bpl.n	80094be <powf+0x9e>
 8009468:	f7fd ff5e 	bl	8007328 <__errno>
 800946c:	2322      	movs	r3, #34	@ 0x22
 800946e:	e014      	b.n	800949a <powf+0x7a>
 8009470:	f000 f82d 	bl	80094ce <finitef>
 8009474:	b998      	cbnz	r0, 800949e <powf+0x7e>
 8009476:	eeb0 0a49 	vmov.f32	s0, s18
 800947a:	f000 f828 	bl	80094ce <finitef>
 800947e:	b170      	cbz	r0, 800949e <powf+0x7e>
 8009480:	eeb0 0a48 	vmov.f32	s0, s16
 8009484:	f000 f823 	bl	80094ce <finitef>
 8009488:	b148      	cbz	r0, 800949e <powf+0x7e>
 800948a:	eef4 8a68 	vcmp.f32	s17, s17
 800948e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009492:	d7e9      	bvc.n	8009468 <powf+0x48>
 8009494:	f7fd ff48 	bl	8007328 <__errno>
 8009498:	2321      	movs	r3, #33	@ 0x21
 800949a:	6003      	str	r3, [r0, #0]
 800949c:	e00f      	b.n	80094be <powf+0x9e>
 800949e:	eef5 8a40 	vcmp.f32	s17, #0.0
 80094a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094a6:	d10a      	bne.n	80094be <powf+0x9e>
 80094a8:	eeb0 0a49 	vmov.f32	s0, s18
 80094ac:	f000 f80f 	bl	80094ce <finitef>
 80094b0:	b128      	cbz	r0, 80094be <powf+0x9e>
 80094b2:	eeb0 0a48 	vmov.f32	s0, s16
 80094b6:	f000 f80a 	bl	80094ce <finitef>
 80094ba:	2800      	cmp	r0, #0
 80094bc:	d1d4      	bne.n	8009468 <powf+0x48>
 80094be:	eeb0 0a68 	vmov.f32	s0, s17
 80094c2:	ecbd 8b04 	vpop	{d8-d9}
 80094c6:	bd08      	pop	{r3, pc}
 80094c8:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80094cc:	e7f7      	b.n	80094be <powf+0x9e>

080094ce <finitef>:
 80094ce:	ee10 3a10 	vmov	r3, s0
 80094d2:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80094d6:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80094da:	bfac      	ite	ge
 80094dc:	2000      	movge	r0, #0
 80094de:	2001      	movlt	r0, #1
 80094e0:	4770      	bx	lr
	...

080094e4 <__ieee754_powf>:
 80094e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094e8:	ee10 4a90 	vmov	r4, s1
 80094ec:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 80094f0:	ed2d 8b02 	vpush	{d8}
 80094f4:	ee10 6a10 	vmov	r6, s0
 80094f8:	eeb0 8a40 	vmov.f32	s16, s0
 80094fc:	eef0 8a60 	vmov.f32	s17, s1
 8009500:	d10c      	bne.n	800951c <__ieee754_powf+0x38>
 8009502:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8009506:	0076      	lsls	r6, r6, #1
 8009508:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800950c:	f240 8274 	bls.w	80099f8 <__ieee754_powf+0x514>
 8009510:	ee38 0a28 	vadd.f32	s0, s16, s17
 8009514:	ecbd 8b02 	vpop	{d8}
 8009518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800951c:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8009520:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8009524:	d802      	bhi.n	800952c <__ieee754_powf+0x48>
 8009526:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800952a:	d908      	bls.n	800953e <__ieee754_powf+0x5a>
 800952c:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8009530:	d1ee      	bne.n	8009510 <__ieee754_powf+0x2c>
 8009532:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8009536:	0064      	lsls	r4, r4, #1
 8009538:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800953c:	e7e6      	b.n	800950c <__ieee754_powf+0x28>
 800953e:	2e00      	cmp	r6, #0
 8009540:	da1f      	bge.n	8009582 <__ieee754_powf+0x9e>
 8009542:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8009546:	f080 8260 	bcs.w	8009a0a <__ieee754_powf+0x526>
 800954a:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800954e:	d32f      	bcc.n	80095b0 <__ieee754_powf+0xcc>
 8009550:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8009554:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8009558:	fa49 f503 	asr.w	r5, r9, r3
 800955c:	fa05 f303 	lsl.w	r3, r5, r3
 8009560:	454b      	cmp	r3, r9
 8009562:	d123      	bne.n	80095ac <__ieee754_powf+0xc8>
 8009564:	f005 0501 	and.w	r5, r5, #1
 8009568:	f1c5 0502 	rsb	r5, r5, #2
 800956c:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8009570:	d11f      	bne.n	80095b2 <__ieee754_powf+0xce>
 8009572:	2c00      	cmp	r4, #0
 8009574:	f280 8246 	bge.w	8009a04 <__ieee754_powf+0x520>
 8009578:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800957c:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8009580:	e7c8      	b.n	8009514 <__ieee754_powf+0x30>
 8009582:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8009586:	d111      	bne.n	80095ac <__ieee754_powf+0xc8>
 8009588:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800958c:	f000 8234 	beq.w	80099f8 <__ieee754_powf+0x514>
 8009590:	d906      	bls.n	80095a0 <__ieee754_powf+0xbc>
 8009592:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 80098a8 <__ieee754_powf+0x3c4>
 8009596:	2c00      	cmp	r4, #0
 8009598:	bfa8      	it	ge
 800959a:	eeb0 0a68 	vmovge.f32	s0, s17
 800959e:	e7b9      	b.n	8009514 <__ieee754_powf+0x30>
 80095a0:	2c00      	cmp	r4, #0
 80095a2:	f280 822c 	bge.w	80099fe <__ieee754_powf+0x51a>
 80095a6:	eeb1 0a68 	vneg.f32	s0, s17
 80095aa:	e7b3      	b.n	8009514 <__ieee754_powf+0x30>
 80095ac:	2500      	movs	r5, #0
 80095ae:	e7dd      	b.n	800956c <__ieee754_powf+0x88>
 80095b0:	2500      	movs	r5, #0
 80095b2:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80095b6:	d102      	bne.n	80095be <__ieee754_powf+0xda>
 80095b8:	ee28 0a08 	vmul.f32	s0, s16, s16
 80095bc:	e7aa      	b.n	8009514 <__ieee754_powf+0x30>
 80095be:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80095c2:	f040 8227 	bne.w	8009a14 <__ieee754_powf+0x530>
 80095c6:	2e00      	cmp	r6, #0
 80095c8:	f2c0 8224 	blt.w	8009a14 <__ieee754_powf+0x530>
 80095cc:	eeb0 0a48 	vmov.f32	s0, s16
 80095d0:	ecbd 8b02 	vpop	{d8}
 80095d4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095d8:	f000 bae6 	b.w	8009ba8 <__ieee754_sqrtf>
 80095dc:	2d01      	cmp	r5, #1
 80095de:	d199      	bne.n	8009514 <__ieee754_powf+0x30>
 80095e0:	eeb1 0a40 	vneg.f32	s0, s0
 80095e4:	e796      	b.n	8009514 <__ieee754_powf+0x30>
 80095e6:	0ff0      	lsrs	r0, r6, #31
 80095e8:	3801      	subs	r0, #1
 80095ea:	ea55 0300 	orrs.w	r3, r5, r0
 80095ee:	d104      	bne.n	80095fa <__ieee754_powf+0x116>
 80095f0:	ee38 8a48 	vsub.f32	s16, s16, s16
 80095f4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80095f8:	e78c      	b.n	8009514 <__ieee754_powf+0x30>
 80095fa:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 80095fe:	d96d      	bls.n	80096dc <__ieee754_powf+0x1f8>
 8009600:	4baa      	ldr	r3, [pc, #680]	@ (80098ac <__ieee754_powf+0x3c8>)
 8009602:	4598      	cmp	r8, r3
 8009604:	d808      	bhi.n	8009618 <__ieee754_powf+0x134>
 8009606:	2c00      	cmp	r4, #0
 8009608:	da0b      	bge.n	8009622 <__ieee754_powf+0x13e>
 800960a:	2000      	movs	r0, #0
 800960c:	ecbd 8b02 	vpop	{d8}
 8009610:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009614:	f000 bac2 	b.w	8009b9c <__math_oflowf>
 8009618:	4ba5      	ldr	r3, [pc, #660]	@ (80098b0 <__ieee754_powf+0x3cc>)
 800961a:	4598      	cmp	r8, r3
 800961c:	d908      	bls.n	8009630 <__ieee754_powf+0x14c>
 800961e:	2c00      	cmp	r4, #0
 8009620:	dcf3      	bgt.n	800960a <__ieee754_powf+0x126>
 8009622:	2000      	movs	r0, #0
 8009624:	ecbd 8b02 	vpop	{d8}
 8009628:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800962c:	f000 bab0 	b.w	8009b90 <__math_uflowf>
 8009630:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009634:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009638:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 80098b4 <__ieee754_powf+0x3d0>
 800963c:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8009640:	eee0 6a67 	vfms.f32	s13, s0, s15
 8009644:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009648:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800964c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009650:	eddf 6a99 	vldr	s13, [pc, #612]	@ 80098b8 <__ieee754_powf+0x3d4>
 8009654:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009658:	eddf 7a98 	vldr	s15, [pc, #608]	@ 80098bc <__ieee754_powf+0x3d8>
 800965c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8009660:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 80098c0 <__ieee754_powf+0x3dc>
 8009664:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009668:	eeb0 7a67 	vmov.f32	s14, s15
 800966c:	eea0 7a26 	vfma.f32	s14, s0, s13
 8009670:	ee17 3a10 	vmov	r3, s14
 8009674:	f36f 030b 	bfc	r3, #0, #12
 8009678:	ee07 3a10 	vmov	s14, r3
 800967c:	eeb0 6a47 	vmov.f32	s12, s14
 8009680:	eea0 6a66 	vfms.f32	s12, s0, s13
 8009684:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8009688:	3d01      	subs	r5, #1
 800968a:	4305      	orrs	r5, r0
 800968c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009690:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8009694:	f36f 040b 	bfc	r4, #0, #12
 8009698:	bf18      	it	ne
 800969a:	eeb0 8a66 	vmovne.f32	s16, s13
 800969e:	ee06 4a90 	vmov	s13, r4
 80096a2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80096a6:	ee38 6ae6 	vsub.f32	s12, s17, s13
 80096aa:	ee67 7a26 	vmul.f32	s15, s14, s13
 80096ae:	eee6 0a07 	vfma.f32	s1, s12, s14
 80096b2:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80096b6:	ee17 1a10 	vmov	r1, s14
 80096ba:	2900      	cmp	r1, #0
 80096bc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80096c0:	f340 80dd 	ble.w	800987e <__ieee754_powf+0x39a>
 80096c4:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80096c8:	f240 80ca 	bls.w	8009860 <__ieee754_powf+0x37c>
 80096cc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80096d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096d4:	bf4c      	ite	mi
 80096d6:	2001      	movmi	r0, #1
 80096d8:	2000      	movpl	r0, #0
 80096da:	e797      	b.n	800960c <__ieee754_powf+0x128>
 80096dc:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80096e0:	bf01      	itttt	eq
 80096e2:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 80098c4 <__ieee754_powf+0x3e0>
 80096e6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80096ea:	f06f 0317 	mvneq.w	r3, #23
 80096ee:	ee17 7a90 	vmoveq	r7, s15
 80096f2:	ea4f 52e7 	mov.w	r2, r7, asr #23
 80096f6:	bf18      	it	ne
 80096f8:	2300      	movne	r3, #0
 80096fa:	3a7f      	subs	r2, #127	@ 0x7f
 80096fc:	441a      	add	r2, r3
 80096fe:	4b72      	ldr	r3, [pc, #456]	@ (80098c8 <__ieee754_powf+0x3e4>)
 8009700:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8009704:	429f      	cmp	r7, r3
 8009706:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800970a:	dd06      	ble.n	800971a <__ieee754_powf+0x236>
 800970c:	4b6f      	ldr	r3, [pc, #444]	@ (80098cc <__ieee754_powf+0x3e8>)
 800970e:	429f      	cmp	r7, r3
 8009710:	f340 80a4 	ble.w	800985c <__ieee754_powf+0x378>
 8009714:	3201      	adds	r2, #1
 8009716:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800971a:	2600      	movs	r6, #0
 800971c:	4b6c      	ldr	r3, [pc, #432]	@ (80098d0 <__ieee754_powf+0x3ec>)
 800971e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8009722:	ee07 1a10 	vmov	s14, r1
 8009726:	edd3 5a00 	vldr	s11, [r3]
 800972a:	4b6a      	ldr	r3, [pc, #424]	@ (80098d4 <__ieee754_powf+0x3f0>)
 800972c:	ee75 7a87 	vadd.f32	s15, s11, s14
 8009730:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009734:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8009738:	1049      	asrs	r1, r1, #1
 800973a:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800973e:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8009742:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8009746:	ee37 6a65 	vsub.f32	s12, s14, s11
 800974a:	ee07 1a90 	vmov	s15, r1
 800974e:	ee26 5a24 	vmul.f32	s10, s12, s9
 8009752:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8009756:	ee15 7a10 	vmov	r7, s10
 800975a:	401f      	ands	r7, r3
 800975c:	ee06 7a90 	vmov	s13, r7
 8009760:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8009764:	ee37 7a65 	vsub.f32	s14, s14, s11
 8009768:	ee65 7a05 	vmul.f32	s15, s10, s10
 800976c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8009770:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80098d8 <__ieee754_powf+0x3f4>
 8009774:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80098dc <__ieee754_powf+0x3f8>
 8009778:	eee7 5a87 	vfma.f32	s11, s15, s14
 800977c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80098e0 <__ieee754_powf+0x3fc>
 8009780:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009784:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 80098b4 <__ieee754_powf+0x3d0>
 8009788:	eee7 5a27 	vfma.f32	s11, s14, s15
 800978c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80098e4 <__ieee754_powf+0x400>
 8009790:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009794:	eddf 5a54 	vldr	s11, [pc, #336]	@ 80098e8 <__ieee754_powf+0x404>
 8009798:	ee26 6a24 	vmul.f32	s12, s12, s9
 800979c:	eee7 5a27 	vfma.f32	s11, s14, s15
 80097a0:	ee35 7a26 	vadd.f32	s14, s10, s13
 80097a4:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80097a8:	ee27 7a06 	vmul.f32	s14, s14, s12
 80097ac:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 80097b0:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80097b4:	eef0 5a67 	vmov.f32	s11, s15
 80097b8:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80097bc:	ee75 5a87 	vadd.f32	s11, s11, s14
 80097c0:	ee15 1a90 	vmov	r1, s11
 80097c4:	4019      	ands	r1, r3
 80097c6:	ee05 1a90 	vmov	s11, r1
 80097ca:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80097ce:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80097d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097d6:	ee67 7a85 	vmul.f32	s15, s15, s10
 80097da:	eee6 7a25 	vfma.f32	s15, s12, s11
 80097de:	eeb0 6a67 	vmov.f32	s12, s15
 80097e2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80097e6:	ee16 1a10 	vmov	r1, s12
 80097ea:	4019      	ands	r1, r3
 80097ec:	ee06 1a10 	vmov	s12, r1
 80097f0:	eeb0 7a46 	vmov.f32	s14, s12
 80097f4:	eea6 7ae5 	vfms.f32	s14, s13, s11
 80097f8:	493c      	ldr	r1, [pc, #240]	@ (80098ec <__ieee754_powf+0x408>)
 80097fa:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 80097fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009802:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80098f0 <__ieee754_powf+0x40c>
 8009806:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 80098f4 <__ieee754_powf+0x410>
 800980a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800980e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80098f8 <__ieee754_powf+0x414>
 8009812:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009816:	ed91 7a00 	vldr	s14, [r1]
 800981a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800981e:	ee07 2a10 	vmov	s14, r2
 8009822:	4a36      	ldr	r2, [pc, #216]	@ (80098fc <__ieee754_powf+0x418>)
 8009824:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009828:	eeb0 7a67 	vmov.f32	s14, s15
 800982c:	eea6 7a25 	vfma.f32	s14, s12, s11
 8009830:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8009834:	ed92 5a00 	vldr	s10, [r2]
 8009838:	ee37 7a05 	vadd.f32	s14, s14, s10
 800983c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009840:	ee17 2a10 	vmov	r2, s14
 8009844:	401a      	ands	r2, r3
 8009846:	ee07 2a10 	vmov	s14, r2
 800984a:	ee77 6a66 	vsub.f32	s13, s14, s13
 800984e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8009852:	eee6 6a65 	vfms.f32	s13, s12, s11
 8009856:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800985a:	e715      	b.n	8009688 <__ieee754_powf+0x1a4>
 800985c:	2601      	movs	r6, #1
 800985e:	e75d      	b.n	800971c <__ieee754_powf+0x238>
 8009860:	d152      	bne.n	8009908 <__ieee754_powf+0x424>
 8009862:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8009900 <__ieee754_powf+0x41c>
 8009866:	ee37 7a67 	vsub.f32	s14, s14, s15
 800986a:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800986e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009876:	f73f af29 	bgt.w	80096cc <__ieee754_powf+0x1e8>
 800987a:	2386      	movs	r3, #134	@ 0x86
 800987c:	e048      	b.n	8009910 <__ieee754_powf+0x42c>
 800987e:	4a21      	ldr	r2, [pc, #132]	@ (8009904 <__ieee754_powf+0x420>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d907      	bls.n	8009894 <__ieee754_powf+0x3b0>
 8009884:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800988c:	bf4c      	ite	mi
 800988e:	2001      	movmi	r0, #1
 8009890:	2000      	movpl	r0, #0
 8009892:	e6c7      	b.n	8009624 <__ieee754_powf+0x140>
 8009894:	d138      	bne.n	8009908 <__ieee754_powf+0x424>
 8009896:	ee37 7a67 	vsub.f32	s14, s14, s15
 800989a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800989e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098a2:	dbea      	blt.n	800987a <__ieee754_powf+0x396>
 80098a4:	e7ee      	b.n	8009884 <__ieee754_powf+0x3a0>
 80098a6:	bf00      	nop
 80098a8:	00000000 	.word	0x00000000
 80098ac:	3f7ffff3 	.word	0x3f7ffff3
 80098b0:	3f800007 	.word	0x3f800007
 80098b4:	3eaaaaab 	.word	0x3eaaaaab
 80098b8:	3fb8aa00 	.word	0x3fb8aa00
 80098bc:	3fb8aa3b 	.word	0x3fb8aa3b
 80098c0:	36eca570 	.word	0x36eca570
 80098c4:	4b800000 	.word	0x4b800000
 80098c8:	001cc471 	.word	0x001cc471
 80098cc:	005db3d6 	.word	0x005db3d6
 80098d0:	0800a0ac 	.word	0x0800a0ac
 80098d4:	fffff000 	.word	0xfffff000
 80098d8:	3e6c3255 	.word	0x3e6c3255
 80098dc:	3e53f142 	.word	0x3e53f142
 80098e0:	3e8ba305 	.word	0x3e8ba305
 80098e4:	3edb6db7 	.word	0x3edb6db7
 80098e8:	3f19999a 	.word	0x3f19999a
 80098ec:	0800a09c 	.word	0x0800a09c
 80098f0:	3f76384f 	.word	0x3f76384f
 80098f4:	3f763800 	.word	0x3f763800
 80098f8:	369dc3a0 	.word	0x369dc3a0
 80098fc:	0800a0a4 	.word	0x0800a0a4
 8009900:	3338aa3c 	.word	0x3338aa3c
 8009904:	43160000 	.word	0x43160000
 8009908:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800990c:	d96f      	bls.n	80099ee <__ieee754_powf+0x50a>
 800990e:	15db      	asrs	r3, r3, #23
 8009910:	3b7e      	subs	r3, #126	@ 0x7e
 8009912:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8009916:	4118      	asrs	r0, r3
 8009918:	4408      	add	r0, r1
 800991a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800991e:	4a4e      	ldr	r2, [pc, #312]	@ (8009a58 <__ieee754_powf+0x574>)
 8009920:	3b7f      	subs	r3, #127	@ 0x7f
 8009922:	411a      	asrs	r2, r3
 8009924:	4002      	ands	r2, r0
 8009926:	ee07 2a10 	vmov	s14, r2
 800992a:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800992e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8009932:	f1c3 0317 	rsb	r3, r3, #23
 8009936:	4118      	asrs	r0, r3
 8009938:	2900      	cmp	r1, #0
 800993a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800993e:	bfb8      	it	lt
 8009940:	4240      	neglt	r0, r0
 8009942:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8009946:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8009a5c <__ieee754_powf+0x578>
 800994a:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8009a60 <__ieee754_powf+0x57c>
 800994e:	ee16 3a90 	vmov	r3, s13
 8009952:	f36f 030b 	bfc	r3, #0, #12
 8009956:	ee06 3a90 	vmov	s13, r3
 800995a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800995e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009962:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8009966:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8009a64 <__ieee754_powf+0x580>
 800996a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800996e:	eee0 7a87 	vfma.f32	s15, s1, s14
 8009972:	eeb0 7a67 	vmov.f32	s14, s15
 8009976:	eea6 7a86 	vfma.f32	s14, s13, s12
 800997a:	eef0 5a47 	vmov.f32	s11, s14
 800997e:	eee6 5ac6 	vfms.f32	s11, s13, s12
 8009982:	ee67 6a07 	vmul.f32	s13, s14, s14
 8009986:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800998a:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8009a68 <__ieee754_powf+0x584>
 800998e:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8009a6c <__ieee754_powf+0x588>
 8009992:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8009996:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8009a70 <__ieee754_powf+0x58c>
 800999a:	eee6 5a26 	vfma.f32	s11, s12, s13
 800999e:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8009a74 <__ieee754_powf+0x590>
 80099a2:	eea5 6aa6 	vfma.f32	s12, s11, s13
 80099a6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009a78 <__ieee754_powf+0x594>
 80099aa:	eee6 5a26 	vfma.f32	s11, s12, s13
 80099ae:	eeb0 6a47 	vmov.f32	s12, s14
 80099b2:	eea5 6ae6 	vfms.f32	s12, s11, s13
 80099b6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80099ba:	ee67 5a06 	vmul.f32	s11, s14, s12
 80099be:	ee36 6a66 	vsub.f32	s12, s12, s13
 80099c2:	eee7 7a27 	vfma.f32	s15, s14, s15
 80099c6:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80099ca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80099ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80099d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80099d6:	ee10 3a10 	vmov	r3, s0
 80099da:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80099de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80099e2:	da06      	bge.n	80099f2 <__ieee754_powf+0x50e>
 80099e4:	f000 f854 	bl	8009a90 <scalbnf>
 80099e8:	ee20 0a08 	vmul.f32	s0, s0, s16
 80099ec:	e592      	b.n	8009514 <__ieee754_powf+0x30>
 80099ee:	2000      	movs	r0, #0
 80099f0:	e7a7      	b.n	8009942 <__ieee754_powf+0x45e>
 80099f2:	ee00 3a10 	vmov	s0, r3
 80099f6:	e7f7      	b.n	80099e8 <__ieee754_powf+0x504>
 80099f8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80099fc:	e58a      	b.n	8009514 <__ieee754_powf+0x30>
 80099fe:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8009a7c <__ieee754_powf+0x598>
 8009a02:	e587      	b.n	8009514 <__ieee754_powf+0x30>
 8009a04:	eeb0 0a48 	vmov.f32	s0, s16
 8009a08:	e584      	b.n	8009514 <__ieee754_powf+0x30>
 8009a0a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8009a0e:	f43f adbb 	beq.w	8009588 <__ieee754_powf+0xa4>
 8009a12:	2502      	movs	r5, #2
 8009a14:	eeb0 0a48 	vmov.f32	s0, s16
 8009a18:	f000 f832 	bl	8009a80 <fabsf>
 8009a1c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8009a20:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8009a24:	4647      	mov	r7, r8
 8009a26:	d003      	beq.n	8009a30 <__ieee754_powf+0x54c>
 8009a28:	f1b8 0f00 	cmp.w	r8, #0
 8009a2c:	f47f addb 	bne.w	80095e6 <__ieee754_powf+0x102>
 8009a30:	2c00      	cmp	r4, #0
 8009a32:	bfbc      	itt	lt
 8009a34:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8009a38:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8009a3c:	2e00      	cmp	r6, #0
 8009a3e:	f6bf ad69 	bge.w	8009514 <__ieee754_powf+0x30>
 8009a42:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8009a46:	ea58 0805 	orrs.w	r8, r8, r5
 8009a4a:	f47f adc7 	bne.w	80095dc <__ieee754_powf+0xf8>
 8009a4e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009a52:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8009a56:	e55d      	b.n	8009514 <__ieee754_powf+0x30>
 8009a58:	ff800000 	.word	0xff800000
 8009a5c:	3f317218 	.word	0x3f317218
 8009a60:	3f317200 	.word	0x3f317200
 8009a64:	35bfbe8c 	.word	0x35bfbe8c
 8009a68:	b5ddea0e 	.word	0xb5ddea0e
 8009a6c:	3331bb4c 	.word	0x3331bb4c
 8009a70:	388ab355 	.word	0x388ab355
 8009a74:	bb360b61 	.word	0xbb360b61
 8009a78:	3e2aaaab 	.word	0x3e2aaaab
 8009a7c:	00000000 	.word	0x00000000

08009a80 <fabsf>:
 8009a80:	ee10 3a10 	vmov	r3, s0
 8009a84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009a88:	ee00 3a10 	vmov	s0, r3
 8009a8c:	4770      	bx	lr
	...

08009a90 <scalbnf>:
 8009a90:	ee10 3a10 	vmov	r3, s0
 8009a94:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8009a98:	d02b      	beq.n	8009af2 <scalbnf+0x62>
 8009a9a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8009a9e:	d302      	bcc.n	8009aa6 <scalbnf+0x16>
 8009aa0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009aa4:	4770      	bx	lr
 8009aa6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8009aaa:	d123      	bne.n	8009af4 <scalbnf+0x64>
 8009aac:	4b24      	ldr	r3, [pc, #144]	@ (8009b40 <scalbnf+0xb0>)
 8009aae:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8009b44 <scalbnf+0xb4>
 8009ab2:	4298      	cmp	r0, r3
 8009ab4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009ab8:	db17      	blt.n	8009aea <scalbnf+0x5a>
 8009aba:	ee10 3a10 	vmov	r3, s0
 8009abe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009ac2:	3a19      	subs	r2, #25
 8009ac4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8009ac8:	4288      	cmp	r0, r1
 8009aca:	dd15      	ble.n	8009af8 <scalbnf+0x68>
 8009acc:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8009b48 <scalbnf+0xb8>
 8009ad0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8009b4c <scalbnf+0xbc>
 8009ad4:	ee10 3a10 	vmov	r3, s0
 8009ad8:	eeb0 7a67 	vmov.f32	s14, s15
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	bfb8      	it	lt
 8009ae0:	eef0 7a66 	vmovlt.f32	s15, s13
 8009ae4:	ee27 0a87 	vmul.f32	s0, s15, s14
 8009ae8:	4770      	bx	lr
 8009aea:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009b50 <scalbnf+0xc0>
 8009aee:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009af2:	4770      	bx	lr
 8009af4:	0dd2      	lsrs	r2, r2, #23
 8009af6:	e7e5      	b.n	8009ac4 <scalbnf+0x34>
 8009af8:	4410      	add	r0, r2
 8009afa:	28fe      	cmp	r0, #254	@ 0xfe
 8009afc:	dce6      	bgt.n	8009acc <scalbnf+0x3c>
 8009afe:	2800      	cmp	r0, #0
 8009b00:	dd06      	ble.n	8009b10 <scalbnf+0x80>
 8009b02:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009b06:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009b0a:	ee00 3a10 	vmov	s0, r3
 8009b0e:	4770      	bx	lr
 8009b10:	f110 0f16 	cmn.w	r0, #22
 8009b14:	da09      	bge.n	8009b2a <scalbnf+0x9a>
 8009b16:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8009b50 <scalbnf+0xc0>
 8009b1a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8009b54 <scalbnf+0xc4>
 8009b1e:	ee10 3a10 	vmov	r3, s0
 8009b22:	eeb0 7a67 	vmov.f32	s14, s15
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	e7d9      	b.n	8009ade <scalbnf+0x4e>
 8009b2a:	3019      	adds	r0, #25
 8009b2c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009b30:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009b34:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8009b58 <scalbnf+0xc8>
 8009b38:	ee07 3a90 	vmov	s15, r3
 8009b3c:	e7d7      	b.n	8009aee <scalbnf+0x5e>
 8009b3e:	bf00      	nop
 8009b40:	ffff3cb0 	.word	0xffff3cb0
 8009b44:	4c000000 	.word	0x4c000000
 8009b48:	7149f2ca 	.word	0x7149f2ca
 8009b4c:	f149f2ca 	.word	0xf149f2ca
 8009b50:	0da24260 	.word	0x0da24260
 8009b54:	8da24260 	.word	0x8da24260
 8009b58:	33000000 	.word	0x33000000

08009b5c <with_errnof>:
 8009b5c:	b510      	push	{r4, lr}
 8009b5e:	ed2d 8b02 	vpush	{d8}
 8009b62:	eeb0 8a40 	vmov.f32	s16, s0
 8009b66:	4604      	mov	r4, r0
 8009b68:	f7fd fbde 	bl	8007328 <__errno>
 8009b6c:	eeb0 0a48 	vmov.f32	s0, s16
 8009b70:	ecbd 8b02 	vpop	{d8}
 8009b74:	6004      	str	r4, [r0, #0]
 8009b76:	bd10      	pop	{r4, pc}

08009b78 <xflowf>:
 8009b78:	b130      	cbz	r0, 8009b88 <xflowf+0x10>
 8009b7a:	eef1 7a40 	vneg.f32	s15, s0
 8009b7e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009b82:	2022      	movs	r0, #34	@ 0x22
 8009b84:	f7ff bfea 	b.w	8009b5c <with_errnof>
 8009b88:	eef0 7a40 	vmov.f32	s15, s0
 8009b8c:	e7f7      	b.n	8009b7e <xflowf+0x6>
	...

08009b90 <__math_uflowf>:
 8009b90:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009b98 <__math_uflowf+0x8>
 8009b94:	f7ff bff0 	b.w	8009b78 <xflowf>
 8009b98:	10000000 	.word	0x10000000

08009b9c <__math_oflowf>:
 8009b9c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009ba4 <__math_oflowf+0x8>
 8009ba0:	f7ff bfea 	b.w	8009b78 <xflowf>
 8009ba4:	70000000 	.word	0x70000000

08009ba8 <__ieee754_sqrtf>:
 8009ba8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009bac:	4770      	bx	lr
	...

08009bb0 <_init>:
 8009bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bb2:	bf00      	nop
 8009bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bb6:	bc08      	pop	{r3}
 8009bb8:	469e      	mov	lr, r3
 8009bba:	4770      	bx	lr

08009bbc <_fini>:
 8009bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bbe:	bf00      	nop
 8009bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bc2:	bc08      	pop	{r3}
 8009bc4:	469e      	mov	lr, r3
 8009bc6:	4770      	bx	lr
